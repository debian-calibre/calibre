#!/usr/bin/env python
from datetime import date

from calibre.web.feeds.news import BasicNewsRecipe, classes


def absurl(url):
    if url.startswith('/'):
        return 'https://www.irishtimes.com' + url

class IrishTimes(BasicNewsRecipe):
    title          = 'The Irish Times (free)'
    __author__    = 'unkn0wn'
    description = 'Daily news from The Irish Times'
    language = 'en_IE'

    masthead_url = 'http://www.irishtimes.com/assets/images/generic/website/logo_theirishtimes.png'

    encoding = 'utf-8'
    max_articles_per_feed = 50
    remove_empty_feeds = True
    no_stylesheets = True

    keep_only_tags = [
        classes('custom-headline custom-subheadline lead-art-wrapper article-body-wrapper byline-text'),
    ]
    remove_tags = [
        dict(name=['button', 'svg']),
        classes('sm-promo-headline top-table-list-container single-divider interstitial-link'),
    ]

    remove_attributes = ['width', 'height']
    ignore_duplicate_articles = {'title', 'url'}
    resolve_internal_links  = True

    def get_cover_url(self):
        from datetime import date
        cover = 'https://img.kiosko.net/' + date.today().strftime('%Y/%m/%d') + '/ie/irish_times.750.jpg'
        br = BasicNewsRecipe.get_browser(self, verify_ssl_certificates=False)
        try:
            br.open(cover)
        except:
            index = 'https://en.kiosko.net/ie/np/irish_times.html'
            soup = self.index_to_soup(index)
            for image in soup.find('img', attrs={'src': lambda x: x and x.endswith('750.jpg')}):
                if image['src'].startswith('/'):
                    return 'https:' + image['src']
                return image['src']
            self.log("\nCover unavailable")
            cover = None
        return cover

    def __init__(self, *args, **kwargs):
        BasicNewsRecipe.__init__(self, *args, **kwargs)
        if self.output_profile.short_name.startswith('kindle'):
            # Reduce image sizes to get file size below amazon's email
            # sending threshold
            self.web2disk_options.compress_news_images = True
            self.web2disk_options.compress_news_images_auto_size = 5
            self.log.warn('Kindle Output profile being used, reducing image quality to keep file size below amazon email threshold')

    feeds = []

    def parse_index(self):
        index = 'https://www.irishtimes.com/'
        sections = [
            'ireland', 'world', 'opinion', 'politics', 'crime-law', 'culture', 'business',
            'life-style', 'health', 'sport', 'property', 'food', 'abroad', 'environment',
            'obituaries'
        ]
        feeds = []
        soup = self.index_to_soup(index)
        for sec in sections:
            section = sec.capitalize()
            self.log(section)
            articles = []
            for a in soup.findAll('a', attrs={'href':lambda x: x and x.startswith('/' + sec + '/')}):
                url = absurl(a['href'].split('?')[0])
                if url in {index + sec + '/', index + sec}:
                    continue
                if date.today().strftime('%Y') not in url:
                    continue
                title = self.tag_to_string(a)
                self.log('\t', title, '\n\t\t', url)
                articles.append({'title': title, 'url': url})
            if articles:
                feeds.append((section, articles))
        return feeds
