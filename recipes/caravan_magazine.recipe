#!/usr/bin/env python
# vim:fileencoding=utf-8
# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

import json

from calibre.web.feeds.news import BasicNewsRecipe, classes
from mechanize import Request


def absurl(x):
    if x.startswith('//'):
        x = 'https:' + x
    elif not x.startswith('http'):
        x = 'https://caravanmagazine.in' + x
    return x

def safe_dict(data, *names):
    ans = data
    for x in names:
        ans = ans.get(x) or ''
    return ans

class CaravanMagazine(BasicNewsRecipe):

    title = 'Caravan Magazine'
    __author__ = 'Kovid Goyal, Gobelinus, unkn0wn'
    description = (
        'The Caravan has established itself as one of the countryâ€™s most respected and intellectually agile publications, '
        'setting new benchmarks for the Indian and South Asian media. We publish immersive reportage, daring commentary, '
        'path-breaking investigations, insightful literary criticism and more, spanning the worlds of politics, culture, '
        'business, society, media, the environment and the arts.'
    )
    language = 'en_IN'
    timefmt = ' [%b, %Y]'
    encoding = 'utf-8'

    no_stylesheets = True

    remove_attributes = ['style', 'height', 'width']
    ignore_duplicate_articles = {'url'}
    resolve_internal_links = True

    extra_css = '''
        blockquote, em {color:#202020;}
        .article_subtitle {font-style:italic; color:#202020;}
        #fig-c, .photo_wrapper, .cover_figure_element {text-align:center; font-size:small;}
        .pre-title, .text_wrapper {font-size:small; color:#404040;}
    '''

    def get_browser(self, *args, **kw):
        br = BasicNewsRecipe.get_browser(self, *args, **kw)
        if not self.username or not self.password:
            return br
        data = json.dumps({'email': self.username, 'name': '', 'password': self.password})
        if not isinstance(data, bytes):
            data = data.encode('utf-8')
        rq = Request(
            url='https://caravanmagazine.in/api/users/login',
            data=data,
            headers={
                'Accept': 'application/json, text/plain, */*',
                'Origin': 'https://caravanmagazine.in',
                'Referer': 'https://caravanmagazine.in/',
                'Content-type': 'application/json;charset=UTF-8',
            },
            method='POST'
        )
        res = br.open(rq).read()
        res = res.decode('utf-8')
        self.log('Login request response: {}'.format(res))
        res = json.loads(res)
        if res['code'] != 200 or res['message'] != "Login success":
            raise ValueError('Login failed, check your username and password')
        return br

    keep_only_tags = [
        classes('text_wrapper cover_figure_element article_content')
    ]

    def preprocess_html(self, soup):
        h2 = soup.find('h2')
        if h2:
            h2.name = 'p'
        for fc in soup.findAll('figcaption'):
            fc['id'] = 'fig-c'
        return soup

    def parse_index(self):
        self.log(
            '\n***\nif this recipe fails, report it on: '
            'https://www.mobileread.com/forums/forumdisplay.php?f=228\n***\n'
        )
        api = 'https://api.caravanmagazine.in/api/trpc/magazines.getLatestIssue'
        # https://api.caravanmagazine.in/api/trpc/magazines.getForMonthAndYear?batch=1&input=
        # %7B%220%22%3A%7B%22json%22%3A%7B%22month%22%3A 2 %2C%22year%22%3A 2024 %7D%7D%7D
        # input={"0":{"json":{"month":2,"year":2024}}}
        raw = self.index_to_soup(api, raw=True)
        data = json.loads(raw)['result']['data']['json']
        cover = safe_dict(data, 'issue', 'cover', 'data', 'url').replace('=s0', '=s768-rw')
        self.cover_url = absurl(cover)

        feeds = []

        for sec in data['categories']:
            section = sec['name']
            self.log(section)
            articles = []
            for arts in sec['amc']:
                title = safe_dict(arts, 'article', 'title')
                desc = safe_dict(arts, 'article', 'theme', 'name') + ' | ' + safe_dict(arts, 'article', 'printTitle')
                names = []
                for auth in arts['article']['authors']:
                    name = safe_dict(auth, 'profile', 'name')
                    if name != '':
                        names.append(name)
                if names:
                    desc = desc + ' | ' + ', '.join(names)
                url = absurl(arts['article']['slug'])
                self.log('\t', title, url, '\n\t', desc)
                articles.append({'title': title, 'description': desc, 'url': url})
            if articles:
                feeds.append((section, articles))
        return feeds
