from urllib.parse import quote

from calibre.web.feeds.news import BasicNewsRecipe, classes


class ORF(BasicNewsRecipe):
    title = 'Observer Research Foundation'
    description = (
        'Set up in 1990, ORF seeks to lead and aid policy thinking towards building a strong and prosperous India'
        ' in a fair and equitable world. It helps discover and inform Indiaâ€™s choices, and carries Indian voices '
        'and ideas to forums shaping global debates. '
    )
    language = 'en_IN'
    __author__ = 'unkn0wn'
    encoding = 'utf-8'
    no_stylesheets = True
    remove_javascript = True
    masthead_url = 'https://www.orfonline.org/wp-content/uploads/2015/09/Logo_ORF_JPEG.jpg'
    remove_attributes = ['style', 'height', 'width']
    ignore_duplicate_articles = {'url', 'title'}
    reverse_article_order = True
    remove_empty_feeds = True
    simultaneous_downloads = 1
    art_url = ''

    extra_css = '''
        img {display:block; margin:0 auto;}
        .report-slider, .author_panel {font-size:small; color:#404040;}
        .report {font-size:small; font-weight:bold;}
        .excert-italic, .recent-block-people {font-style:italic; color:#202020;}
        blockquote, em {color:#202020;}
        .espert_speak_panel {font-size:small;}
    '''

    articles_are_obfuscated = True

    def get_obfuscated_article(self, url):
        br = self.get_browser()
        soup = self.index_to_soup(url)
        link = soup.a['href']
        skip_sections =[ # add sections you want to skip
            '/video/', '/videos/', '/multimedia/', 'marathi', 'hindi', 'bangla'
        ]
        if any(x in link for x in skip_sections):
            self.abort_article('skipping video links ', link)
        self.log('Found ', link)
        self.art_url = link
        html = br.open(link).read()
        return ({ 'data': html, 'url': link })


    def get_browser(self):
        return BasicNewsRecipe.get_browser(self, user_agent='common_words/based')

    resolve_internal_links = True
    remove_empty_feeds = True

    keep_only_tags = [
        dict(name='h1'),
        classes('author_panel espert_speak_panel expert_panel_content')
    ]
    remove_tags = [
        classes(
            'social socialshare comment-area-section telegramhtml post-tag '
            'research-prev research-next col-md-4 button_group sharethis-p tags'
        )
    ]

    feeds = []

    when = '170' # hours > 7 days
    index = 'https://www.orfonline.org'

    sections = [
        'expert-speak', 'books', 'event-reports', 'events', 'forums', 'gp-orf-series', 'issue-brief', 'monitors',
        'occasional-paper', 'primer', 'series', 'surveys-polls', 'young-voices', 'research'
    ]
    a = 'https://news.google.com/rss/search?q=when:{}h+allinurl:{}&hl=en-IN&gl=IN&ceid=IN:en'
    for sec in sections:
        sec_index = index + '/' + sec + '/'
        feeds.append((sec.capitalize(), a.format(when, quote(sec_index, safe=''))))
    feeds.append(('Others', a.format(when, quote(index, safe=''))))

    def populate_article_metadata(self, article, soup, first):
        article.url = self.art_url
        article.title = article.title.replace(' - Observer Research Foundation', '')
