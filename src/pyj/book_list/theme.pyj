# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals

DARK = '#39322B'
LIGHT = '#F6F3E9'
LIGHT_DARKER = '#b6b3a8'
LIGHT_GRADIENT = 'linear-gradient(to bottom, {}, {})'.format(LIGHT, LIGHT_DARKER)

DEFAULT_COLORS = {
    # General colors
    'window-background': LIGHT,
    'window-background2': LIGHT_DARKER,
    'window-foreground': DARK,
    'window-error-foreground': 'red',
    'window-hover-foreground': 'red',
    'link-foreground': 'blue',

    # Top bar specific colors
    'bar-background': DARK,
    'bar-foreground': LIGHT,
    'bar-highlight': 'yellow',
    'heart': '#B92111',

    # Item list colors
    'list-hover-background': DARK,
    'list-hover-foreground': LIGHT,

    # Tree colors
    'tree-highlight-item': LIGHT_DARKER,

    # Button colors
    'button-start': DARK,
    'button-end': '#49423B',
    'button-text': LIGHT,

    # Dialog colors
    'dialog-background': LIGHT,
    'dialog-background-image': LIGHT_GRADIENT,
    'dialog-foreground': DARK,
}

DEFAULT_SIZES = {
    'title': '1.4rem',
    'item-list-title': '1.1rem',
    'item-list-subtitle': '0.8rem',
}

DEFAULT_FONTS = {
    'main': 'sans-serif'
}


def get_color(name):
    return DEFAULT_COLORS[name]


def color_to_rgba(color):
    # take an arbitrary color spec and return it as [r, g, b, a]
    cvs = document.createElement('canvas')
    cvs.height = 1
    cvs.width = 1
    ctx = cvs.getContext('2d')
    ctx.fillStyle = color
    ctx.fillRect(0, 0, 1, 1)
    return ctx.getImageData(0, 0, 1, 1).data


def cached_color_to_rgba(color):
    cache = cached_color_to_rgba.cache
    if not cache[color]:
        cache[color] = color_to_rgba(color)
    return cache[color]
cached_color_to_rgba.cache = {}


def get_color_as_rgba(name):
    cache = get_color_as_rgba.cache
    if not cache[name]:
        cache[name] = color_to_rgba(get_color(name))
    return cache[name]
get_color_as_rgba.cache = {}


def get_font_size(name):
    return DEFAULT_SIZES[name]

def get_font_family(name):
    name = name or 'main'
    return DEFAULT_FONTS[name]
