# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals, bound_methods

from dom import clear, set_css, build_rule
from elementmaker import E
from gettext import gettext as _

THUMBNAIL_MAX_WIDTH = 300
THUMBNAIL_MAX_HEIGHT = 400
BORDER_RADIUS = 10

def cover_grid_css():
    sel = '#' + this
    ans = build_rule(sel, display='flex', flex_wrap='wrap', justify_content='space-around', align_items='flex-end', align_content='flex-start', user_select='none', overflow='hidden')

    # Container for an individual cover
    sel += ' > div'
    ans += build_rule(
        sel, margin='10px', display='flex', align_content='flex-end', align_items='flex-end', justify_content='space-around',
        width='21vw', height='28vw', max_width=THUMBNAIL_MAX_WIDTH+'px', max_height=THUMBNAIL_MAX_HEIGHT+'px', cursor='pointer',
        min_width=f'{THUMBNAIL_MAX_WIDTH // 2}px', min_height=f'{THUMBNAIL_MAX_HEIGHT // 2}px')
    ans += build_rule(f'{sel}:hover', transform='scale(1.2)')
    ans += build_rule(f'{sel}:active', transform='scale(2)')
    ans += build_rule(sel + '.cover-grid-filler', height='0', max_height='0', min_height='0')

    # Container for cover failed to load message
    ans += build_rule(sel + ' > div', position='relative', top='-50%', transform='translateY(50%)', margin='0')

    # The actual cover
    sel += ' > img'
    ans += build_rule(sel, max_width='100%', max_height='100%', display='block', width='auto', height='auto', border_radius=BORDER_RADIUS+'px')
    return ans

def init(container):
    clear(container)
    container.appendChild(E.div(id=this))
    for i in range(12):
        container.lastChild.appendChild(E.div(class_='cover-grid-filler'))

def on_img_load_error(err):
    img = err.target
    div = img.parentNode
    if not div:
        return
    clear(div)
    div.appendChild(E.div(
        E.h2(img.getAttribute('data-title'), style='text-align:center; font-size:larger; font-weight: bold'),
        E.div(_('by'), style='text-align: center'),
        E.h2(img.getAttribute('data-authors'), style='text-align:center; font-size:larger; font-weight: bold')
    ))
    set_css(div, border='dashed 1px currentColor', border_radius=BORDER_RADIUS+'px')

def create_item(book_id, interface_data, onclick):
    cover_url = 'get/thumb/{}/{}?sz={}x{}'.format(book_id, interface_data['library_id'], Math.ceil(THUMBNAIL_MAX_WIDTH*window.devicePixelRatio), Math.ceil(THUMBNAIL_MAX_HEIGHT*window.devicePixelRatio))
    metadata = interface_data['metadata'][book_id]
    alt = _('{} by {}').format(metadata['title'], metadata['authors'].join(' & '))
    img = E.img(src=cover_url, alt=alt, title=alt, data_title=metadata['title'], data_authors=metadata['authors'].join(' & '))
    img.onerror = on_img_load_error

    ans = E.div(img, data_book_id=str(book_id))
    ans.addEventListener('click', onclick)
    return ans

def append_item(container, item):
    first_filler = container.lastChild.querySelector('.cover-grid-filler')
    container.lastChild.insertBefore(item, first_filler)

