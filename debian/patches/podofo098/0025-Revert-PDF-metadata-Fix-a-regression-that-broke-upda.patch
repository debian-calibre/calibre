From: YOKOTA Hiroshi <yokota.hgml@gmail.com>
Date: Fri, 6 Oct 2023 19:09:38 +0900
Subject: Revert "PDF metadata: Fix a regression that broke updating metadata
 in PDF files without an /Info dictionary"

Forwarded: not-needed

This reverts commit 82846b43c7cb579ec1708a023316519551f5b4b5.
---
 src/calibre/utils/podofo/__init__.py | 10 +-------
 src/calibre/utils/podofo/doc.cpp     | 48 +++++++-----------------------------
 2 files changed, 10 insertions(+), 48 deletions(-)

diff --git a/src/calibre/utils/podofo/__init__.py b/src/calibre/utils/podofo/__init__.py
index cd29451..8a53e63 100644
--- a/src/calibre/utils/podofo/__init__.py
+++ b/src/calibre/utils/podofo/__init__.py
@@ -259,13 +259,5 @@ def test_podofo():
         raise ValueError('Appending failed')
 
 
-def develop(path=sys.argv[-1]):
-    podofo = get_podofo()
-    p = podofo.PDFDoc()
-    p.open(path)
-    p.title = 'test'
-
-
-
 if __name__ == '__main__':
-    develop()
+    get_xmp_metadata(sys.argv[-1])
diff --git a/src/calibre/utils/podofo/doc.cpp b/src/calibre/utils/podofo/doc.cpp
index b174ea6..0d3adda 100644
--- a/src/calibre/utils/podofo/doc.cpp
+++ b/src/calibre/utils/podofo/doc.cpp
@@ -739,9 +739,9 @@ static PdfDictionary&
 get_or_create_info(PDFDoc *self) {
     PdfObject *info = self->doc->GetTrailer().GetDictionary().FindKey("Info");
     if (info && info->IsDictionary()) return info->GetDictionary();
-    info = &self->doc->GetObjects().CreateDictionaryObject();
-    self->doc->GetTrailer().GetDictionary().AddKeyIndirect("Info", *info);
-    return info->GetDictionary();
+    auto ninfo = self->doc->GetObjects().CreateDictionaryObject();
+    self->doc->GetTrailer().GetDictionary().AddKeyIndirect("Info", ninfo);
+    return ninfo.GetDictionary();
 }
 
 static inline PyObject*
@@ -797,62 +797,32 @@ string_metadata_setter(PDFDoc *self, const std::string_view name, PyObject *val)
 
 static int
 PDFDoc_title_setter(PDFDoc *self, PyObject *val, void *closure) {
-    try {
-        return string_metadata_setter(self, "Title", val);
-	} catch(const PdfError & err) {
-		podofo_set_exception(err);
-		return -1;
-    }
+    return string_metadata_setter(self, "Title", val);
 }
 
 static int
 PDFDoc_author_setter(PDFDoc *self, PyObject *val, void *closure) {
-    try {
-        return string_metadata_setter(self, "Author", val);
-	} catch(const PdfError & err) {
-		podofo_set_exception(err);
-		return -1;
-    }
+    return string_metadata_setter(self, "Author", val);
 }
 
 static int
 PDFDoc_subject_setter(PDFDoc *self, PyObject *val, void *closure) {
-    try {
-        return string_metadata_setter(self, "Subject", val);
-	} catch(const PdfError & err) {
-		podofo_set_exception(err);
-		return -1;
-    }
+    return string_metadata_setter(self, "Subject", val);
 }
 
 static int
 PDFDoc_keywords_setter(PDFDoc *self, PyObject *val, void *closure) {
-    try {
-        return string_metadata_setter(self, "Keywords", val);
-	} catch(const PdfError & err) {
-		podofo_set_exception(err);
-		return -1;
-    }
+    return string_metadata_setter(self, "Keywords", val);
 }
 
 static int
 PDFDoc_creator_setter(PDFDoc *self, PyObject *val, void *closure) {
-    try {
-        return string_metadata_setter(self, "Creator", val);
-	} catch(const PdfError & err) {
-		podofo_set_exception(err);
-		return -1;
-    }
+    return string_metadata_setter(self, "Creator", val);
 }
 
 static int
 PDFDoc_producer_setter(PDFDoc *self, PyObject *val, void *closure) {
-    try {
-        return string_metadata_setter(self, "Producer", val);
-	} catch(const PdfError & err) {
-		podofo_set_exception(err);
-		return -1;
-    }
+    return string_metadata_setter(self, "Producer", val);
 }
 
 static PyGetSetDef PDFDoc_getsetters[] = {
