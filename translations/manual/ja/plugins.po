# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# Yuka Kachi, 2022
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-15 08:35+0000\n"
"PO-Revision-Date: 2014-06-17 08:35+0000\n"
"Last-Translator: Yuka Kachi, 2022\n"
"Language-Team: Japanese (http://www.transifex.com/calibre/calibre/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../__w/calibre/calibre/manual/plugins.rst:4
msgid "API documentation for plugins"
msgstr "プラグインの API 説明書"

#: ../../__w/calibre/calibre/manual/plugins.rst:9
msgid ""
"Defines various abstract base classes that can be subclassed to create "
"powerful plugins. The useful classes are:"
msgstr "強力なプラグインを作成するためにサブクラス化できるさまざまな抽象基底クラスを定義します。便利なクラスは次のとおりです:"

#: ../../__w/calibre/calibre/manual/plugins.rst:19
msgid "Plugin"
msgstr "プラグイン"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:1
msgid "A calibre plugin. Useful members include:"
msgstr "calibre のプラグイン。便利なメンバーは次のとおりです:"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:3
msgid "``self.installation_type``: Stores how the plugin was installed."
msgstr "``self.installation_type``: プラグインのインストール方法を保存します。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:5
msgid "``self.plugin_path``: Stores path to the ZIP file that contains"
msgstr "``self.plugin_path``: このプラグインを含む ZIP ファイルへのパスを格納"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:5
msgid "this plugin or None if it is a builtin plugin"
msgstr "またはビルトインプラグインなら None"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:8
msgid "``self.site_customization``: Stores a customization string entered"
msgstr "``self.site_customization``: ユーザの入力したカスタマイズ文字列を"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:8
msgid "by the user."
msgstr "格納"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:10
msgid "Methods that should be overridden in sub classes:"
msgstr "サブクラスでオーバーライドする必要があるメソッド:"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:12
msgid ":meth:`initialize`"
msgstr ":meth:`initialize`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:13
msgid ":meth:`customization_help`"
msgstr ":meth:`customization_help`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:15
msgid "Useful methods:"
msgstr "便利なメソッド:"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:17
msgid ":meth:`temporary_file`"
msgstr ":meth:`temporary_file`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:18
msgid ":meth:`__enter__`"
msgstr ":meth:`__enter__`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:19
msgid ":meth:`load_resources`"
msgstr ":meth:`load_resources`"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.supported_platforms:1
msgid ""
"List of platforms this plugin works on. For example: ``['windows', 'osx', "
"'linux']``"
msgstr "このプラグインが動作するプラットフォームのリスト。例:``['windows', 'osx', 'linux']``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.name:1
msgid ""
"The name of this plugin. You must set it something other than Trivial Plugin"
" for it to work."
msgstr "このプラグインの名前。動作させるには、Trivial Plugin 以外のものを設定する必要があります。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.version:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.version:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.version:1
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr "このプラグインのバージョン。3 タプル (メジャー, マイナー, リビジョン)"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.description:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.description:1
msgid "A short string describing what this plugin does"
msgstr "このプラグインの機能を説明する短い文字列"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.author:1
msgid "The author of this plugin"
msgstr "このプラグインの作成者"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.priority:1
msgid ""
"When more than one plugin exists for a filetype, the plugins are run in "
"order of decreasing priority. Plugins with higher priority will be run "
"first. The highest possible priority is ``sys.maxsize``. Default priority is"
" 1."
msgstr "ファイルタイプに複数のプラグインが存在する場合、プラグインは優先度の高い順に実行されます。優先度の高い方のプラグインが先に実行されます。指定可能な最高の優先順位は ``sys.maxsize`` です。デフォルトの優先度は1です。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.minimum_calibre_version:1
msgid "The earliest version of calibre this plugin requires"
msgstr "このプラグインに必要な calibre の最低限のバージョン"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.installation_type:1
msgid "The way this plugin is installed"
msgstr "このプラグインのインストール方法"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.can_be_disabled:1
msgid ""
"If False, the user will not be able to disable this plugin. Use with care."
msgstr "False にすると、ユーザがこのプラグインを無効にできなくなります。注意して使用してください。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.type:1 ../../__w/calibre/calibre/manual/docstring
#: of calibre.customize.PreferencesPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.type:1
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr "このプラグインのタイプ。GUI でプラグインを分類するために使用されます"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:1
msgid ""
"Called once when calibre plugins are initialized.  Plugins are re-"
"initialized every time a new plugin is added. Also note that if the plugin "
"is run in a worker process, such as for adding books, then the plugin will "
"be initialized for every new worker process."
msgstr "calibre プラグインが初期化されるときに 1 回呼び出されます。プラグインは、新しいプラグインが追加されるたびに再初期化されます。また、本の追加などのワーカープロセスでプラグインが実行されている場合には、プラグインは新しいワーカープロセスごとに初期化されます。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:6
msgid ""
"Perform any plugin specific initialization here, such as extracting "
"resources from the plugin ZIP file. The path to the ZIP file is available as"
" ``self.plugin_path``."
msgstr "プラグインの ZIP ファイルからリソースを抽出するなど、プラグイン固有の初期化をここで実行します。ZIP ファイルへのパスは ``self.plugin_path`` として利用できます。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:10
msgid ""
"Note that ``self.site_customization`` is **not** available at this point."
msgstr "ただし ``self.site_customization`` はこの時点では使用可能では **ありません**。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:1
msgid ""
"Implement this method and :meth:`save_settings` in your plugin to use a "
"custom configuration dialog, rather then relying on the simple string based "
"default customization."
msgstr "このメソッドと :meth:`save_settings` をプラグインに実装して、単純な文字列ベースのデフォルトのカスタマイズに依存するのではなく、カスタム構成ダイアログを使用します。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:5
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:5
msgid ""
"This method, if implemented, must return a QWidget. The widget can have an "
"optional method validate() that takes no arguments and is called immediately"
" after the user clicks OK. Changes are applied if and only if the method "
"returns True."
msgstr "このメソッドは、実装された場合には QWidget を返す必要があります。ウィジェットにはオプションのメソッド validate() を含めることができます。このメソッド引数をとらず、ユーザが OKをクリックした直後に呼び出されます。メソッドが True を返す場合にのみ、変更が適用されます。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:10
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:10
msgid ""
"If for some reason you cannot perform the configuration at this time, return"
" a tuple of two strings (message, details), these will be displayed as a "
"warning dialog to the user and the process will be aborted."
msgstr "何らかの理由でこの時点で設定変更を実行できない場合は、2つの文字列 (メッセージ, 詳細)のタプルを返します。これらはユーザに警告ダイアログとして表示され、プロセスは中止されます。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:1
msgid "Save the settings specified by the user with config_widget."
msgstr "config_widget を使用してユーザが指定した設定を保存します。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:0
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:0
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:0
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.set_progress_reporter:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.sync_booklists:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:0
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:0
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:0
msgid "Parameters"
msgstr "引数"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:3
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:3
msgid "The widget returned by :meth:`config_widget`."
msgstr ":meth:`config_widget` が返すウィジェット"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.do_user_config:1
msgid ""
"This method shows a configuration dialog for this plugin. It returns True if"
" the user clicks OK, False otherwise. The changes are automatically applied."
msgstr "このメソッドは、このプラグインの設定ダイアログを表示します。ユーザが OK をクリックすると True を返し、それ以外の場合は False を返します。変更は自動的に適用されます。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:1
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:1
msgid ""
"If this plugin comes in a ZIP file (user added plugin), this method will "
"allow you to load resources from the ZIP file."
msgstr "このプラグインがZIPファイル (ユーザが追加したプラグイン) で提供されている場合、このメソッドを使用すると、ZIPファイルからリソースをロードできます。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:4
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:4
msgid "For example to load an image::"
msgstr "画像を読み込む例::"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:10
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:10
msgid "List of paths to resources in the ZIP file using / as separator"
msgstr "/ を区切り文字として使用した、ZIPファイル内のリソースへのパスのリスト"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.get_device_information:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:0
msgid "Returns"
msgstr "返り値"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:12
msgid ""
"A dictionary of the form ``{name: file_contents}``. Any names that were not "
"found in the ZIP file will not be present in the dictionary."
msgstr "`{name: file_contents}`` 形式の辞書。ZIPファイルで見つからなかった名前は、辞書に表示されません。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:1
msgid ""
"Return a string giving help on how to customize this plugin. By default "
"raise a :class:`NotImplementedError`, which indicates that the plugin does "
"not require customization."
msgstr "このプラグインをカスタマイズする方法についてのヘルプを提供する文字列を返します。デフォルトでは :class:`NotImplementedError` を発生させます。これは、プラグインがカスタマイズを必要としないことを示します。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:5
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:5
msgid ""
"If you re-implement this method in your subclass, the user will be asked to "
"enter a string as customization for this plugin. The customization string "
"will be available as ``self.site_customization``."
msgstr "このメソッドをサブクラスに再実装すると、ユーザはこのプラグインのカスタマイズとして文字列を入力するように求められます。カスタマイズ文字列は、``self.site_customization`` として利用できます。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:10
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:10
msgid ""
"Site customization could be anything, for example, the path to a needed "
"binary on the user's computer."
msgstr "サイトのカスタマイズは、たとえば、ユーザのコンピュータで必要なバイナリへのパスなど、何でもかまいません。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:13
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:13
msgid "If True return HTML help, otherwise return plain text help."
msgstr "True なら HTML ヘルプを返し、そうでなければプレーンテキストのヘルプを返します。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:1
msgid ""
"Return a file-like object that is a temporary file on the file system. This "
"file will remain available even after being closed and will only be removed "
"on interpreter shutdown. Use the ``name`` member of the returned object to "
"access the full path to the created temporary file."
msgstr "ファイルシステム上の一時ファイルであるファイルのようなオブジェクトを返します。このファイルは閉じられた後も利用可能であり、インタプリタのシャットダウン時にのみ削除されます。返されたオブジェクトの ``name`` メンバーを使用して、作成された一時ファイルへのフルパスにアクセスします。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:6
msgid "The suffix that the temporary file will have."
msgstr "一時ファイルに付けられるサフィックス。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.cli_main:1
msgid ""
"This method is the main entry point for your plugins command line interface."
" It is called when the user does: calibre-debug -r \"Plugin Name\". Any "
"arguments passed are present in the args variable."
msgstr "このメソッドは、プラグインのコマンドラインインタフェースの主要なエントリポイントです。これは、ユーザが次のように実行したときに呼び出されます: calibre-debug-r \"プラグイン名\"。渡された引数はすべて args 変数に存在します。"

#: ../../__w/calibre/calibre/manual/plugins.rst:28
msgid "FileTypePlugin"
msgstr "FileTypePlugin"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.InterfaceActionBase:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:1
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source:1
msgid "Bases: :py:class:`~calibre.customize.Plugin`"
msgstr "Bases: :py:class:`~calibre.customize.Plugin`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin:1
msgid "A plugin that is associated with a particular set of file types."
msgstr "特定のファイルタイプのセットに関連付けられているプラ​​グイン。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run. Use '*' for all file "
"types. For example: ``{'lit', 'mobi', 'prc'}``"
msgstr "このプラグインを実行する必要があるファイルタイプのセット。すべてのファイルタイプに '*' を使用します。例:`` {'lit'、'mobi'、'prc'} ``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_import:1
msgid "If True, this plugin is run when books are added to the database"
msgstr "True ならば、このプラグインは本がデータベースに追加されたときに実行されます"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_postimport:1
msgid ""
"If True, this plugin is run after books are added to the database. In this "
"case the postimport and postadd methods of the plugin are called."
msgstr "True のとき、このプラグインは、本がデータベースに追加された後に実行されます。その場合には、プラグインの postimport メソッドと postadd メソッドが呼び出されます。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_preprocess:1
msgid "If True, this plugin is run just before a conversion"
msgstr "True のとき、このプラグインは変換の直前に実行されます"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_postprocess:1
msgid ""
"If True, this plugin is run after conversion on the final file produced by "
"the conversion output plugin."
msgstr "True のとき、このプラグインは、変換出力プラグインによって生成された最終ファイルで変換後に実行されます。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should perform "
"whatever modifications are required on the e-book and return the absolute "
"path to the modified e-book. If no modifications are needed, it should "
"return the path to the original e-book. If an error is encountered it should"
" raise an Exception. The default implementation simply return the path to "
"the original e-book. Note that the path to the original file (before any "
"file type plugins are run, is available as self.original_path_to_file)."
msgstr "プラグインを実行します。サブクラスで実装する必要があります。それは電子書籍に必要な変更を実行し、変更された電子書籍への絶対パスを返します。変更が必要なければ、元の電子書籍へのパスを返します。エラーが発生した場合は、例外を発生させます。デフォルトの実装では、元の電子書籍へのパスを返すだけです。元のファイルへのパスに注意してください (ファイルタイプのプラグインが実行される前は、self.original_path_to_file として使用できます)。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:11
msgid ""
"The modified e-book file should be created with the :meth:`temporary_file` "
"method."
msgstr "変更された電子書籍ファイルは、:meth:`temporary_file` メソッドを使用して作成する必要があります。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:14
msgid "Absolute path to the e-book."
msgstr "この電子書籍への絶対パス。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:16
msgid "Absolute path to the modified e-book."
msgstr "変更された電子書籍への絶対パス。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:1
msgid ""
"Called post import, i.e., after the book file has been added to the "
"database. Note that this is different from :meth:`postadd` which is called "
"when the book record is created for the first time. This method is called "
"whenever a new file is added to a book record. It is useful for modifying "
"the book record based on the contents of the newly added file."
msgstr "インポート後、つまり本ファイルがデータベースに追加された後に呼び出されます。ただしこれは、本レコードが初めて作成されるときに呼び出される :meth:`postadd` とは異なります。このメソッドは、新しいファイルが本レコードに追加されるたびに呼び出されます。新しく追加したファイルの内容に基づいて本レコードを変更する場合に便利です。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:8
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:6
msgid "Database id of the added book."
msgstr "追加された本のデータベース ID。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:7
msgid "The file type of the book that was added."
msgstr "追加された本のファイルタイプ。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:8
msgid "Library database."
msgstr "ライブラリデータベース。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:1
msgid ""
"Called post add, i.e. after a book has been added to the db. Note that this "
"is different from :meth:`postimport`, which is called after a single book "
"file has been added to a book. postadd() is called only when an entire book "
"record with possibly more than one book file has been created for the first "
"time. This is useful if you wish to modify the book record in the database "
"when the book is first added to calibre."
msgstr "本がデータベースに追加された後に呼び出されます。ただしこれは、ひとつの本ファイルが本に追加された後に呼び出される :meth:`postimport` とは異なります。postadd() は、複数の本ファイルを含む可能性のある本レコード全体が初めて作成された場合にのみ呼び出されます。これは、本が最初に calibre に追加されたときに、データベース内の本のレコードを変更する場合に役立ちます。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:9
msgid ""
"Map of file format to path from which the file format was added. Note that "
"this might or might not point to an actual existing file, as sometimes files"
" are added as streams. In which case it might be a dummy value or a non-"
"existent path."
msgstr "ファイル形式からそのファイル形式が追加されたパスへのマップ。ただしファイルはストリームとして追加されることがあるので、これは実際に存在しているファイルを指している場合とそうでない場合があります。その場合には、それはダミー値または存在しないパスである可能性があります。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:13
msgid "Library database"
msgstr "ライブラリデータベース"

#: ../../__w/calibre/calibre/manual/plugins.rst:39
msgid "Metadata plugins"
msgstr "書誌プラグイン"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin:1
msgid "A plugin that implements reading metadata from a set of file types."
msgstr "一連のファイルタイプからの書誌の読み取りを実装するプラグイン。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run. For example: "
"``set(['lit', 'mobi', 'prc'])``"
msgstr "このプラグインを実行する必要があるファイルタイプのセット。例:`` set(['lit'、'mobi'、'prc']) ``"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:1
msgid ""
"Return metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data."
msgstr "ストリームで表されるファイル(読み取りをサポートするオブジェクトのようなファイル)の書誌を返します。入力データにエラーがある場合は、例外を発生させます。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:5
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:5
msgid ""
"The type of file. Guaranteed to be one of the entries in :attr:`file_types`."
msgstr "ファイルのタイプ。 :attr:`file_types` のエントリの1つであることが保証されています。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:7
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:7
msgid "A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ":class:`calibre.ebooks.metadata.book.Metadata` オブジェクト"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:1
msgid ""
"Set metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data."
msgstr "ストリームで表されるファイル(読み取りをサポートするオブジェクトのようなファイル)の書誌を設定します。入力データにエラーがある場合は、例外を発生させます。"

#: ../../__w/calibre/calibre/manual/plugins.rst:54
msgid "Catalog plugins"
msgstr "カタログプラグイン"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin:1
msgid "A plugin that implements a catalog generator."
msgstr "カタログジェネレータを実装するプラグイン。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.file_types:1
msgid ""
"Output file type for which this plugin should be run. For example: 'epub' or"
" 'xml'"
msgstr "このプラグインを実行する必要のある出力ファイルタイプ。例: 'epub' や 'xml'"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.cli_options:1
msgid ""
"CLI parser options specific to this plugin, declared as `namedtuple` "
"`Option`:"
msgstr "このプラグインに固有の CLI パーサーオプション。`namedtuple` `Option` として宣言されています:"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.cli_options:3
msgid ""
"from collections import namedtuple Option = namedtuple('Option', 'option, "
"default, dest, help') cli_options = [Option('--catalog-title', default = 'My"
" Catalog', dest = 'catalog_title', help = (_('Title of generated catalog. "
"\\nDefault:') + \" '\" + '%default' + \"'\"))] cli_options parsed in "
"calibre.db.cli.cmd_catalog:option_parser()"
msgstr "from collections import namedtuple Option = namedtuple('Option', 'option, default, dest, help') cli_options = [Option('--catalog-title', default = 'マイカタログ', dest = 'catalog_title', help = (_('生成されるカタログのタイトル. \\nデフォルト:') + \" '\" + '%default' + \"'\"))] cli_options parsed in calibre.db.cli.cmd_catalog:option_parser()"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.initialize:1
msgid ""
"If plugin is not a built-in, copy the plugin's .ui and .py files from the "
"ZIP file to $TMPDIR. Tab will be dynamically generated and added to the "
"Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr "プラグインがビルトインでない場合は、プラグインの .ui ファイルと .py ファイルを ZIP ファイルから $TMPDIR にコピーします。タブは動的に生成され、calibre.gui2.dialogs.catalog.py:Catalog のカタログオプションダイアログに追加されます"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should generate the "
"catalog in the format specified in file_types, returning the absolute path "
"to the generated catalog file. If an error is encountered it should raise an"
" Exception."
msgstr "プラグインを実行します。サブクラスで実装する必要があります。file_types で指定された形式でカタログを生成し、生成されたカタログファイルへの絶対パスを返す必要があります。エラーが発生した場合は、例外を発生させます。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:7
msgid ""
"The generated catalog file should be created with the :meth:`temporary_file`"
" method."
msgstr "生成されたカタログファイルは、:meth:`temporary_file` メソッドを使用して作成する必要があります"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:10
msgid "Absolute path to the generated catalog file."
msgstr "生成されたカタログファイルへの絶対パス。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:11
msgid "A dictionary of keyword arguments"
msgstr "キーワード引数の辞書"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:12
msgid "A LibraryDatabase2 object"
msgstr "LibraryDatabase2 オブジェクト"

#: ../../__w/calibre/calibre/manual/plugins.rst:64
msgid "Metadata download plugins"
msgstr "書誌ダウンロードプラグイン"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.capabilities:1
msgid ""
"Set of capabilities supported by this plugin. Useful capabilities are: "
"'identify', 'cover'"
msgstr "このプラグインでサポートされている機能のセット。便利な機能は次のとおりです: 'identify', 'cover'"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.touched_fields:1
msgid ""
"List of metadata fields that can potentially be download by this plugin "
"during the identify phase"
msgstr "識別フェーズ中にこのプラグインによってダウンロードされる可能性のある書誌フィールドのリスト"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr "プラグインが HTML 形式のコメントを返す場合は、これを True に設定します"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
msgid ""
"Setting this to True means that the browser object will indicate that it "
"supports gzip transfer encoding. This can speedup downloads but make sure "
"that the source actually supports gzip transfer encoding correctly first"
msgstr "これをTrueに設定すると、ブラウザオブジェクトは gzip 転送エンコーディングをサポートしていることを示します。これによりダウンロードを高速化できますが、最初にソースが実際にgzip転送エンコーディングを正しくサポートしていることを確認してください"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.ignore_ssl_errors:1
msgid ""
"Set this to True to ignore HTTPS certificate errors when connecting to this "
"source."
msgstr "このソースに接続するときに HTTPS 証明書エラーを無視するには、これを True に設定します。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
msgid ""
"Cached cover URLs can sometimes be unreliable (i.e. the download could fail "
"or the returned image could be bogus). If that is often the case with this "
"source, set to False"
msgstr "キャッシュされた表紙 URL は信頼できない場合があります(つまり、ダウンロードが失敗したり、返された画像が偽物である可能性があります)。このソースでこれがよく起きる場合は、False に設定してください"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.options:1
msgid ""
"A list of :class:`Option` objects. They will be used to automatically "
"construct the configuration widget for this plugin"
msgstr ":class:`Option` オブジェクトのリスト。これらは、このプラグインの構成ウィジェットを自動的に構築するために使用されます"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.config_help_message:1
msgid ""
"A string that is displayed at the top of the config widget for this plugin"
msgstr "このプラグインの設定ウィジェットの上部に表示される文字列"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
msgid "If True this source can return multiple covers for a given query"
msgstr "True のとき、このソースは特定のクエリに対して複数の表紙を返すことができます"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
msgid ""
"If set to True covers downloaded by this plugin are automatically trimmed."
msgstr "Trueに設定すると、このプラグインによってダウンロードされた表紙は自動的にトリミングされます。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.prefer_results_with_isbn:1
msgid ""
"If set to True, and this source returns multiple results for a query, some "
"of which have ISBNs and some of which do not, the results without ISBNs will"
" be ignored"
msgstr "True に設定されていて、このソースがクエリに対して複数の結果を返すとき、一部には ISBN があるが ISBN がないものもある場合、ISBN のない結果は無視されます。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.is_configured:1
msgid ""
"Return False if your plugin needs to be configured before it can be used. "
"For example, it might need a username/password/API key."
msgstr "プラグインを使用する前に設定する必要がある場合は、False を返します。たとえば、ユーザ名/パスワード/APIキーが必要になる場合があります。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
msgid ""
"Take a list of authors and return a list of tokens useful for an AND search "
"query. This function tries to return tokens in first name middle names last "
"name order, by assuming that if a comma is in the author name, the name is "
"in lastname, other names form."
msgstr "著者のリストを取得し、AND 検索クエリに役立つトークンのリストを返します。この関数は、著者名にカンマが含まれている場合、名前が「姓, 他の名前」の形式であるとみなして、名、ミドルネーム、姓の順序でトークンを返そうとします。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
msgid ""
"Take a title and return a list of tokens useful for an AND search query. "
"Excludes connectives(optionally) and punctuation."
msgstr "タイトルを取得し、AND 検索クエリに役立つトークンのリストを返します。接続詞 (オプション) と句読点を除外します。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr "ジョブのリストを最大で num 個のグループにできるだけ均等に分割します"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.test_fields:1
msgid ""
"Return the first field from self.touched_fields that is null on the mi "
"object"
msgstr "mi オブジェクトで null である self.touched_fields から最初のフィールドを返します"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
msgid ""
"Call this method in your plugin's identify method to normalize metadata "
"before putting the Metadata object into result_queue. You can of course, use"
" a custom algorithm suited to your metadata source."
msgstr "プラグインの identify メソッドでこのメソッドを呼び出して、書誌オブジェクトを result_queue に配置する前に書誌を正規化します。もちろん、書誌ソースに適したカスタムアルゴリズムを使用することもできます。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
msgid ""
"Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, "
"identifier_value, URL). The URL is the URL for the book identified by "
"identifiers at this source. identifier_type, identifier_value specify the "
"identifier corresponding to the URL. This URL must be browsable to by a "
"human using a browser. It is meant to provide a clickable link for the user "
"to easily visit the books page at this source. If no URL is found, return "
"None. This method must be quick, and consistent, so only implement it if it "
"is possible to construct the URL from a known scheme given identifiers."
msgstr "3 タプルまたは None を返します。3 タプルの形式は、(identifier_type, identifier_value, URL) です。URL は、このソースの識別子によって識別される本の URL です。identifier_type, identifier_value は、URL に対応する識別子を指定します。この URL は、ブラウザを使用する人間が閲覧できる必要があります。これは、ユーザがこのソースの本のページに簡単にアクセスできるよう、クリック可能なリンクを提供することを目的としています。URL が見つからない場合は、None を返します。このメソッドは迅速で一貫性がなければならないため、識別子が指定された既知のスキームから URL を構築できる場合にのみ実装してください。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
msgid "Return a human readable name from the return value of get_book_url()."
msgstr "get_book_url() の戻り値から人間が読める形式の名前を返します。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_urls:1
msgid ""
"Override this method if you would like to return multiple urls for this "
"book. Return a list of 3-tuples. By default this method simply calls "
":func:`get_book_url`."
msgstr "この本の複数の URL を返したい場合は、このメソッドをオーバーライドしてください。3 タプルのリストを返します。デフォルトでは、このメソッドは :func:`get_book_url` を呼び出すだけです。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
msgid ""
"Return cached cover URL for the book identified by the identifiers dict or "
"None if no such URL exists."
msgstr "識別子 dict で識別される本のキャッシュされた表紙 URL を返すか、そのような URL が存在しない場合は None を返します。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
msgid ""
"Note that this method must only return validated URLs, i.e. not URLS that "
"could result in a generic cover image or a not found error."
msgstr "このメソッドは、検証済みの URL のみを返す必要があることに注意してください。つまり、一般的な表紙画像や見つからないエラーが発生する可能性のある URL は返さないでください。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.id_from_url:1
msgid ""
"Parse a URL and return a tuple of the form: (identifier_type, "
"identifier_value). If the URL does not match the pattern for the metadata "
"source, return None."
msgstr "URLを解析し、(identifier_type, identifier_value) の形式のタプルを返します。URL が書誌ソースのパターンと一致しない場合は、None を返します。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
msgid ""
"Return a function that is used to generate a key that can sort Metadata "
"objects by their relevance given a search query (title, authors, "
"identifiers)."
msgstr "検索クエリ(タイトル、作成者、識別子)を指定して、書誌オブジェクトを関連性で並べ替えることができるキーを生成するために使用される関数を返します。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr "これらのキーは、:meth:`identify` の呼び出し結果を並べ替えるために使用されます。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
msgid ""
"For details on the default algorithm see "
":class:`InternalMetadataCompareKeyGen`. Re-implement this function in your "
"plugin if the default algorithm is not suitable."
msgstr "デフォルトのアルゴリズムの詳細については、:class:`InternalMetadataCompareKeyGen` を参照してください。デフォルトのアルゴリズムが適切でない場合は、プラグインにこの関数を再実装してください。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:1
msgid "Identify a book by its Title/Author/ISBN/etc."
msgstr "タイトル/著者/ISBN などで本を識別します。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:3
msgid ""
"If identifiers(s) are specified and no match is found and this metadata "
"source does not store all related identifiers (for example, all ISBNs of a "
"book), this method should retry with just the title and author (assuming "
"they were specified)."
msgstr "ID が指定されていて、一致するものが見つからず、この書誌ソースに関連するすべてのID (たとえば、本のすべてのISBN)が保存されていない場合、このメソッドは、タイトルと作成者のみで再試行する必要があります(指定されている場合)。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:8
msgid ""
"If this metadata source also provides covers, the URL to the cover should be"
" cached so that a subsequent call to the get covers API with the same "
"ISBN/special identifier does not need to get the cover URL again. Use the "
"caching API for this."
msgstr "この書誌ソースが表紙も提供している場合は、表紙への URL をキャッシュして、同じISBN/特別な IDを使用した表紙取得 API への後続の呼び出しで表紙 URL を再度取得する必要がないようにする必要があります。これにはキャッシング API を使用します。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:13
msgid ""
"Every Metadata object put into result_queue by this method must have a "
"`source_relevance` attribute that is an integer indicating the order in "
"which the results were returned by the metadata source for this query. This "
"integer will be used by :meth:`compare_identify_results`. If the order is "
"unimportant, set it to zero for every result."
msgstr "このメソッドによって result_queue に配置されるすべての書誌オブジェクトには、このクエリの書誌ソースによって結果が返される順序を示す整数である `source_relevance` 属性が必要です。この整数は :meth:`compare_identify_results` によって使用されます。順序が重要でない場合は、すべての結果に対してゼロに設定します。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:19
msgid ""
"Make sure that any cover/ISBN mapping information is cached before the "
"Metadata object is put into result_queue."
msgstr "書誌オブジェクトを result_queue に配置する前に、表紙/ISBNマッピング情報がキャッシュされていることを確認してください。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:22
msgid "A log object, use it to output debugging information/errors"
msgstr "ログオブジェクト。デバッグ情報/エラーを出力するために使用します"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:23
msgid ""
"A result Queue, results should be put into it. Each result is a Metadata "
"object"
msgstr "結果キュー、結果はそれに入れられるべきです。各結果は書誌オブジェクトです"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:25
msgid ""
"If abort.is_set() returns True, abort further processing and return as soon "
"as possible"
msgstr "abort.is_set() が True を返す場合は、それ以上の処理を中止して、できるだけ早く戻ります。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:27
msgid "The title of the book, can be None"
msgstr "本のタイトル。None にすることができます"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:28
msgid "A list of authors of the book, can be None"
msgstr "本の著者のリスト。None にすることができます"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:29
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr "他の ID の辞書、最も一般的なのは {'isbn': '1234 ...'}"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:31
msgid ""
"Timeout in seconds, no network request should hang for longer than timeout."
msgstr "秒単位のタイムアウト。ネットワーク要求がタイムアウトより長くハングすることはありません。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:33
msgid ""
"None if no errors occurred, otherwise a unicode representation of the error "
"suitable for showing to the user"
msgstr "エラーが発生しなかった場合は None、それ以外の場合はユーザに表示するのに適したエラーの Unicode 表現"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:1
msgid ""
"Download a cover and put it into result_queue. The parameters all have the "
"same meaning as for :meth:`identify`. Put (self, cover_data) into "
"result_queue."
msgstr "表紙をダウンロードして、result_queue に入れます。パラメータはすべて、:meth:`identify` の場合と同じ意味を持ちます。(self, cover_data) を result_queue に入れます。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:5
msgid ""
"This method should use cached cover URLs for efficiency whenever possible. "
"When cached data is not present, most plugins simply call identify and use "
"its results."
msgstr "この方法では、可能な限り効率を上げるために、キャッシュされた表紙 URL を使用する必要があります。キャッシュされたデータが存在しない場合、ほとんどのプラグインは単に identify を呼び出し、その結果を使用します。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:9
msgid ""
"If the parameter get_best_cover is True and this plugin can get multiple "
"covers, it should only get the \"best\" one."
msgstr "パラメータ get_best_cover が True であり、このプラグインが複数の表紙を取得できる場合、「最良の」表紙のみを取得する必要があります。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
msgid ""
"Generate a sort key for comparison of the relevance of Metadata objects, "
"given a search query. This is used only to compare results from the same "
"metadata source, not across different sources."
msgstr "検索クエリを指定して、書誌オブジェクトの関連性を比較するためのソートキーを生成します。これは、異なるソース間ではなく、同じ書誌ソースからの結果を比較するためにのみ使用されます。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
msgid ""
"The sort key ensures that an ascending order sort is a sort by order of "
"decreasing relevance."
msgstr "ソートキーは、昇順のソートが関連性の低いオーダーによるソートであることを保証します。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
msgid "The algorithm is:"
msgstr "アルゴリズムは:"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
msgid ""
"Prefer results that have at least one identifier the same as for the query"
msgstr "クエリと同じ ID が少なくともひとつある結果を優先する"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
msgid "Prefer results with a cached cover URL"
msgstr "キャッシュされた表紙 URL で結果を優先する"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
msgid "Prefer results with all available fields filled in"
msgstr "使用可能なすべてのフィールドに入力した結果を優先する"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
msgid ""
"Prefer results with the same language as the current user interface language"
msgstr "現在のユーザインタフェース言語と同じ言語の結果を優先する"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
msgid "Prefer results that are an exact title match to the query"
msgstr "クエリと完全に一致するタイトルの結果を優先する"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr "コメントが長い (10％以上長い) 結果を優先する"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
msgid ""
"Use the relevance of the result as reported by the metadata source's search"
msgstr "書誌ソースの検索エンジンによって報告された結果の関連性を使用する"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:17
msgid "engine"
msgstr " "

#: ../../__w/calibre/calibre/manual/plugins.rst:76
msgid "Conversion plugins"
msgstr "変換プラグイン"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin:1
msgid ""
"InputFormatPlugins are responsible for converting a document into "
"HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. "
"The main action happens in :meth:`convert`."
msgstr "InputFormatPlugins は、ドキュメントを HTML+OPF+CSS+その他に変換する役割を果たします。変換の結果は、UTF-8 でエンコードする必要があります。主なアクションは :meth:`convert` で発生します。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run For example: "
"``set(['azw', 'mobi', 'prc'])``"
msgstr "このプラグインを実行する必要があるファイルタイプのセット。例:`` set(['azw'、'mobi'、'prc']) ``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
msgid ""
"If True, this input plugin generates a collection of images, one per HTML "
"file. This can be set dynamically, in the convert method if the input files "
"can be both image collections and non-image collections. If you set this to "
"True, you must implement the get_images() method that returns a list of "
"images."
msgstr "True のとき、この入力プラグインは、HTML ファイルごとに1つずつ、画像のコレクションを生成します。入力ファイルが画像コレクションと非画像コレクションの両方である場合は、convert メソッドでこれを動的に設定できます。これを True に設定する場合は、画像のリストを返す get_images() メソッドを実装する必要があります。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.core_usage:1
msgid ""
"Number of CPU cores used by this plugin. A value of -1 means that it uses "
"all available cores"
msgstr "このプラグインで使用される CPU コアの数。値 -1 は、使用可能なすべてのコアを使用することを意味します"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.for_viewer:1
msgid ""
"If set to True, the input plugin will perform special processing to make its"
" output suitable for viewing"
msgstr "Trueに設定すると、入力プラグインは特別な処理を実行して、出力を表示に適したものにします。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.output_encoding:1
msgid ""
"The encoding that this input plugin creates files in. A value of None means "
"that the encoding is undefined and must be detected individually"
msgstr "この入力プラグインがファイルを作成するエンコーディング。None の値は、エンコーディングが未定義であり、個別に検出する必要があることを意味します。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.common_options:1
msgid ""
"Options shared by all Input format plugins. Do not override in sub-classes. "
"Use :attr:`options` instead. Every option must be an instance of "
":class:`OptionRecommendation`."
msgstr "すべての入力形式プラグインで共有されるオプション。サブクラスでオーバーライドしないでください。代わりに :attr:`options` を使用してください。すべてのオプションは、:class:`OptionRecommendation` のインスタンスである必要があります。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.options:1
msgid ""
"Options to customize the behavior of this plugin. Every option must be an "
"instance of :class:`OptionRecommendation`."
msgstr "このプラグインの動作をカスタマイズするためのオプション。すべてのオプションは、:class:`OptionRecommendation` のインスタンスである必要があります。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.recommendations:1
msgid ""
"A set of 3-tuples of the form (option_name, recommended_value, "
"recommendation_level)"
msgstr "フォームの 3 タプルのセット(option_name, recommended_value, recommendation_level)"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.get_images:1
msgid ""
"Return a list of absolute paths to the images, if this input plugin "
"represents an image collection. The list of images is in the same order as "
"the spine and the TOC."
msgstr "この入力プラグインが画像コレクションを表す場合は、画像への絶対パスのリストを返します。画像のリストは、背表紙および目次と同じ順序です。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:1
msgid ""
"This method must be implemented in sub-classes. It must return the path to "
"the created OPF file or an :class:`OEBBook` instance. All output should be "
"contained in the current folder. If this plugin creates files outside the "
"current folder they must be deleted/marked for deletion before this method "
"returns."
msgstr "このメソッドは、サブクラスで実装する必要があります。作成された OPF ファイルまたは :class:`OEBBook` インスタンスへのパスを返す必要があります。すべての出力は現在のフォルダに含まれている必要があります。このプラグインが現在のフォルダの外にファイルを作成する場合、このメソッドが戻る前に、それらを削除するか、削除のマークを付ける必要があります。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:8
msgid "A file like object that contains the input file."
msgstr "入力ファイルを含むオブジェクトのようなファイル。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:9
msgid ""
"Options to customize the conversion process. Guaranteed to have attributes "
"corresponding to all the options declared by this plugin. In addition, it "
"will have a verbose attribute that takes integral values from zero upwards. "
"Higher numbers mean be more verbose. Another useful attribute is "
"``input_profile`` that is an instance of "
":class:`calibre.customize.profiles.InputProfile`."
msgstr "変換プロセスをカスタマイズするためのオプション。このプラグインによって宣言されたすべてのオプションに対応する属性を持つことが保証されています。さらに、ゼロから上に向かって整数値を取る冗長属性があります。数値が大きいほど、冗長であることを意味します。もう1つの便利な属性は、:class:`calibre.customize.profiles.InputProfile` のインスタンスである ``input_profile`` です。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:17
msgid ""
"The extension (without the .) of the input file. It is guaranteed to be one "
"of the `file_types` supported by this plugin."
msgstr "入力ファイルの拡張子(ピリオドなし)。このプラグインでサポートされている `file_types` の1つであることが保証されています。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:20
msgid ""
"A :class:`calibre.utils.logging.Log` object. All output should use this "
"object."
msgstr ":class:`calibre.utils.logging.Log` オブジェクト。すべての出力でこのオブジェクトを使用する必要があります。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:22
msgid ""
"A dictionary of various information that the input plugin can get easily "
"that would speed up the subsequent stages of the conversion."
msgstr "入力プラグインが簡単に取得できるさまざまな情報の辞書で、変換の後続の段階を高速化します。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
msgid ""
"Called to allow the input plugin to perform postprocessing after the book "
"has been parsed."
msgstr "本が解析された後、入力プラグインが後処理を実行できるようにするために呼び出されます。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.specialize:1
msgid ""
"Called to allow the input plugin to specialize the parsed book for a "
"particular output format. Called after postprocess_book and before any "
"transforms are performed on the parsed book."
msgstr "入力プラグインが解析された本を特定の出力形式に特化できるようにするために呼び出されます。postprocess_book の後、解析された本で変換が実行される前に呼び出されます。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builtin input plugins for examples."
msgstr "calibre GUI でこのプラグインを設定するために使用されるウィジェットを作成するために呼び出されます。ウィジェットは、PluginWidgetクラスのインスタンスである必要があります。例については、ビルトイン入力プラグインを参照してください。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:1
msgid ""
"OutputFormatPlugins are responsible for converting an OEB document "
"(OPF+HTML) into an output e-book."
msgstr "OutputFormatPlugins は、OEB ドキュメント (OPF+HTML) を出力電子書籍に変換する役割を果たします。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:4
msgid ""
"The OEB document can be assumed to be encoded in UTF-8. The main action "
"happens in :meth:`convert`."
msgstr "OEB ドキュメントは UTF-8 でエンコードされていると見なすことができます。主なアクションは :meth:`convert` で発生します。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.file_type:1
msgid ""
"The file type (extension without leading period) that this plugin outputs"
msgstr "このプラグインが出力するファイルタイプ (先頭のピリオドなしの拡張子)"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.description:1
msgid ""
"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str"
msgstr "str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.description:4
msgid ""
"Create a new string object from the given object. If encoding or errors is "
"specified, then the object must expose a data buffer that will be decoded "
"using the given encoding and error handler. Otherwise, returns the result of"
" object.__str__() (if defined) or repr(object). encoding defaults to "
"sys.getdefaultencoding(). errors defaults to 'strict'."
msgstr "定されたオブジェクトから新しい文字列オブジェクトを作成します。encoding または errors が指定されている場合、オブジェクトは、指定された encoding とエラーハンドラを使用してデコードされるデータバッファを公開する必要があります。それ以外の場合は、object .__ str __() (定義されている場合) または repr(object) の結果を返します。encoding のデフォルトは sys.getdefaultencoding() です。errors のデフォルトは 'strict' です。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:1
msgid ""
"Render the contents of `oeb_book` (which is an instance of "
":class:`calibre.ebooks.oeb.OEBBook`) to the file specified by output."
msgstr "`oeb_book` (:class:`calibre.ebooks.oeb.OEBBook` のインスタンス) の内容を、output で指定されたファイルにレンダリングします。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:4
msgid ""
"Either a file like object or a string. If it is a string it is the path to a"
" folder that may or may not exist. The output plugin should write its output"
" into that folder. If it is a file like object, the output plugin should "
"write its output into the file."
msgstr "オブジェクトまたは文字列のようなファイル。文字列の場合は、存在する場合と存在しない場合があるフォルダへのパスです。出力プラグインは、その出力をそのフォルダに書き込む必要があります。オブジェクトのようなファイルの場合、出力プラグインはその出力をファイルに書き込む必要があります。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:8
msgid ""
"The input plugin that was used at the beginning of the conversion pipeline."
msgstr "変換パイプラインの開始時に使用された入力プラグイン。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:10
msgid ""
"Conversion options. Guaranteed to have attributes corresponding to the "
"OptionRecommendations of this plugin."
msgstr "変換オプション。このプラグインの OptionRecommendations に対応する属性を持つことが保証されています。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:12
msgid "The logger. Print debug/info messages etc. using this."
msgstr "ロガー。これを使用して、デバッグ/情報メッセージなどを印刷します。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_options:1
msgid ""
"Can be used to change the values of conversion options, as used by the "
"conversion pipeline."
msgstr "変換パイプラインで使用されるように、変換オプションの値を変更するために使用できます。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
msgid ""
"Can be used to make changes to the css during the CSS flattening process."
msgstr "CSS フラット化プロセス中に css に変更を加えるために使用できます。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
msgid "The item (HTML file) being processed"
msgstr "処理中の項目 (HTML ファイル)"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
msgid ""
"A Stylizer object containing the flattened styles for item. You can get the "
"style for any element by stylizer.style(element)."
msgstr "アイテムのフラット化されたスタイルを含む Stylizer オブジェクト。stylizer.style(element) を使用して、任意の要素のスタイルを取得できます。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builtin output plugins for examples."
msgstr "calibre GUI でこのプラグインを構成するために使用されるウィジェットを作成するために呼び出されます。ウィジェットは、PluginWidget クラスのインスタンスである必要があります。例については、ビルトイン出力プラグインを参照してください。"

#: ../../__w/calibre/calibre/manual/plugins.rst:91
msgid "Device drivers"
msgstr "デバイスドライバ"

#: ../../__w/calibre/calibre/manual/plugins.rst:95
msgid ""
"The base class for all device drivers is :class:`DevicePlugin`. However, if "
"your device exposes itself as a USBMS drive to the operating system, you "
"should use the USBMS class instead as it implements all the logic needed to "
"support these kinds of devices."
msgstr "すべてのデバイスドライバの基底クラスは :class:`DevicePlugin` です。ただし、デバイスがそれ自体を USBMS ドライブとしてオペレーティングシステムに公開する場合は、これらの種類のデバイスをサポートするために必要なすべてのロジックを実装するため、代わりに USBMS クラスを使用する必要があります"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin:1
msgid ""
"Defines the interface that should be implemented by backends that "
"communicate with an e-book reader."
msgstr "電子書籍リーダと通信するバックエンドによって実装される必要があるインタフェースを定義します。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.FORMATS:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.FORMATS:1
msgid "Ordered list of supported formats"
msgstr "サポートされている形式を順に並べ替えられたリスト"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.VENDOR_ID:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.VENDOR_ID:1
msgid ""
"VENDOR_ID can be either an integer, a list of integers or a dictionary If it"
" is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr "VENDOR_IDは、整数、整数のリスト、または辞書のいずれかです。辞書の場合は、次の形式の辞書の辞書である必要があります::"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.PRODUCT_ID:1
msgid "An integer or a list of integers"
msgstr "整数または整数のリスト"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.BCD:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.BCD:1
msgid ""
"BCD can be either None to not distinguish between devices based on BCD, or "
"it can be a list of the BCD numbers of all devices supported by this driver."
msgstr "BCD は、BCD に基づいてデバイスを区別しないように None にするか、このドライバでサポートされているすべてのデバイスの BCD 番号のリストにすることができます。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
msgid "Height for thumbnails on the device"
msgstr "デバイス上のサムネイルの高さ"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
msgid ""
"Compression quality for thumbnails. Set this closer to 100 to have better "
"quality thumbnails with fewer compression artifacts. Of course, the "
"thumbnails get larger as well."
msgstr "サムネイルの圧縮品質。これを 100 に近づけると、圧縮アーティファクトが少なく、サムネイルの品質が向上します。もちろん、サムネイルも大きくなります。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
msgid ""
"Set this to True if the device supports updating cover thumbnails during "
"sync_booklists. Setting it to true will ask device.py to refresh the cover "
"thumbnails during book matching"
msgstr "デバイスが sync_booklists 中に表紙サムネイルの更新をサポートしている場合は、これを True に設定します。true に設定すると、本のマッチ中に表紙のサムネイルを更新するよう device.py に要求します"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.CAN_SET_METADATA:1
msgid "Whether the metadata on books can be set via the GUI."
msgstr "本の書誌を GUI で設定できるかどうか。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
msgid "Whether the device can handle device_db metadata plugboards"
msgstr "デバイスが device_db 書誌プラグボードを処理できるかどうか"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.path_sep:1
msgid "Path separator for paths to books on device"
msgstr "デバイス上の本へのパスのパス区切り文字"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.icon:1
msgid "Icon for this device"
msgstr "このデバイスのアイコン"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
msgid ""
"GUI displays this as a message if not None in the status bar. Useful if "
"opening can take a long time"
msgstr "ステータスバーに None でない場合、GUI はこれをメッセージとして表示します。開くのに時間がかかる場合に便利です"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
msgid ""
"Set of extensions that are \"virtual books\" on the device and therefore "
"cannot be viewed/saved/added to library. For example: "
"``frozenset(['kobo'])``"
msgstr "デバイス上の「仮想本」であるため、ライブラリに表示/保存/追加できない拡張機能のセット。例:``frozenset(['kobo'])``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSION_MESSAGE:1
msgid "Message to display to user for virtual book extensions."
msgstr "仮想本拡張機能についてユーザに表示するメッセージ。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
msgid ""
"Whether to nuke comments in the copy of the book sent to the device. If not "
"None this should be short string that the comments will be replaced by."
msgstr "デバイスに送信された本のコピーのコメントを削除するかどうか。None でない場合、これはコメントが置き換えられる短い文字列である必要があります。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
msgid ""
"If True indicates that  this driver completely manages device detection, "
"ejecting and so forth. If you set this to True, you *must* implement the "
"detect_managed_devices and debug_managed_device_detection methods. A driver "
"with this set to true is responsible for detection of devices, managing a "
"blacklist of devices, a list of ejected devices and so forth. calibre will "
"periodically call the detect_managed_devices() method and if it returns a "
"detected device, calibre will call open(). open() will be called every time "
"a device is returned even if previous calls to open() failed, therefore the "
"driver must maintain its own blacklist of failed devices. Similarly, when "
"ejecting, calibre will call eject() and then assuming the next call to "
"detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr "True のとき、このドライバがデバイスの検出や取り出しなどを完全に管理していることを示します。これを True に設定する場合は、detect_managed_devices メソッドと debug_managed_device_detection メソッドを実装する必要があります。これを true に設定したドライバは、デバイスの検出、デバイスのブラックリスト、排出されたデバイスのリストなどを管理します。calibre は定期的に detect_managed_devices() メソッドを呼び出し、それが検出されたデバイスを返す場合、calibre は open() を呼び出します。open() は、open() の以前の呼び出しが失敗した場合でも、デバイスが返されるたびに呼び出されるため、ドライバは失敗したデバイスの独自のブラックリストを維持する必要があります。同様に、イジェクトするとき、calibreはeject() を呼び出し、次に detect_managed_devices() への次の呼び出しが None を返すと仮定して、post_yank_cleanup() を呼び出します。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
msgid ""
"If set the True, calibre will call the :meth:`get_driveinfo()` method after "
"the books lists have been loaded to get the driveinfo."
msgstr "True に設定すると、本のリストが読み込まれた後、calibre は :meth:`get_driveinfo()` メソッドを呼び出してdriveinfoを取得します。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
msgid ""
"If set to True, calibre will ask the user if they want to manage the device "
"with calibre, the first time it is detected. If you set this to True you "
"must implement :meth:`get_device_uid()` and "
":meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` "
"and :meth:`set_user_blacklisted_devices`"
msgstr "True に設定すると、calibre は、最初に検出されたときに、ユーザに calibre を使用してデバイスを管理するかどうかを尋ねます。これを True に設定する場合は、:meth:`get_device_uid()` と :meth:`ignore_connected_device()` と :meth:`get_user_blacklisted_devices`と :meth:`set_user_blacklisted_devices` を実装する必要があります"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
msgid ""
"Set this to a dictionary of the form {'title':title, 'msg':msg, "
"'det_msg':detailed_msg} to have calibre popup a message to the user after "
"some callbacks are run (currently only upload_books). Be careful to not spam"
" the user with too many messages. This variable is checked after *every* "
"callback, so only set it when you really need to."
msgstr "これを {'title':title, 'msg':msg, 'det_msg':detailed_msg} の形式の辞書に設定して、いくつかのコールバックが実行された後にユーザにメッセージをポップアップさせるようにします(現在は upload_books のみ)。あまりにも多くのメッセージでユーザをスパムしないように注意してください。この変数は*すべての*コールバックの後にチェックされるため、本当に必要な場合にのみ設定してください。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_open_popup_message:1
msgid ""
"GUI displays this as a non-modal popup. Should be an instance of "
"OpenPopupMessage"
msgstr "GUI は、これを非モーダルポップアップとして表示します。OpenPopupMessage のインスタンスである必要があります"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:1
msgid ""
"Return True, device_info if a device handled by this plugin is currently "
"connected."
msgstr "このプラグインによって処理されるデバイスが現在接続されている場合は、true, device_info を返します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:3
msgid "List of devices currently connected"
msgstr "現在接続されているデバイスのリスト"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:1
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr "MANAGES_DEVICE_PRESENCE が True のときにのみ呼び出されます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:3
msgid ""
"Scan for devices that this driver can handle. Should return a device object "
"if a device is found. This object will be passed to the open() method as the"
" connected_device. If no device is found, return None. The returned object "
"can be anything, calibre does not use it, it is only passed to open()."
msgstr "このドライバが処理できるデバイスをスキャンします。デバイスが見つかった場合、デバイスオブジェクトを返す必要があります。このオブジェクトは、connected_device として open() メソッドに渡されます。デバイスが見つからない場合は、None を返します。返されるオブジェクトは何でもかまいません。calibre はそれを使用せず、open() に渡されるだけです。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:9
msgid ""
"This method is called periodically by the GUI, so make sure it is not too "
"resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr "このメソッドは GUI によって定期的に呼び出されるため、リソースを大量に消費しないようにしてください。システムを繰り返しスキャンしないように、キャッシュを使用してください。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:13
msgid "Set of USB devices found on the system."
msgstr "システムで見つかった USB デバイスのセット。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:15
msgid ""
"If True and the driver uses a cache to prevent repeated scanning, the cache "
"must be flushed."
msgstr "True かつ、ドライバがキャッシュを使用してスキャンの繰り返しを防ぐ場合は、キャッシュをフラッシュする必要があります。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
msgid ""
"Should write information about the devices detected on the system to output,"
" which is a file like object."
msgstr "システムで検出されたデバイスに関する情報を出力に書き込む必要があります。これは、オブジェクトのようなファイルです。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
msgid ""
"Should return True if a device was detected and successfully opened, "
"otherwise False."
msgstr "デバイスが検出されて正常に開かれた場合は True を返し、それ以外の場合は False を返します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:1
msgid "The key to unlock the device"
msgstr "デバイスのロックを解除するためのキー"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:2
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:2
msgid "If true the packet stream to/from the device is logged"
msgstr "true の場合、デバイスとの間のパケットストリームがログに記録されます"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:3
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.set_progress_reporter:3
msgid ""
"Function that is called with a % progress (number between 0 and 100) for "
"various tasks. If it is called with -1 that means that the task does not "
"have any progress information"
msgstr "さまざまなタスクの進行率 (0〜100の数値) で呼び出される関数。-1 で呼び出された場合、タスクに進行状況情報がないことを意味します"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:7
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:7
msgid "Device information from the device scanner"
msgstr "デバイススキャナからのデバイス情報"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:1
msgid ""
"Optional method to perform further checks on a device to see if this driver "
"is capable of handling it. If it is not it should return False. This method "
"is only called after the vendor, product ids and the bcd have matched, so it"
" can do some relatively time intensive checks. The default implementation "
"returns True. This method is called only on Windows. See also "
":meth:`can_handle`."
msgstr "このドライバがデバイスを処理できるかどうかを確認するために、デバイスでさらにチェックを実行するためのオプションの方法。そうでない場合は、False を返す必要があります。このメソッドは、ベンダー、製品 ID、および bcd が一致した後にのみ呼び出されるため、比較的時間のかかるチェックを実行できます。デフォルトの実装は True を返します。このメソッドは、Windows でのみ呼び出されます。:meth:`can_handle` も参照してください。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:8
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:8
msgid ""
"Note that for devices based on USBMS this method by default delegates to "
":meth:`can_handle`.  So you only need to override :meth:`can_handle` in your"
" subclass of USBMS."
msgstr "USBMS に基づくデバイスの場合、このメソッドはデフォルトで :meth:`can_handle` に委任されることに注意してください。したがって、USBMS のサブクラスで :meth:`can_handle` をオーバーライドするだけで済みます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:12
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:12
msgid ""
"A usbdevice as returned by :func:`calibre.devices.winusb.scan_usb_devices`"
msgstr ":func:`calibre.devices.winusb.scan_usb_devices` によって返される USB デバイス"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:1
msgid "Unix version of :meth:`can_handle_windows`."
msgstr "Unixバージョンの :meth:`can_handle_windows`。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:3
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr "(vid, pid, bcd, 製造元, 製品名, シリアル番号) のタプルです"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:1
msgid ""
"Perform any device specific initialization. Called after the device is "
"detected but before any other functions that communicate with the device. "
"For example: For devices that present themselves as USB Mass storage "
"devices, this method would be responsible for mounting the device or if the "
"device has been automounted, for finding out where it has been mounted. The "
"method :meth:`calibre.devices.usbms.device.Device.open` has an "
"implementation of this function that should serve as a good example for USB "
"Mass storage devices."
msgstr "デバイス固有の初期化を実行します。デバイスが検出された後、デバイスと通信する他の機能の前に呼び出されます。例: USBマスストレージデバイスとして表示されるデバイスの場合、この方法でデバイスをマウントするか、デバイスが自動マウントされている場合は、マウントされている場所を確認します。メソッド :meth:`calibre.devices.usbms.device.Device.open` には、USB マスストレージデバイスの良い例として役立つこの関数の実装があります。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:11
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:11
msgid ""
"This method can raise an OpenFeedback exception to display a message to the "
"user."
msgstr "このメソッドは、OpenFeedback 例外を発生させて、ユーザにメッセージを表示することができます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:14
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:14
msgid ""
"The device that we are trying to open. It is a tuple of (vendor id, product "
"id, bcd, manufacturer name, product name, device serial number). However, "
"some devices have no serial number and on Windows only the first three "
"fields are present, the rest are None."
msgstr "開こうとしているデバイス。(ベンダ ID, 製品 ID, BCD, メーカー名, 製品名, デバイスのシリアル番号)のタプルです。ただし、一部のデバイスにはシリアル番号がなく、Windows では最初の 3 つのフィールドのみが表示され、残りは None です。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:20
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:20
msgid ""
"The UUID of the current calibre library. Can be None if there is no library "
"(for example when used from the command line)."
msgstr "現在の calibre ライブラリの UUID。ライブラリがない場合 (たとえば、コマンドラインから使用する場合)は None にすることができます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.eject:1
msgid ""
"Un-mount / eject the device from the OS. This does not check if there are "
"pending GUI jobs that need to communicate with the device."
msgstr "デバイスを OS からアンマウント/イジェクトします。これは、デバイスと通信する必要のある保留中の GUI ジョブがあるかどうかをチェックしません。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.eject:4
msgid ""
"NOTE: That this method may not be called on the same thread as the rest of "
"the device methods."
msgstr "注:このメソッドは、他のデバイスメソッドと同じスレッドで呼び出されない場合があります。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.post_yank_cleanup:1
msgid "Called if the user yanks the device without ejecting it first."
msgstr "デバイス上の本が calibre のデータベース内の本と一致するときに、本の一致中に呼び出されます。このメソッドは、デバイスからのデータを calibre のデータベースに同期する役割を果たします (必要な場合)。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.set_progress_reporter:1
msgid "Set a function to report progress information."
msgstr "進捗情報を報告する機能を設定します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.get_device_information:1
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr "デバイスにデバイス情報を問い合わせます。L{DeviceInfoQuery} を参照してください。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.get_device_information:3
msgid ""
"(device name, device version, software version on device, MIME type) The "
"tuple can optionally have a fifth element, which is a drive information "
"dictionary. See usbms.driver for an example."
msgstr "(デバイス名, デバイスバージョン, デバイス上のソフトウェアバージョン, MIMEタイプ) タプルには、オプションで、ドライブ情報辞書である 5 番目の要素を含めることができます。例については、usbms.driver を参照してください。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_driveinfo:1
msgid ""
"Return the driveinfo dictionary. Usually called from "
"get_device_information(), but if loading the driveinfo is slow for this "
"driver, then it should set SLOW_DRIVEINFO. In this case, this method will be"
" called by calibre after the book lists have been loaded. Note that it is "
"not called on the device thread, so the driver should cache the drive info "
"in the books() method and this function should return the cached data."
msgstr "driveinfo ディクショナリを返します。通常は get_device_information() から呼び出されますが、このドライバの driveinfo のロードが遅い場合は、SLOW_DRIVEINFO を設定する必要があります。この場合、このメソッドは、本リストがロードされた後に calibre によって呼び出されます。デバイススレッドでは呼び出されないため、ドライバはドライブ情報を books() メソッドにキャッシュし、この関数はキャッシュされたデータを返す必要があることに注意してください。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.card_prefix:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.card_prefix:1
msgid ""
"Return a 2 element list of the prefix to paths on the cards. If no card is "
"present None is set for the card's prefix. E.G. ('/place', '/place2') (None,"
" 'place2') ('place', None) (None, None)"
msgstr "カードのパスにプレフィックスの 2 要素リストを返します。カードが存在しない場合、カードのプレフィックスには None が設定されます。例: ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:4
msgid "Get total space available on the mountpoints:"
msgstr "マウントポイントで利用可能な合計スペースを取得します:"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:2
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:2
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:2
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:2
msgid "Main memory"
msgstr "メインメモリ"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:3
msgid "Memory Card A"
msgstr "メモリカード A"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:4
msgid "Memory Card B"
msgstr "メモリカード B"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:6
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:6
msgid ""
"A 3 element list with total space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return 0."
msgstr "バイト単位の合計スペースが (1、2、3) の3要素リスト。特定のデバイスにこれらの場所がない場合は、0 を返す必要があります。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:4
msgid "Get free space available on the mountpoints:"
msgstr "マウントポイントで利用可能な空きスペースを取得します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:3
msgid "Card A"
msgstr "カード A"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:4
msgid "Card B"
msgstr "カード B"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:6
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:6
msgid ""
"A 3 element list with free space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return -1."
msgstr "バイト単位の空き領域が (1, 2, 3) の 3 要素リスト。特定のデバイスにこれらの場所がない場合は、-1 を返す必要があります。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:1
msgid "Return a list of e-books on the device."
msgstr "デバイス上の電子書籍のリストを返します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:3
msgid ""
"If 'carda' or 'cardb' return a list of e-books on the specific storage card,"
" otherwise return list of e-books in main memory of device. If a card is "
"specified and no books are on the card return empty list."
msgstr "'carda' または 'cardb' が特定のストレージカード上の電子書籍のリストを返す場合、それ以外の場合はデバイスのメインメモリにある電子書籍のリストを返します。カードが指定されていて、カードに本がない場合は、空のリストを返します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:8
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:8
msgid "A BookList."
msgstr "本のリスト。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:1
msgid ""
"Upload a list of books to the device. If a file already exists on the "
"device, it should be replaced. This method should raise a "
":class:`FreeSpaceError` if there is not enough free space on the device. The"
" text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is"
" not None otherwise it must contain the word \"memory\"."
msgstr "本のリストをデバイスにアップロードします。ファイルがデバイスにすでに存在する場合は、それを置き換える必要があります。デバイスに十分な空き領域がない場合、このメソッドは :class:`FreeSpaceError` を発生させる必要があります。FreeSpaceError のテキストには、``on_card`` が None でない場合は \"card\" という単語が含まれている必要があります。それ以外の場合は、\"memory\" という単語が含まれている必要があります。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:7
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:7
msgid "A list of paths"
msgstr "パスのリスト"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:8
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:8
msgid ""
"A list of file names that the books should have once uploaded to the device."
" len(names) == len(files)"
msgstr "本がデバイスにアップロードされたときに必要なファイル名のリスト。len(names)== len(files)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:10
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:10
msgid ""
"If not None, it is a list of :class:`Metadata` objects. The idea is to use "
"the metadata to determine where on the device to put the book. len(metadata)"
" == len(files). Apart from the regular cover (path to cover), there may also"
" be a thumbnail attribute, which should be used in preference. The thumbnail"
" attribute is of the form (width, height, cover_data as jpeg)."
msgstr "None でない場合は、:class:`Metadata` オブジェクトのリストです。アイデアは、書誌を使用して、本を置くデバイスの場所を決定することです。len(metadata)== len(files)。通常の表紙(表紙へのパス)とは別に、サムネイル属性もある場合があります。これは優先的に使用する必要があります。サムネイル属性の形式は (幅, 高さ, JPEG の cover_data) です。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:17
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:17
msgid ""
"A list of 3-element tuples. The list is meant to be passed to "
":meth:`add_books_to_metadata`."
msgstr "3 要素タプルのリスト。このリストは、:meth:`add_books_to_metadata` に渡されることを意図しています。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:1
msgid ""
"Add locations to the booklists. This function must not communicate with the "
"device."
msgstr "本リストに場所を追加します。この機能はデバイスと通信してはなりません。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:4
msgid "Result of a call to L{upload_books}"
msgstr "L{upload_books} への呼び出しの結果"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:5
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ":meth:`upload_books` と同じ、:class:`Metadata` オブジェクトのリスト。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:7
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:5
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.sync_booklists:3
msgid ""
"A tuple containing the result of calls to (:meth:`books(oncard=None)`, "
":meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr "(:meth:`books(oncard=None)`, :meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`) への呼び出しの結果を含むタプル。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.delete_books:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.delete_books:1
msgid "Delete books at paths on device."
msgstr "デバイス上のパスにある本を削除します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:1
msgid ""
"Remove books from the metadata list. This function must not communicate with"
" the device."
msgstr "書誌リストから本を削除します。この機能はデバイスと通信してはなりません。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:4
msgid "paths to books on the device."
msgstr "デバイス上の本へのパス。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.sync_booklists:1
msgid "Update metadata on device."
msgstr "デバイスの書誌を更新します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:1
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr "デバイスの ``path`` にあるファイルを読み取り、出力ファイルに書き込みます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:3
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr "`` sys.stdout`` のようなファイルオブジェクトまたは :func:`open` 呼び出しの結果。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.config_widget:1
msgid ""
"Should return a QWidget. The QWidget contains the settings for the device "
"interface"
msgstr "QWidget を返す必要があります。QWidget には、デバイスインタフェースの設定が含まれています"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.save_settings:1
msgid ""
"Should save settings to disk. Takes the widget created in "
":meth:`config_widget` and saves all settings to disk."
msgstr "設定をディスクに保存する必要があります。:meth:`config_widget` で作成されたウィジェットを取得し、すべての設定をディスクに保存します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.settings:1
msgid ""
"Should return an opts object. The opts object should have at least one "
"attribute `format_map` which is an ordered list of formats for the device."
msgstr "opts オブジェクトを返す必要があります。opts オブジェクトには、デバイスのフォーマットの順序付きリストである少なくとも1つの属性 `format_map` が必要です。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:1
msgid ""
"provide the driver the current set of plugboards and a function to select a "
"specific plugboard. This method is called immediately before add_books and "
"sync_booklists."
msgstr "ドライバに現在のプラグボードのセットと特定のプラグボードを選択する機能を提供します。このメソッドは、add_books および sync_booklists の直前に呼び出されます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "pb_func is a callable with the following signature::"
msgstr "pb_funcは、次のシグネチャを持つ呼び出し可能です::"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "def pb_func(device_name, format, plugboards)"
msgstr "def pb_func(device_name, format, plugboards)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:8
msgid ""
"You give it the current device name (either the class name or "
"DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or"
" 'device_db'), and the plugboards (you were given those by set_plugboards, "
"the same place you got this method)."
msgstr "現在のデバイス名 (クラス名または DEVICE_PLUGBOARD_NAME のいずれか)、関心のある形式('real' 形式または 'device_db')、およびプラグボード (これらは set_plugboards によって与えらます。このメソッドが与えられたのと同じ場所です)。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:13
msgid "None or a single plugboard instance."
msgstr "None または単一のプラグボードインスタンス。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.set_driveinfo_name:1
msgid ""
"Set the device name in the driveinfo file to 'name'. This setting will "
"persist until the file is re-created or the name is changed again."
msgstr "driveinfo ファイルのデバイス名を 'name' に設定します。この設定は、ファイルが再作成されるか、名前が再度変更されるまで保持されます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.set_driveinfo_name:4
msgid ""
"Non-disk devices should implement this method based on the location codes "
"returned by the get_device_information() method."
msgstr "非ディスクデバイスは、get_device_information() メソッドによって返されるロケーションコードに基づいてこのメソッドを実装する必要があります。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:1
msgid ""
"Given a list of paths, returns another list of paths. These paths point to "
"addable versions of the books."
msgstr "パスのリストを指定すると、別のパスのリストを返します。これらのパスは、追加可能なバージョンの本を指しています。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:4
msgid ""
"If there is an error preparing a book, then instead of a path, the position "
"in the returned list for that book should be a three tuple: (original_path, "
"the exception instance, traceback)"
msgstr "本の準備中にエラーが発生した場合は、パスではなく、その本の返されるリスト内の位置を3 タプルにする必要があります:(original_path, 例外インスタンス, traceback)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.startup:1
msgid ""
"Called when calibre is starting the device. Do any initialization required. "
"Note that multiple instances of the class can be instantiated, and thus "
"__init__ can be called multiple times, but only one instance will have this "
"method called. This method is called on the device thread, not the GUI "
"thread."
msgstr "calibre がデバイスを起動しているときに呼び出されます。必要な初期化を行います。クラスの複数のインスタンスをインスタンス化できるため、__ init__ を複数回呼び出すことができますが、このメソッドが呼び出されるのは1つのインスタンスのみであることに注意してください。このメソッドは、GUI スレッドではなく、デバイススレッドで呼び出されます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.shutdown:1
msgid ""
"Called when calibre is shutting down, either for good or in preparation to "
"restart. Do any cleanup required. This method is called on the device "
"thread, not the GUI thread."
msgstr "calibre がシャットダウンしているとき、または再起動の準備のために呼び出されます。必要なクリーンアップを実行します。このメソッドは、GUI スレッドではなく、デバイススレッドで呼び出されます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_uid:1
msgid ""
"Must return a unique id for the currently connected device (this is called "
"immediately after a successful call to open()). You must implement this "
"method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr "現在接続されているデバイスの一意のIDを返す必要があります(これは、open() の呼び出しが成功した直後に呼び出されます)。ASK_TO_ALLOW_CONNECT = True を設定する場合は、このメソッドを実装する必要があります"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.ignore_connected_device:1
msgid ""
"Should ignore the device identified by uid (the result of a call to "
"get_device_uid()) in the future. You must implement this method if you set "
"ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately "
"after open(), so if open() caches some state, the driver should reset that "
"state."
msgstr "将来、uid (get_device_uid() の呼び出しの結果) によって識別されるデバイスを無視する必要があります。ASK_TO_ALLOW_CONNECT = True を設定する場合は、このメソッドを実装する必要があります。ただしこの関数は open() の直後に呼び出されるため、open() が何らかの状態をキャッシュする場合、ドライバはその状態をリセットする必要があります。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
msgid ""
"Return map of device uid to friendly name for all devices that the user has "
"asked to be ignored."
msgstr "ユーザが無視するように要求したすべてのデバイスのフレンドリ名にデバイス uid のマップを返します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
msgid "Set the list of device uids that should be ignored by this driver."
msgstr "このドライバが無視する必要のあるデバイス uid のリストを設定します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
msgid ""
"Implement this method if your device wants to override a particular "
"preference. You must ensure that all call sites that want a preference that "
"can be overridden use device_prefs['something'] instead of "
"prefs['something']. Your method should call "
"device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: "
"metadata management (prefs['manage_device_metadata'])"
msgstr "デバイスが特定の設定を上書きする場合は、このメソッドを実装します。オーバーライド可能な設定が必要なすべての呼び出しサイトで、prefs['something'] ではなく device_prefs['something'] を使用するようにする必要があります。メソッドは device_prefs.set_overrides(pref=val, pref=val, ...) を呼び出す必要があります。現在使用されているもの: 書誌管理 (prefs ['manage_device_metadata'])"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_library_info:1
msgid ""
"Implement this method if you want information about the current calibre "
"library. This method is called at startup and when the calibre library "
"changes while connected."
msgstr "現在の calibre ライブラリに関する情報が必要な場合は、このメソッドを実装します。このメソッドは、起動時および接続中に calibre ライブラリが変更されたときに呼び出されます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
msgid ""
"Called by the device manager when starting plugins. If this method returns a"
" string, then a) it supports the device manager's dynamic control interface,"
" and b) that name is to be used when talking to the plugin."
msgstr "プラグインの起動時にデバイスマネージャによって呼び出されます。このメソッドが文字列を返す場合、a) デバイスマネージャーの動的制御インタフェースをサポートし、b) プラグインと通信するときにその名前が使用されます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:3
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:4
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:6
msgid ""
"This method can be called on the GUI thread. A driver that implements this "
"method must be thread safe."
msgstr "このメソッドは、GUI スレッドで呼び出すことができます。このメソッドを実装するドライバは、スレッドセーフである必要があります。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:1
msgid ""
"This method is called to start the plugin. The plugin should begin to accept"
" device connections however it does that. If the plugin is already accepting"
" connections, then do nothing."
msgstr "このメソッドは、プラグインを起動するために呼び出されます。プラグインはデバイス接続の受け入れを開始する必要がありますが、それは可能です。プラグインがすでに接続を受け入れている場合は、何もしません。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:1
msgid ""
"This method is called to stop the plugin. The plugin should no longer accept"
" connections, and should cleanup behind itself. It is likely that this "
"method should call shutdown. If the plugin is already not accepting "
"connections, then do nothing."
msgstr "このメソッドは、プラグインを停止するために呼び出されます。プラグインは接続を受け入れなくなり、プラグイン自体の背後でクリーンアップする必要があります。このメソッドは shutdown を呼び出す必要がある可能性があります。プラグインがすでに接続を受け入れていない場合は、何もしません。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:1
msgid ""
"Return the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started. Return None if the option does not "
"exist."
msgstr "opt_string で示されるオプションの値を返します。このメソッドは、プラグインが開始されていないときに呼び出すことができます。オプションが存在しない場合はNoneを返します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:1
msgid ""
"Set the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started."
msgstr "opt_string で示されるオプションの値を設定します。このメソッドは、プラグインが開始されていないときに呼び出すことができます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:1
msgid "Return True if the plugin is started, otherwise false"
msgstr "プラグインが開始されている場合は True を返し、そうでない場合は false を返します"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:1
msgid ""
"Called during book matching when a book on the device is matched with a book"
" in calibre's db. The method is responsible for synchronizing data from the "
"device to calibre's db (if needed)."
msgstr "デバイス上の本が calibre のデータベース内の本と一致するときに、本の一致中に呼び出されます。このメソッドは、デバイスからのデータをcalibreのデータベースに同期する役割を果たします(必要な場合)。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:5
msgid ""
"The method must return a two-value tuple. The first value is a set of "
"calibre book ids changed if calibre's database was changed or None if the "
"database was not changed. If the first value is an empty set then the "
"metadata for the book on the device is updated with calibre's metadata and "
"given back to the device, but no GUI refresh of that book is done. This is "
"useful when the calibre data is correct but must be sent to the device."
msgstr "このメソッドは、2 つの値のタプルを返す必要があります。最初の値は、calibre のデータベースが変更された場合に変更された calibre 本 ID のセットであり、データベースが変更されていない場合は None です。最初の値が空のセットである場合、デバイス上の本の書誌は calibre の書誌で更新され、デバイスに戻されますが、その本の GUI 更新は行われません。これは、calibre データが正しいが、デバイスに送信する必要がある場合に役立ちます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:13
msgid ""
"The second value is itself a 2-value tuple. The first value in the tuple "
"specifies whether a book format should be sent to the device. The intent is "
"to permit verifying that the book on the device is the same as the book in "
"calibre. This value must be None if no book is to be sent, otherwise return "
"the base file name on the device (a string like foobar.epub). Be sure to "
"include the extension in the name. The device subsystem will construct a "
"send_books job for all books with not- None returned values. Note: other "
"than to later retrieve the extension, the name is ignored in cases where the"
" device uses a template to generate the file name, which most do. The second"
" value in the returned tuple indicated whether the format is future-dated. "
"Return True if it is, otherwise return False. calibre will display a dialog "
"to the user listing all future dated books."
msgstr "2 番目の値は、それ自体が 2 値のタプルです。タプルの最初の値は、本の形式をデバイスに送信するかどうかを指定します。目的は、デバイス上の本が calibre の本と同じであるかどうかを検証できるようにすることです。本を送信しない場合は、この値を None にする必要があります。そうでない場合は、デバイスのベースファイル名 (foobar.epub などの文字列) を返します。名前には必ず拡張子を含めてください。デバイスサブシステムは、戻り値が None でないすべての本に対して send_books ジョブを作成します。注: 後で拡張子を取得する場合を除いて、デバイスがテンプレートを使用してファイル名を生成する場合、名前は無視されます。ほとんどの場合、この名前は無視されます。返されたタプルの 2 番目の値は、その形式が未来の日付であるかどうかを示しています。そうである場合は True を返し、そうでない場合は False を返します。calibre は、未来の日付の本をすべて一覧表示するダイアログをユーザに表示します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:27
msgid ""
"Extremely important: this method is called on the GUI thread. It must be "
"threadsafe with respect to the device manager's thread."
msgstr "非常に重要です。このメソッドは GUI スレッドで呼び出されます。デバイスマネージャのスレッドに対してスレッドセーフである必要があります。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:30
msgid ""
"book_id: the calibre id for the book in the database. book_metadata: the "
"Metadata object for the book coming from the device. first_call: True if "
"this is the first call during a sync, False otherwise"
msgstr "book_id: データベース内の本の calibre ID。book_metadata: デバイスからの本の書誌オブジェクト。first_call: これが同期中の最初の呼び出しである場合は True、それ以外の場合は False"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:1
msgid "Bases: :py:class:`list`"
msgstr "Bases: :py:class:`list`"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:1
msgid "A list of books. Each Book object must have the fields"
msgstr "本のリスト。Book オブジェクトごとに次のフィールドが必要です"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:3
msgid "title"
msgstr "title"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:4
msgid "authors"
msgstr "authors"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:5
msgid "size (file size of the book)"
msgstr "size (本のファイルサイズ)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:6
msgid "datetime (a UTC time tuple)"
msgstr "datetime (a UTC 時刻タプル)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:7
msgid "path (path on the device to the book)"
msgstr "path (デバイス上の本へのパス)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:8
msgid ""
"thumbnail (can be None) thumbnail is either a str/bytes object with the "
"image data or it should have an attribute image_path that stores an absolute"
" (platform native) path to the image"
msgstr "thumbnail (None でもかまいません)サムネイルは、画像データを含むstr / bytesオブジェクトであるか、画像への絶対 (プラットフォームネイティブ)パスを格納する属性 image_path を持っている必要があります"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:11
msgid "tags (a list of strings, can be empty)."
msgstr "tags (文字列のリスト、空にすることができます)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.supports_collections:1
msgid "Return True if the device supports collections for this book list."
msgstr "デバイスがこの本リストのコレクションをサポートしている場合は True を返します。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.add_book:1
msgid ""
"Add the book to the booklist. Intent is to maintain any device-internal "
"metadata. Return True if booklists must be sync'ed"
msgstr "本リストに本を追加します。目的は、デバイス内部の書誌を維持することです。本リストを同期する必要がある場合は True を返します"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.remove_book:1
msgid ""
"Remove a book from the booklist. Correct any device metadata at the same "
"time"
msgstr "本リストから本を削除します。デバイスの書誌を同時に修正します"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:1
msgid ""
"Return a dictionary of collections created from collection_attributes. Each "
"entry in the dictionary is of the form collection name:[list of books]"
msgstr "collection_attributes から作成されたコレクションの辞書を返します。辞書の各エントリは、コレクション 名の形式です:[本のリスト]"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:5
msgid ""
"The list of books is sorted by book title, except for collections created "
"from series, in which case series_index is used."
msgstr "本のリストは、シリーズから作成されたコレクションを除いて、本のタイトルで並べ替えられています。この場合、series_index が使用されます。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:8
msgid "A list of attributes of the Book object"
msgstr "Book オブジェクトの属性のリスト"

#: ../../__w/calibre/calibre/manual/plugins.rst:110
msgid "USB Mass Storage based devices"
msgstr "USB マスストレージベースのデバイス"

#: ../../__w/calibre/calibre/manual/plugins.rst:112
msgid ""
"The base class for such devices is "
":class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits "
"some of its functionality from its bases, documented below. A typical basic "
"USBMS based driver looks like this:"
msgstr "このようなデバイスの基底クラスは :class:`calibre.devices.usbms.driver.USBMS` です。このクラスは、その機能の一部をベースから順に継承します。これについては、以下で説明します。典型的な基本的な USBMS ベースのドライバは次のようになります。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device:1
msgid ""
"Bases: :py:class:`~calibre.devices.usbms.deviceconfig.DeviceConfig`, "
":py:class:`~calibre.devices.interface.DevicePlugin`"
msgstr "Bases: :py:class:`~calibre.devices.usbms.deviceconfig.DeviceConfig`, :py:class:`~calibre.devices.interface.DevicePlugin`"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device:1
msgid ""
"This class provides logic common to all drivers for devices that export "
"themselves as USB Mass Storage devices. Provides implementations for "
"mounting/ejecting of USBMS devices on all platforms."
msgstr "このクラスは、USB マスストレージデバイスとして自身をエクスポートするデバイスのすべてのドライバに共通のロジックを提供します。すべてのプラットフォームで USBMS デバイスをマウント/イジェクトするための実装を提供します。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
msgid ""
"String identifying the main memory of the device in the Windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "Windows PnP id文字列でデバイスのメインメモリを識別する文字列。これは、None、文字列、文字列のリスト、またはコンパイルされた正規表現にすることができます"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
msgid ""
"String identifying the first card of the device in the Windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "Windows PnP id文字列でデバイスの最初のカードを識別する文字列。これは、None、文字列、文字列のリスト、またはコンパイルされた正規表現にすることができます"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
msgid ""
"String identifying the second card of the device in the Windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "Windows PnP id文字列でデバイスの 2 番目のカードを識別する文字列。これは、None、文字列、文字列のリスト、またはコンパイルされた正規表現にすることができます"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
msgid ""
"Used by the new driver detection to disambiguate main memory from storage "
"cards. Should be a regular expression that matches the main memory mount "
"point assigned by macOS"
msgstr "新しいドライバ検出によって使用され、ストレージカードからメインメモリを明確にします。macOS によって割り当てられたメインメモリのマウントポイントにマッチする正規表現である必要があります"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
msgid "The maximum length of paths created on the device"
msgstr "デバイス上に作成されるパスの最大長"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
msgid "Put news in its own folder"
msgstr "ニュースを独自のフォルダに入れる"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.windows_sort_drives:1
msgid ""
"Called to disambiguate main memory and storage card for devices that do not "
"distinguish between them on the basis of `WINDOWS_CARD_NAME`. For example: "
"The EB600"
msgstr "`WINDOWS_CARD_NAME` に基づいてそれらを区別しないデバイスのメインメモリとストレージカードを明確にするために呼び出されます。例: EB600"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.sanitize_callback:1
msgid ""
"Callback to allow individual device drivers to override the path "
"sanitization used by :meth:`create_upload_path`."
msgstr "個々のデバイスドライバが :meth:`create_upload_path` によって使用されるパスサニタイズをオーバーライドできるようにするコールバック。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.filename_callback:1
msgid ""
"Callback to allow drivers to change the default file name set by "
":meth:`create_upload_path`."
msgstr "ドライバが :meth:`create_upload_path` で設定されたデフォルトのファイル名を変更できるようにするためのコールバック。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.sanitize_path_components:1
msgid ""
"Perform any device specific sanitization on the path components for files to"
" be uploaded to the device"
msgstr "デバイスにアップロードするファイルのパスコンポーネントに対して、デバイス固有のサニタイズを実行します"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.get_annotations:1
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr "path_map をデバイスで見つかったファイルの annotation_map に解決します"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.add_annotation_to_library:1
msgid "Add an annotation to the calibre library"
msgstr "calibre ライブラリに注釈を追加します"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS:1
msgid ""
"Bases: :py:class:`~calibre.devices.usbms.cli.CLI`, "
":py:class:`~calibre.devices.usbms.device.Device`"
msgstr "Bases: :py:class:`~calibre.devices.usbms.cli.CLI`, :py:class:`~calibre.devices.usbms.device.Device`"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS:1
msgid ""
"The base class for all USBMS devices. Implements the logic for "
"sending/getting/updating metadata/caching metadata/etc."
msgstr "すべての USBMS デバイスの基底クラス。書誌の送信/取得/更新/書誌のキャッシュなどのロジックを実装します。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:1
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr "本の表紙をデバイスにアップロードします。デフォルトの実装は何もしません。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:3
msgid "The full path to the folder where the associated book is located."
msgstr "関連する本が置かれているフォルダへのフルパス。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:4
msgid "The name of the book file without the extension."
msgstr "拡張子のない本ファイルの名前。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:5
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr "本に属する書誌。表紙に metadata.thumbnail を使用します"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:7
msgid "The full path to the e-book file"
msgstr "電子書籍ファイルへのフルパス"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.normalize_path:1
msgid "Return path with platform native path separators"
msgstr "プラットフォームのネイティブパスセパレータを使用したリターンパス"

#: ../../__w/calibre/calibre/manual/plugins.rst:157
msgid "User interface actions"
msgstr "ユーザインタフェースアクション"

#: ../../__w/calibre/calibre/manual/plugins.rst:159
msgid ""
"If you are adding your own plugin in a ZIP file, you should subclass both "
"InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` "
"method of your InterfaceActionBase subclass must return an instantiated "
"object of your InterfaceBase subclass."
msgstr "独自のプラグインを ZIP ファイルで追加する場合は、InterfaceActionBase と InterfaceAction の両方をサブクラス化する必要があります。InterfaceActionBase サブクラスの :meth:`load_actual_plugin` メソッドは、InterfaceBase サブクラスのインスタンス化されたオブジェクトを返す必要があります。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:1
msgid "Bases: :py:class:`~PyQt6.QtCore.QObject`"
msgstr ""

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:1
msgid ""
"A plugin representing an \"action\" that can be taken in the graphical user "
"interface. All the items in the toolbar and context menus are implemented by"
" these plugins."
msgstr "グラフィカルユーザインタフェースで実行できる「アクション」を表すプラグイン。ツールバーとコンテキストメニューのすべての項目は、これらのプラグインによって実装されます。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:5
msgid ""
"Note that this class is the base class for these plugins, however, to "
"integrate the plugin with calibre's plugin system, you have to make a "
"wrapper class that references the actual plugin. See the "
":mod:`calibre.customize.builtins` module for examples."
msgstr "このクラスはこれらのプラグインの基底クラスであることに注意してください。ただし、プラグインをcalibreのプラグインシステムと統合するには、実際のプラグインを参照するラッパークラスを作成する必要があります。例については、:mod:`calibre.customize.builtins` モジュールを参照してください。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:10
msgid ""
"If two :class:`InterfaceAction` objects have the same name, the one with "
"higher priority takes precedence."
msgstr "2 つの :class:`InterfaceAction` オブジェクトが同じ名前の場合、優先度の高い方が優先されます。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:13
msgid ""
"Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, "
":meth:`location_selected`, :meth:`shutting_down`, "
":meth:`initialization_complete` and :meth:`tag_browser_context_action` "
"methods."
msgstr "サブクラスは、:meth:`genesis`, :meth:`library_changed`, :meth:`location_selected`, :meth:`shutting_down`, :meth:`initialization_complete` および :meth:`tag_browser_context_action` メソッドを実装する必要があります。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:17
msgid ""
"Once initialized, this plugin has access to the main calibre GUI via the "
":attr:`gui` member. You can access other plugins by name, for example::"
msgstr "初期化されると、このプラグインは :attr:`gui` メンバーを介してメイン calibre GUI にアクセスできます。次のように、名前で他のプラグインにアクセスできます::"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:22
msgid ""
"To access the actual plugin, use the :attr:`interface_action_base_plugin` "
"attribute, this attribute only becomes available after the plugin has been "
"initialized. Useful if you want to use methods from the plugin class like "
"do_user_config()."
msgstr "実際のプラグインにアクセスするには、:attr:`interface_action_base_plugin` 属性を使用します。この属性は、プラグインが初期化された後にのみ使用可能になります。do_user_config() のようなプラグインクラスのメソッドを使用する場合に便利です。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:27
msgid ""
"The QAction specified by :attr:`action_spec` is automatically create and "
"made available as ``self.qaction``."
msgstr ":attr:`action_spec` で指定された QAction は自動的に作成され、``self.qaction`` として利用できるようになります。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.name:1
msgid ""
"The plugin name. If two plugins with the same name are present, the one with"
" higher priority takes precedence."
msgstr "プラグイン名。同じ名前のプラグインが2つ存在する場合は、優先度の高いプラグインが優先されます。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.priority:1
msgid ""
"The plugin priority. If two plugins with the same name are present, the one "
"with higher priority takes precedence."
msgstr "プラグインの優先度。同じ名前のプラグインが2つ存在する場合は、優先度の高いプラグインが優先されます。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.popup_type:1
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr "このプラグインがツールバーに追加されたときのメニューポップアップタイプ"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.auto_repeat:1
msgid ""
"Whether this action should be auto repeated when its shortcut key is held "
"down."
msgstr "ショートカットキーを押したときにこのアクションを自動的に繰り返すかどうか。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_spec:1
msgid ""
"Of the form: (text, icon_path, tooltip, keyboard shortcut). icon, tooltip "
"and keyboard shortcut can be None. keyboard shortcut must be either a "
"string, None or tuple of shortcuts. If None, a keyboard shortcut "
"corresponding to the action is not registered. If you pass an empty tuple, "
"then the shortcut is registered with no default key binding."
msgstr ""

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_add_menu:1
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr "True のとき、メニューが自動的に作成され、self.qaction に追加されます。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
msgid ""
"If True, a clone of self.qaction is added to the menu of self.qaction If you"
" want the text of this action to be different from that of self.qaction, set"
" this variable to the new text"
msgstr "True のとき、self.qaction のクローンが self.qaction のメニューに追加されます。このアクションのテキストを self.qaction のテキストとは異なるものにする場合は、この変数を新しいテキストに設定します。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.dont_add_to:1
msgid ""
"Set of locations to which this action must not be added. See "
":attr:`all_locations` for a list of possible locations"
msgstr "このアクションを追加してはならない場所のセット。可能な場所のリストについては、:attr:`all_locations` を参照してください"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.dont_remove_from:1
msgid ""
"Set of locations from which this action must not be removed. See "
":attr:`all_locations` for a list of possible locations"
msgstr "このアクションを削除してはならない場所のセット。可能な場所のリストについては、:attr:`all_locations` を参照してください"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_type:1
msgid ""
"Type of action 'current' means acts on the current view 'global' means an "
"action that does not act on the current view, but rather on calibre as a "
"whole"
msgstr "アクションのタイプ 'current' は現在のビューに作用することを意味します 'global' は現在のビューに作用するのではなく、全体として calibre に作用するアクションを意味します"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.accepts_drops:1
msgid ""
"If True, then this InterfaceAction will have the opportunity to interact "
"with drag and drop events. See the methods, :meth:`accept_enter_event`, "
":meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr "True のとき、この InterfaceAction はドラッグアンドドロップイベントと対話する機会があります。詳細については、メソッド :meth:`accept_enter_event`, :meth`:accept_drag_move_event`, :meth:`drop_event` を参照してください。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accept_enter_event:1
msgid ""
"This method should return True iff this interface action is capable of "
"handling the drag event. Do not call accept/ignore on the event, that will "
"be taken care of by the calibre UI."
msgstr "このインタフェースアクションがドラッグイベントを処理できる場合、このメソッドは True を返す必要があります。イベントで accept/ignore を呼び出さないでください。これは calibre UI によって処理されます。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.drop_event:1
msgid ""
"This method should perform some useful action and return True iff this "
"interface action is capable of handling the drop event. Do not call "
"accept/ignore on the event, that will be taken care of by the calibre UI. "
"You should not perform blocking/long operations in this function. Instead "
"emit a signal or use QTimer.singleShot and return quickly. See the builtin "
"actions for examples."
msgstr "このインタフェースアクションがドロップイベントを処理できる場合、このメソッドはいくつかの有用なアクションを実行し、True を返す必要があります。イベントで accept/ignore を呼び出さないでください。これは calibre UI によって処理されます。この関数では、ブロッキング/ロング操作を実行しないでください。代わりに、信号を発するか、QTimer.singleShot を使用して、すばやく戻ります。例については、ビルトインのアクションを参照してください。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:1
msgid ""
"Convenience method to easily add actions to a QMenu. Returns the created "
"QAction. This action has one extra attribute calibre_shortcut_unique_name "
"which if not None refers to the unique name under which this action is "
"registered with the keyboard manager."
msgstr "QMenu にアクションを簡単に追加するための便利な方法。作成された QAction を返します。このアクションには、1つの追加属性 calibre_shortcut_unique_name があります。これは、None でない場合、このアクションがキーボードマネージャに登録される一意の名前を参照します。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:6
msgid "The QMenu the newly created action will be added to"
msgstr "新しく作成されたアクションが追加される QMenu"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:7
msgid ""
"A unique name for this action, this must be globally unique, so make it as "
"descriptive as possible. If in doubt, add an UUID to it."
msgstr "このアクションの一意の名前。これはグローバルに一意である必要があるため、できるだけわかりやすくします。疑わしい場合は、UUID を追加してください。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:10
msgid "The text of the action."
msgstr "アクションのテキスト。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:11
msgid ""
"Either a QIcon or a file name. The file name is passed to the QIcon.ic() "
"builtin, so you do not need to pass the full path to the images folder."
msgstr ""

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:14
msgid ""
"A string, a list of strings, None or False. If False, no keyboard shortcut "
"is registered for this action. If None, a keyboard shortcut with no default "
"keybinding is registered. String and list of strings register a shortcut "
"with default keybinding as specified."
msgstr "文字列、文字列のリスト、None または False。False の場合、このアクションのキーボードショートカットは登録されません。None の場合、デフォルトのキーバインドのないキーボードショートカットが登録されます。文字列と文字列のリストは、指定されたデフォルトのキーバインドでショートカットを登録します。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:18
msgid "A description for this action. Used to set tooltips."
msgstr "このアクションの説明。ツールチップを設定するために使用されます。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:20
msgid ""
"A callable which is connected to the triggered signal of the created action."
msgstr "作成されたアクションのトリガーされたシグナルに接続されている呼び出し可能オブジェクト。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:22
msgid ""
"The text displayed to the user when customizing the keyboard shortcuts for "
"this action. By default it is set to the value of ``text``."
msgstr "このアクションのキーボードショートカットをカスタマイズするときにユーザに表示されるテキスト。デフォルトでは `text`` の値に設定されています。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:25
msgid ""
"Shortcuts for actions that don't always appear, or are library dependent, "
"may disappear when other keyboard shortcuts are edited unless "
"```persist_shortcut``` is set True."
msgstr "`` `persist_shortcut``` が True に設定されていない限り、他のキーボードショートカットを編集すると、常に表示されるとは限らない、またはライブラリに依存するアクションのショートカットが表示されなくなる場合があります。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:12
msgid ""
"A dictionary of the form ``{name : file_contents}``. Any names that were not"
" found in the ZIP file will not be present in the dictionary."
msgstr "``{name : file_contents}`` 形式の辞書。ZIPファイルで見つからなかった名前は、辞書に表示されません。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.genesis:1
msgid ""
"Setup this plugin. Only called once during initialization. self.gui is "
"available. The action specified by :attr:`action_spec` is available as "
"``self.qaction``."
msgstr "このプラグインを設定します。初期化中に 1 回だけ呼び出されます。self.gui が利用可能です。:attr:`action_spec` で指定されたアクションは、``self.qaction`` として使用できます。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.location_selected:1
msgid ""
"Called whenever the book list being displayed in calibre changes. Currently "
"values for loc are: ``library, main, card and cardb``."
msgstr "calibre に表示されている本リストが変更されるたびに呼び出されます。現在、loc の値は、``library, main, card and cardb``です。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.location_selected:4
msgid ""
"This method should enable/disable this action and its sub actions as "
"appropriate for the location."
msgstr "このメソッドは、場所に応じて、このアクションとそのサブアクションを有効/無効にする必要があります。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:1
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:1
msgid "Called whenever the current library is changed."
msgstr "現在のライブラリが変更されるたびに呼び出されます。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:3
msgid "The LibraryDatabase corresponding to the previous library."
msgstr "前のライブラリに関連する LibraryDatabase。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:4
msgid "The LibraryDatabase corresponding to the new library."
msgstr "新しいライブラリに関連する LibraryDatabase。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:3
msgid "The LibraryDatabase corresponding to the current library."
msgstr "現在のライブラリに対応する LibraryDatabase。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
msgid ""
"Called once per action when the layout of the main GUI is completed. If your"
" action needs to make changes to the layout, they should be done here, "
"rather than in :meth:`initialization_complete`."
msgstr "メイン GUI のレイアウトが完了すると、アクションごとに1回呼び出されます。アクションでレイアウトを変更する必要がある場合は、:meth:`initialization_complete` ではなく、ここで変更する必要があります。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.initialization_complete:1
msgid ""
"Called once per action when the initialization of the main GUI is completed."
msgstr "メイン GUI の初期化が完了すると、アクションごとに 1 回呼び出されます。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.tag_browser_context_action:1
msgid ""
"Called when displaying the context menu in the Tag browser. ``index`` is the"
" QModelIndex that points to the Tag browser item that was right clicked. "
"Test it for validity with index.valid() and get the underlying TagTreeItem "
"object with index.data(Qt.ItemDataRole.UserRole). Any action objects yielded"
" by this method will be added to the context menu."
msgstr "タグブラウザにコンテキストメニューを表示するときに呼び出されます。`` index`` は、右クリックされたタグブラウザアイテムを指す QModelIndex です。index.valid() を使用して有効性をテストし、index.data(Qt.ItemDataRole.UserRole) を使用して基になる TagTreeItem オブジェクトを取得します。このメソッドによって生成されたアクションオブジェクトはすべて、コンテキストメニューに追加されます。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.shutting_down:1
msgid ""
"Called once per plugin when the main GUI is in the process of shutting down."
" Release any used resources, but try not to block the shutdown for long "
"periods of time."
msgstr "メインGUIがシャットダウン中の場合、プラグインごとに1回呼び出されます。使用済みのリソースを解放しますが、シャットダウンを長期間ブロックしないようにしてください。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.InterfaceActionBase.load_actual_plugin:1
msgid "This method must return the actual interface action plugin object."
msgstr "このメソッドは、実際のインタフェースアクションプラグインオブジェクトを返す必要があります。"

#: ../../__w/calibre/calibre/manual/plugins.rst:175
msgid "Preferences plugins"
msgstr "設定プラグイン"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:1
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr "環境設定ダイアログに表示されるウィジェットを表すプラグイン。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:3
msgid ""
"This plugin has only one important method :meth:`create_widget`. The various"
" fields of the plugin control how it is categorized in the UI."
msgstr "このプラグインには、重要なメソッドが1つだけあります。:meth:`create_widget` です。プラグインのさまざまなフィールドは、UI でのプラグインの分類方法を制御します。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.config_widget:1
msgid ""
"Import path to module that contains a class named ConfigWidget which "
"implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr "ConfigWidgetInterface を実装する ConfigWidget という名前のクラスを含むモジュールへのパスをインポートします。:meth:`create_widget` によって使用されます。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.category_order:1
msgid ""
"Where in the list of categories the :attr:`category` of this plugin should "
"be."
msgstr "カテゴリのリストのどこに、このプラグインの :attr:`category` があるべきか。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.name_order:1
msgid ""
"Where in the list of names in a category, the :attr:`gui_name` of this "
"plugin should be"
msgstr "カテゴリ内の名前のリストで、このプラグインの :attr:`gui_name` は次のようになります"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.category:1
msgid "The category this plugin should be in"
msgstr "このプラグインが含まれるべきカテゴリ"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.gui_category:1
msgid "The category name displayed to the user for this plugin"
msgstr "このプラグインのユーザに表示されるカテゴリ名"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.gui_name:1
msgid "The name displayed to the user for this plugin"
msgstr "このプラグインのユーザに表示される名前"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.icon:1
msgid "The icon for this plugin, should be an absolute path"
msgstr "このプラグインのアイコンは絶対パスである必要があります"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.description:1
msgid "The description used for tooltips and the like"
msgstr "ツールチップなどに使用される説明"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:1
msgid ""
"Create and return the actual Qt widget used for setting this group of "
"preferences. The widget must implement the "
":class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr "このプリファレンスのグループを設定するために使用される実際の Qt ウィジェットを作成して返します。ウィジェットは :class:`calibre.gui2.preferences.ConfigWidgetInterface` を実装する必要があります。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:5
msgid ""
"The default implementation uses :attr:`config_widget` to instantiate the "
"widget."
msgstr "デフォルトの実装では、:attr:`config_widget` を使用してウィジェットをインスタンス化します。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface:1
msgid ""
"This class defines the interface that all widgets displayed in the "
"Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base "
"class that implements this interface and defines various convenience methods"
" as well."
msgstr "このクラスは、環境設定ダイアログに表示されるすべてのウィジェットが実装する必要のあるインタフェースを定義します。このインタフェースを実装し、さまざまな便利なメソッドも定義する基底クラスについては、:class:`ConfigWidgetBase` を参照してください。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetBase.changed_signal:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
msgid ""
"This signal must be emitted whenever the user changes a value in this widget"
msgstr "このシグナルは、ユーザがこのウィジェットの値を変更するたびに発行される必要があります"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetBase.supports_restoring_to_defaults:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ":meth:`restore_to_defaults` メソッドが実装されている場合は、True に設定します。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
msgid "The tooltip for the \"Restore defaults\" button"
msgstr "\"デフォルトに戻す\" ボタンのツールチップ"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetBase.restart_critical:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
msgid ""
"If True the Preferences dialog will not allow the user to set any more "
"preferences. Only has effect if :meth:`commit` returns True."
msgstr "True のとき、環境設定ダイアログでは、ユーザはこれ以上設定を設定できません。:meth:`commit` が True を返す場合にのみ効果があります。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
msgid ""
"Called once before the widget is displayed, should perform any necessary "
"setup."
msgstr "ウィジェットが表示される前に 1 回呼び出され、必要なセットアップを実行する必要があります。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
msgid "The main calibre graphical user interface"
msgstr "メイン calibre のグラフィカルユーザインタフェース"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.initialize:1
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
msgid ""
"Should set all config values to their initial values (the values stored in "
"the config files). A \"return\" statement is optional. Return False if the "
"dialog is not to be shown."
msgstr "すべての構成値を初期値(構成ファイルに保存されている値)に設定する必要があります。\"return\" 文はオプションです。ダイアログを表示しない場合は False を返します。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.restore_defaults:1
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
msgid "Should set all config values to their defaults."
msgstr "すべての構成値をデフォルトに設定する必要があります。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.commit:1
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
msgid ""
"Save any changed settings. Return True if the changes require a restart, "
"False otherwise. Raise an :class:`AbortCommit` exception to indicate that an"
" error occurred. You are responsible for giving the user feedback about what"
" the error is and how to correct it."
msgstr "変更した設定を保存します。変更で再起動が必要な場合は True を返し、それ以外の場合はFalseを返します。:class:`AbortCommit` 例外を発生させて、エラーが発生したことを示します。あなたは、エラーが何であるか、そしてそれを修正する方法についてユーザにフィードバックを与える責任があります。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
msgid ""
"Called once after this widget is committed. Responsible for causing the gui "
"to reread any changed settings. Note that by default the GUI re-initializes "
"various elements anyway, so most widgets won't need to use this method."
msgstr "このウィジェットがコミットされた後に 1 回呼び出されます。変更された設定を GUI に再読み取りさせる責任があります。ただしデフォルトでは、GUI はとにかくさまざまな要素を再初期化するため、ほとんどのウィジェットはこのメソッドを使用する必要がありません。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.initial_tab_changed:1
msgid ""
"Called if the initially displayed tab is changed before the widget is shown,"
" but after it is initialized."
msgstr ""

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:1
msgid ""
"Base class that contains code to easily add standard config widgets like "
"checkboxes, combo boxes, text fields and so on. See the :meth:`register` "
"method."
msgstr "チェックボックス、コンボボックス、テキストフィールドなどの標準構成ウィジェットを簡単に追加するためのコードを含む基底クラス。:meth:`register` メソッドを参照してください。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:5
msgid ""
"This class automatically handles change notification, resetting to default, "
"translation between gui objects and config objects, etc. for registered "
"settings."
msgstr "このクラスは、登録された設定の変更通知、デフォルトへのリセット、GUI オブジェクトと構成オブジェクト間の変換などを自動的に処理します。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:9
msgid ""
"If your config widget inherits from this class but includes setting that are"
" not registered, you should override the :class:`ConfigWidgetInterface` "
"methods and call the base class methods inside the overrides."
msgstr "構成ウィジェットがこのクラスを継承しているが、登録されていない設定が含まれている場合は、:class:`ConfigWidgetInterface` メソッドをオーバーライドし、オーバーライド内で基底クラスメソッドを呼び出す必要があります。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:1
msgid "Register a setting."
msgstr "設定を登録します。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:3
msgid "The setting name"
msgstr "設定名"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:4
msgid "The config object that reads/writes the setting"
msgstr "設定の読み取り/書き込みを行う構成オブジェクト"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:5
msgid ""
"The name of the GUI object that presents an interface to change the setting."
" By default it is assumed to be ``'opt_' + name``."
msgstr "設定を変更するためのインターフェースを提供する GUI オブジェクトの名前。デフォルトでは、``'opt_' + name`` と見なされます。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:8
msgid ""
"If this setting is a multiple choice (combobox) based setting, the list of "
"choices. The list is a list of two element tuples of the form: ``[(gui name,"
" value), ...]``"
msgstr "この設定が複数選択 (コンボボックス) ベースの設定である場合、選択肢のリスト。このリストは、次の形式の 2 つの要素タプルのリストです: ``[(gui name, value), ...]``"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:11
msgid ""
"The class responsible for managing this setting. The default class handles "
"almost all cases, so this param is rarely used."
msgstr "この設定の管理を担当するクラス。デフォルトのクラスはほとんどすべてのケースを処理するため、このパラメータが使用されることはめったにありません。"
