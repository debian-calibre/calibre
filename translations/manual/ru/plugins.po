# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# Aleksandr Ryzhov, 2016
# ashed <craysy@gmail.com>, 2020-2022
# Dmitry <dmitry@shishkin.us>, 2016
# Alexander Filёv, 2015
# Николай Кочкин <urfiner@gmail.com>, 2015
# Виктор, 2022
# Родион Р., 2020
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-27 07:23+0000\n"
"PO-Revision-Date: 2014-06-17 08:35+0000\n"
"Last-Translator: ashed <craysy@gmail.com>, 2020-2022\n"
"Language-Team: Russian (http://www.transifex.com/calibre/calibre/language/ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../__w/calibre/calibre/manual/plugins.rst:4
msgid "API documentation for plugins"
msgstr "Документация по API для плагинов"

#: ../../__w/calibre/calibre/manual/plugins.rst:9
msgid ""
"Defines various abstract base classes that can be subclassed to create "
"powerful plugins. The useful classes are:"
msgstr "Определяет различные абстрактные основные классы, которые можно разделить на подклассы, для создания эффективных плагинов. К полезным классам относятся:"

#: ../../__w/calibre/calibre/manual/plugins.rst:19
msgid "Plugin"
msgstr "Плагин"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:1
msgid "A calibre plugin. Useful members include:"
msgstr "Плагин calibre. Включая эти полезные плагины:"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:3
msgid "``self.installation_type``: Stores how the plugin was installed."
msgstr "``self.installation_type``: Хранит способ установки плагина."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:5
msgid "``self.plugin_path``: Stores path to the ZIP file that contains"
msgstr "``self.plugin_path``: Хранит путь к ZIP-файлу, содержащему"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:5
msgid "this plugin or None if it is a builtin plugin"
msgstr "этот плагин или None, если это встроенный плагин"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:8
msgid "``self.site_customization``: Stores a customization string entered"
msgstr "``self.site_customization``: Сохраняет введенную строку настройки"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:8
msgid "by the user."
msgstr "пользователем."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:10
msgid "Methods that should be overridden in sub classes:"
msgstr "Методы, которые необходимо переопределить в подклассах:"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:12
msgid ":meth:`initialize`"
msgstr ":meth:`initialize`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:13
msgid ":meth:`customization_help`"
msgstr ":meth:`customization_help`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:15
msgid "Useful methods:"
msgstr "Полезные методы:"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:17
msgid ":meth:`temporary_file`"
msgstr ":meth:`temporary_file`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:18
msgid ":meth:`__enter__`"
msgstr ":meth:`__enter__`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:19
msgid ":meth:`load_resources`"
msgstr ":meth:`load_resources`"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.supported_platforms:1
msgid ""
"List of platforms this plugin works on. For example: ``['windows', 'osx', "
"'linux']``"
msgstr "Список платформ, на которых работает этот плагин. Например: ``['windows', 'osx', 'linux']``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.name:1
msgid ""
"The name of this plugin. You must set it something other than Trivial Plugin"
" for it to work."
msgstr "Название этого плагина. Вы должны установить для него что-то другое, кроме Trivial Plugin, чтобы он работал."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.version:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.version:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.version:1
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr "Версия этого плагина в виде 3 выпусков (основной, дополнительный, ревизия)"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.description:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.description:1
msgid "A short string describing what this plugin does"
msgstr "Короткая строка, описывающая, что делает этот плагин"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.author:1
msgid "The author of this plugin"
msgstr "Автор этого плагина"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.priority:1
msgid ""
"When more than one plugin exists for a filetype, the plugins are run in "
"order of decreasing priority. Plugins with higher priority will be run "
"first. The highest possible priority is ``sys.maxsize``. Default priority is"
" 1."
msgstr "Если для одного типа файла существует несколько подключаемых модулей, они запускаются в порядке убывания приоритета. Плагины с более высоким приоритетом будут запущены первыми. Максимально возможный приоритет - ``sys.maxsize``. Приоритет по умолчанию = 1."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.minimum_calibre_version:1
msgid "The earliest version of calibre this plugin requires"
msgstr "Минимальная требуемая для этого плагина версия calibre"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.installation_type:1
msgid "The way this plugin is installed"
msgstr "Способ установки этого плагина"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.can_be_disabled:1
msgid ""
"If False, the user will not be able to disable this plugin. Use with care."
msgstr "При False пользователь не сможет отключить этот плагин. Используйте с осторожностью."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.type:1 ../../__w/calibre/calibre/manual/docstring
#: of calibre.customize.PreferencesPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.type:1
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr "Тип плагина. Используется для категоризации в графической оболочке. "

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:1
msgid ""
"Called once when calibre plugins are initialized.  Plugins are re-"
"initialized every time a new plugin is added. Also note that if the plugin "
"is run in a worker process, such as for adding books, then the plugin will "
"be initialized for every new worker process."
msgstr "Вызывается один раз при инициализации подключаемых модулей calibre. Плагины повторно инициализируются каждый раз, когда добавляется новый плагин. Также обратите внимание, что если плагин запускается в рабочем процессе, например, добавлении книг, то плагин будет инициализирован для каждого нового рабочего процесса."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:6
msgid ""
"Perform any plugin specific initialization here, such as extracting "
"resources from the plugin ZIP file. The path to the ZIP file is available as"
" ``self.plugin_path``."
msgstr "Выполните здесь любую инициализацию конкретного плагина, например, извлечение ресурсов из ZIP-файла плагина. Путь к ZIP-файлу доступен как ``self.plugin_path``."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:10
msgid ""
"Note that ``self.site_customization`` is **not** available at this point."
msgstr "Обратите внимание, что на данном этапе ``self.site_customization`` сейчас **недоступен**."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:1
msgid ""
"Implement this method and :meth:`save_settings` in your plugin to use a "
"custom configuration dialog, rather then relying on the simple string based "
"default customization."
msgstr "Реализуйте этот метод и :meth:`save_settings` в своем плагине, чтобы использовать настраиваемое диалоговое окно конфигурации, а не полагаться на простую настройку по умолчанию на основе строк."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:5
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:5
msgid ""
"This method, if implemented, must return a QWidget. The widget can have an "
"optional method validate() that takes no arguments and is called immediately"
" after the user clicks OK. Changes are applied if and only if the method "
"returns True."
msgstr "Этот метод, если он реализован, должен возвращать QWidget. Виджет может иметь необязательный метод validate(), который не принимает аргументов и вызывается сразу после того, как пользователь нажимает кнопку ОК. Изменения применяются тогда и только тогда, когда метод возвращает True."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:10
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:10
msgid ""
"If for some reason you cannot perform the configuration at this time, return"
" a tuple of two strings (message, details), these will be displayed as a "
"warning dialog to the user and the process will be aborted."
msgstr "Если по какой-либо причине вы не можете выполнить настройку в это время, верните кортеж из двух строк (сообщение, подробности), они будут отображаться как диалоговое окно с предупреждением для пользователя, и процесс будет прерван."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:1
msgid "Save the settings specified by the user with config_widget."
msgstr "Сохраните настройки, указанные пользователем, с помощью config_widget."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:0
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:0
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:0
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.set_progress_reporter:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.sync_booklists:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:0
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:0
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:0
msgid "Parameters"
msgstr "Параметры"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:3
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:3
msgid "The widget returned by :meth:`config_widget`."
msgstr "Виджет, возвращаемый :meth:`config_widget`."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.do_user_config:1
msgid ""
"This method shows a configuration dialog for this plugin. It returns True if"
" the user clicks OK, False otherwise. The changes are automatically applied."
msgstr "Этот метод показывает диалог конфигурации для этого плагина. Он возвращает True, если пользователь нажимает OK, в противном случае - False. Изменения применяются автоматически."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:1
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:1
msgid ""
"If this plugin comes in a ZIP file (user added plugin), this method will "
"allow you to load resources from the ZIP file."
msgstr "Если этот плагин поставляется в виде ZIP-файла (плагин, добавленный пользователем), этот метод позволит вам загружать ресурсы из ZIP-файла."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:4
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:4
msgid "For example to load an image::"
msgstr "Например, чтобы загрузить изображение::"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:10
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:10
msgid "List of paths to resources in the ZIP file using / as separator"
msgstr "Список путей к ресурсам в ZIP-файле с использованием разделителя /"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.get_device_information:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:0
msgid "Returns"
msgstr "Возврат"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:12
msgid ""
"A dictionary of the form ``{name: file_contents}``. Any names that were not "
"found in the ZIP file will not be present in the dictionary."
msgstr "Словарь вида ``{name: file_contents}``. Любые имена, которые не были найдены в ZIP-файле, не будут представлены в словаре."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:1
msgid ""
"Return a string giving help on how to customize this plugin. By default "
"raise a :class:`NotImplementedError`, which indicates that the plugin does "
"not require customization."
msgstr "Вернуть строку с информацией о том, как настроить этот плагин. По умолчанию вызывается :class:`NotImplementedError`, что указывает на то, что плагин не требует настройки."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:5
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:5
msgid ""
"If you re-implement this method in your subclass, the user will be asked to "
"enter a string as customization for this plugin. The customization string "
"will be available as ``self.site_customization``."
msgstr "Если вы повторно реализуете этот метод в своем подклассе, пользователю будет предложено ввести строку в качестве настройки для этого плагина. Строка настройки будет доступна как ``self.site_customization``."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:10
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:10
msgid ""
"Site customization could be anything, for example, the path to a needed "
"binary on the user's computer."
msgstr "Настройкой сайта может быть что угодно, например, путь к необходимому двоичному файлу на компьютере пользователя."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:13
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:13
msgid "If True return HTML help, otherwise return plain text help."
msgstr "Если True, вернуть HTML-справку, иначе вернуть текстовую справку."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:1
msgid ""
"Return a file-like object that is a temporary file on the file system. This "
"file will remain available even after being closed and will only be removed "
"on interpreter shutdown. Use the ``name`` member of the returned object to "
"access the full path to the created temporary file."
msgstr "Возвращает файловый объект, который является временным файлом в файловой системе. Этот файл останется доступным даже после закрытия и будет удален только при завершении работы интерпретатора. Используйте член ``name`` возвращаемого объекта, чтобы получить полный путь к созданному временному файлу"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:6
msgid "The suffix that the temporary file will have."
msgstr "Суффикс временного файла."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.cli_main:1
msgid ""
"This method is the main entry point for your plugins command line interface."
" It is called when the user does: calibre-debug -r \"Plugin Name\". Any "
"arguments passed are present in the args variable."
msgstr "Этот метод является основной точкой входа для интерфейса командной строки ваших плагинов. Он вызывается, когда пользователь делает: calibre-debug -r \"Plugin Name\". Любые переданные аргументы присутствуют в переменной args."

#: ../../__w/calibre/calibre/manual/plugins.rst:28
msgid "FileTypePlugin"
msgstr "FileTypePlugin"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.InterfaceActionBase:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:1
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source:1
msgid "Bases: :py:class:`~calibre.customize.Plugin`"
msgstr "Bases: :py:class:`~calibre.customize.Plugin`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin:1
msgid "A plugin that is associated with a particular set of file types."
msgstr "Плагин, связанный с определенным набором типов файлов."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run. Use '*' for all file "
"types. For example: ``{'lit', 'mobi', 'prc'}``"
msgstr "Набор типов файлов, для которых следует запускать этот плагин. Используйте '*' для всех типов файлов. Например: ``{'lit', 'mobi', 'prc'}``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_import:1
msgid "If True, this plugin is run when books are added to the database"
msgstr "Если True, этот плагин запускается при добавлении книг в базу данных"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_postimport:1
msgid ""
"If True, this plugin is run after books are added to the database. In this "
"case the postimport and postadd methods of the plugin are called."
msgstr "Если True, этот плагин запускается после добавления книг в базу данных. В этом случае вызываются методы плагина postimport и postadd."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_preprocess:1
msgid "If True, this plugin is run just before a conversion"
msgstr "Если True, этот плагин запускается непосредственно перед конвертацией."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_postprocess:1
msgid ""
"If True, this plugin is run after conversion on the final file produced by "
"the conversion output plugin."
msgstr "Если True, этот плагин запускается после конвертации в финальный файл, созданный плагином вывода конвертации."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should perform "
"whatever modifications are required on the e-book and return the absolute "
"path to the modified e-book. If no modifications are needed, it should "
"return the path to the original e-book. If an error is encountered it should"
" raise an Exception. The default implementation simply return the path to "
"the original e-book. Note that the path to the original file (before any "
"file type plugins are run, is available as self.original_path_to_file)."
msgstr "Запустить плагин. Должен быть реализован в подклассах. Он должен выполнить все необходимые изменения в электронной книге и вернуть абсолютный путь к измененной электронной книге. Если никаких изменений не требуется, он должен вернуть путь к исходной электронной книге. Если обнаружена ошибка, должно возникнуть исключение. Реализация по умолчанию просто возвращает путь к исходной электронной книге. Обратите внимание, что путь к исходному файлу (до запуска плагинов любого типа файла доступен как self.original_path_to_file)."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:11
msgid ""
"The modified e-book file should be created with the :meth:`temporary_file` "
"method."
msgstr "Изменённый файл электронной книги должен быть создан с помощью метода :meth:`temporary_file`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:14
msgid "Absolute path to the e-book."
msgstr "Абсолютный путь к электронной книге."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:16
msgid "Absolute path to the modified e-book."
msgstr "Абсолютный путь к изменённой электронной книге."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:1
msgid ""
"Called post import, i.e., after the book file has been added to the "
"database. Note that this is different from :meth:`postadd` which is called "
"when the book record is created for the first time. This method is called "
"whenever a new file is added to a book record. It is useful for modifying "
"the book record based on the contents of the newly added file."
msgstr "Вызывается пост-импортом, т.е. после того, как файл книги был добавлен в базу данных. Обратите внимание, что это отличается от :meth:`postadd`, который вызывается при первом создании записи книги. Этот метод вызывается всякий раз, когда новый файл добавляется к записи книги. Полезно для изменения записи книги на основе содержимого вновь добавленного файла."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:8
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:6
msgid "Database id of the added book."
msgstr "Идентификатор базы данных добавленной книги."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:7
msgid "The file type of the book that was added."
msgstr "Тип файла добавленной книги."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:8
msgid "Library database."
msgstr "Библиотека базы данных."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:1
msgid ""
"Called post add, i.e. after a book has been added to the db. Note that this "
"is different from :meth:`postimport`, which is called after a single book "
"file has been added to a book. postadd() is called only when an entire book "
"record with possibly more than one book file has been created for the first "
"time. This is useful if you wish to modify the book record in the database "
"when the book is first added to calibre."
msgstr "Вызывается post add, т.е. после того, как книга была добавлена ​​в БД. Обратите внимание, что это отличается от :meth:`postimport`, который вызывается после того, как в книгу был добавлен отдельный файл книги. postadd() вызывается только тогда, когда вся запись книги, возможно, с более чем одним файлом книги, была создана впервые. Это полезно, если вы хотите изменить запись книги в базе данных при первом добавлении книги в calibre"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:9
msgid ""
"Map of file format to path from which the file format was added. Note that "
"this might or might not point to an actual existing file, as sometimes files"
" are added as streams. In which case it might be a dummy value or a non-"
"existent path."
msgstr "Сопоставление формата файла с путем, из которого был добавлен формат файла. Обратите внимание, что это может указывать, а может и не указывать на существующий файл, поскольку иногда файлы добавляются в виде потоков. В этом случае это может быть фиктивное значение или несуществующий путь."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:13
msgid "Library database"
msgstr "База данных библиотеки"

#: ../../__w/calibre/calibre/manual/plugins.rst:39
msgid "Metadata plugins"
msgstr "Плагины метаданных"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin:1
msgid "A plugin that implements reading metadata from a set of file types."
msgstr "Плагин, реализующий чтение метаданных из набора типов файлов."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run. For example: "
"``set(['lit', 'mobi', 'prc'])``"
msgstr "Набор типов файлов, для которых следует запускать этот плагин. Например: ``set(['lit', 'mobi', 'prc'])``"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:1
msgid ""
"Return metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data."
msgstr "Возвращает метаданные для файла, представленного потоком (объект, подобный файлу, который поддерживает чтение). Вызывает исключение при ошибке во входных данных."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:5
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:5
msgid ""
"The type of file. Guaranteed to be one of the entries in :attr:`file_types`."
msgstr "Тип файла. Гарантированно будет одной из записей в :attr:`file_types`."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:7
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:7
msgid "A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr "Объект :class:`calibre.ebooks.metadata.book.Metadata`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:1
msgid ""
"Set metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data."
msgstr "Установить метаданные для файла, представленного потоком (объект, подобный файлу, который поддерживает чтение). Вызвать исключение при ошибке во входных данных."

#: ../../__w/calibre/calibre/manual/plugins.rst:54
msgid "Catalog plugins"
msgstr "Плагины каталогизации"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin:1
msgid "A plugin that implements a catalog generator."
msgstr "Плагин, реализующий генератор каталогов."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.file_types:1
msgid ""
"Output file type for which this plugin should be run. For example: 'epub' or"
" 'xml'"
msgstr "Тип выходного файла, для которого следует запустить этот плагин. Например: 'epub' или 'xml'."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.cli_options:1
msgid ""
"CLI parser options specific to this plugin, declared as `namedtuple` "
"`Option`:"
msgstr "Параметры CLI парсера, специфичные для этого плагина, объявленные как `namedtuple` `Option`:"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.cli_options:3
msgid ""
"from collections import namedtuple Option = namedtuple('Option', 'option, "
"default, dest, help') cli_options = [Option('--catalog-title', default = 'My"
" Catalog', dest = 'catalog_title', help = (_('Title of generated catalog. "
"\\nDefault:') + \" '\" + '%default' + \"'\"))] cli_options parsed in "
"calibre.db.cli.cmd_catalog:option_parser()"
msgstr "из коллекций импортировать namedtuple Option = namedtuple('Option', 'option, default, dest, help') cli_options = [Option('--catalog-title', default = 'My Catalog', dest = 'catalog_title', help = (_('Title of generated catalog. \\nDefault:') + \" '\" + '%default' + \"'\"))] cli_options parsed в calibre.db.cli.cmd_catalog:option_parser()"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.initialize:1
msgid ""
"If plugin is not a built-in, copy the plugin's .ui and .py files from the "
"ZIP file to $TMPDIR. Tab will be dynamically generated and added to the "
"Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr "Если подключаемый модуль не является встроенным, скопируйте файлы .ui и .py подключаемого модуля из ZIP-файла в $TMPDIR. Вкладка будет динамически сгенерирована и добавлена ​​в диалог Параметры каталога в calibre.gui2.dialogs.catalog.py:Catalog."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should generate the "
"catalog in the format specified in file_types, returning the absolute path "
"to the generated catalog file. If an error is encountered it should raise an"
" Exception."
msgstr "Запустить плагин. Должно быть реализовано в подклассах. Он должен сгенерировать каталог в формате, указанном в file_types, и вернуть абсолютный путь к сгенерированному файлу каталога. Если обнаружена ошибка, должно возникнуть исключение."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:7
msgid ""
"The generated catalog file should be created with the :meth:`temporary_file`"
" method."
msgstr "Сгенерированный файл каталога должен быть создан с помощью метода :meth:`temporary_file`."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:10
msgid "Absolute path to the generated catalog file."
msgstr "Абсолютный путь к сгенерированному файлу каталога."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:11
msgid "A dictionary of keyword arguments"
msgstr "Словарь аргументов ключевых слов"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:12
msgid "A LibraryDatabase2 object"
msgstr "Объект LibraryDatabase2"

#: ../../__w/calibre/calibre/manual/plugins.rst:64
msgid "Metadata download plugins"
msgstr "Плагины загрузки метаданных"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.capabilities:1
msgid ""
"Set of capabilities supported by this plugin. Useful capabilities are: "
"'identify', 'cover'"
msgstr "Набор возможностей, поддерживаемых этим плагином. Полезные возможности: 'identify', 'cover'"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.touched_fields:1
msgid ""
"List of metadata fields that can potentially be download by this plugin "
"during the identify phase"
msgstr "Список полей метаданных, которые потенциально могут быть загружены этим плагином на этапе идентификации"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr "Установите значение True, если ваш плагин возвращает комментарии в формате HTML."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
msgid ""
"Setting this to True means that the browser object will indicate that it "
"supports gzip transfer encoding. This can speedup downloads but make sure "
"that the source actually supports gzip transfer encoding correctly first"
msgstr "Установка этого значения в True означает, что объект браузера укажет, что он поддерживает кодировку передачи gzip. Это может ускорить загрузку, но сначала убедитесь, что источник действительно поддерживает кодировку передачи gzip."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.ignore_ssl_errors:1
msgid ""
"Set this to True to ignore HTTPS certificate errors when connecting to this "
"source."
msgstr "Установите значение True, чтобы игнорировать ошибки сертификата HTTPS при подключении к этому источнику."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
msgid ""
"Cached cover URLs can sometimes be unreliable (i.e. the download could fail "
"or the returned image could be bogus). If that is often the case with this "
"source, set to False"
msgstr "Кешированные URL-адреса обложек иногда могут быть ненадежными (т.е. загрузка может завершиться сбоем или возвращенное изображение может быть поддельным. Если такое часто случается с этим источником, установите значение False"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.options:1
msgid ""
"A list of :class:`Option` objects. They will be used to automatically "
"construct the configuration widget for this plugin"
msgstr "Список объектов :class:`Option`. Они будут использоваться для автоматического создания виджета конфигурации для этого плагина."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.config_help_message:1
msgid ""
"A string that is displayed at the top of the config widget for this plugin"
msgstr "Строка, которая отображается в верхней части виджета конфигурации для этого плагина."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
msgid "If True this source can return multiple covers for a given query"
msgstr "Если True, этот источник может вернуть несколько обложек для данного запроса."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
msgid ""
"If set to True covers downloaded by this plugin are automatically trimmed."
msgstr "Если установлено значение True, обложки, загруженные этим плагином, автоматически обрезаются."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.prefer_results_with_isbn:1
msgid ""
"If set to True, and this source returns multiple results for a query, some "
"of which have ISBNs and some of which do not, the results without ISBNs will"
" be ignored"
msgstr "Если установлено значение True, и этот источник возвращает несколько результатов для запроса, с ISBN и без, результаты без ISBN будут проигнорированы."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.is_configured:1
msgid ""
"Return False if your plugin needs to be configured before it can be used. "
"For example, it might need a username/password/API key."
msgstr "Верните False, если ваш плагин нужно настроить, прежде чем его можно будет использовать. Например, может потребоваться имя пользователя/пароль/ключ API."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
msgid ""
"Take a list of authors and return a list of tokens useful for an AND search "
"query. This function tries to return tokens in first name middle names last "
"name order, by assuming that if a comma is in the author name, the name is "
"in lastname, other names form."
msgstr "Взять список авторов и вернуть список токенов, полезных для поискового запроса AND. Эта функция пытается вернуть токены в порядке имени, отчества, фамилии, предполагая, что если в имени автора стоит запятая, имя находится в фамилии, в другой форме."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
msgid ""
"Take a title and return a list of tokens useful for an AND search query. "
"Excludes connectives(optionally) and punctuation."
msgstr "Взять заголовок и веруть список токенов, полезных для поискового запроса AND. Исключает связки (необязательно) и знаки препинания."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr "Разделить список заданий на максимальное количество групп, как можно равномернее."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.test_fields:1
msgid ""
"Return the first field from self.touched_fields that is null on the mi "
"object"
msgstr "Вернуть первое поле из self.touched_fields, которое имеет значение null для объекта mi"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
msgid ""
"Call this method in your plugin's identify method to normalize metadata "
"before putting the Metadata object into result_queue. You can of course, use"
" a custom algorithm suited to your metadata source."
msgstr "Вызовите этот метод в методе идентификации вашего плагина, чтобы нормализовать метаданные перед помещением объекта Metadata в result_queue. Можно использовать собственный алгоритм, подходящий для вашего источника метаданных."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
msgid ""
"Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, "
"identifier_value, URL). The URL is the URL for the book identified by "
"identifiers at this source. identifier_type, identifier_value specify the "
"identifier corresponding to the URL. This URL must be browsable to by a "
"human using a browser. It is meant to provide a clickable link for the user "
"to easily visit the books page at this source. If no URL is found, return "
"None. This method must be quick, and consistent, so only implement it if it "
"is possible to construct the URL from a known scheme given identifiers."
msgstr "Вернуть 3-кортеж или None. Кортеж из трёх элементов имеет форму: (identifier_type, identifier_value, URL). URL-адрес - это URL-адрес книги, идентифицированный идентификаторами в этом источнике. identifier_type, identifier_value указывают идентификатор, соответствующий URL-адресу. Этот URL-адрес должен быть доступен для просмотра человеком, использующим браузер. Он предназначен для предоставления пользователю интерактивной ссылки, чтобы пользователь мог легко перейти на страницу с книгами в этом источнике. Если URL-адрес не найден, вернуть None. Этот метод должен быть быстрым и последовательным, поэтому используйте его только в том случае, если возможно построить URL-адрес из известной схемы с заданными идентификаторами."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
msgid "Return a human readable name from the return value of get_book_url()."
msgstr "Вернуть человекочитаемое имя из возвращаемого значения get_book_url ()."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_urls:1
msgid ""
"Override this method if you would like to return multiple urls for this "
"book. Return a list of 3-tuples. By default this method simply calls "
":func:`get_book_url`."
msgstr "Переопределите этот метод, если вы хотите вернуть несколько URL-адресов для этой книги. Вернуть список 3-tuples (кортеж из трех элементов). По умолчанию этот метод просто вызывает :func:`get_book_url`."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
msgid ""
"Return cached cover URL for the book identified by the identifiers dict or "
"None if no such URL exists."
msgstr "Вернуть кешированный URL-адрес обложки для книги, идентифицированной идентификаторами dict или None, если такой URL-адрес не существует."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
msgid ""
"Note that this method must only return validated URLs, i.e. not URLS that "
"could result in a generic cover image or a not found error."
msgstr "Обратите внимание, что этот метод должен возвращать только проверенные URL-адреса, то есть не те URL-адреса, которые могут привести к общему изображению обложки или ошибке «Не найдено»."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.id_from_url:1
msgid ""
"Parse a URL and return a tuple of the form: (identifier_type, "
"identifier_value). If the URL does not match the pattern for the metadata "
"source, return None."
msgstr "Проанализировать URL-адрес и вернуть кортеж в форме: (identifier_type, identifier_value). Если URL-адрес не соответствует шаблону для источника метаданных, вернуть None."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
msgid ""
"Return a function that is used to generate a key that can sort Metadata "
"objects by their relevance given a search query (title, authors, "
"identifiers)."
msgstr "Вернуть функцию, которая используется для генерации ключа, который может сортировать объекты метаданных по их релевантности с учетом поискового запроса (заголовок, авторы, идентификаторы)."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr "Эти ключи используются для сортировки результатов вызова :meth:`identify`."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
msgid ""
"For details on the default algorithm see "
":class:`InternalMetadataCompareKeyGen`. Re-implement this function in your "
"plugin if the default algorithm is not suitable."
msgstr "Подробнее об алгоритме по умолчанию см. :class:`InternalMetadataCompareKeyGen`. Повторно реализуйте эту функцию в своем плагине, если алгоритм по умолчанию не подходит."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:1
msgid "Identify a book by its Title/Author/ISBN/etc."
msgstr "Определить книгу по её названию/автору/ISBN/и т.д."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:3
msgid ""
"If identifiers(s) are specified and no match is found and this metadata "
"source does not store all related identifiers (for example, all ISBNs of a "
"book), this method should retry with just the title and author (assuming "
"they were specified)."
msgstr "Если идентификаторы указаны и совпадений не найдено, и этот источник метаданных не хранит все связанные идентификаторы (например, все ISBN книги), этот метод должен повторить попытку, указав только заголовок и автора (при условии, что они были указаны)."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:8
msgid ""
"If this metadata source also provides covers, the URL to the cover should be"
" cached so that a subsequent call to the get covers API with the same "
"ISBN/special identifier does not need to get the cover URL again. Use the "
"caching API for this."
msgstr "Если этот источник метаданных также предоставляет обложки, URL-адрес обложки должен быть кэширован, чтобы при последующем вызове API получения обложек с тем же ISBN/специальным идентификатором не нужно было снова получать URL-адрес обложки. Используйте для этого API кеширования."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:13
msgid ""
"Every Metadata object put into result_queue by this method must have a "
"`source_relevance` attribute that is an integer indicating the order in "
"which the results were returned by the metadata source for this query. This "
"integer will be used by :meth:`compare_identify_results`. If the order is "
"unimportant, set it to zero for every result."
msgstr "Каждый объект Metadata, помещенный в result_queue этим методом, должен иметь атрибут source_relevance, который является целым числом, указывающим порядок, в котором результаты были возвращены источником метаданных для этого запроса. Это целое число будет использоваться :meth:`compare_identify_results`. Если порядок не важен, установите его в 0 (ноль) для каждого результата."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:19
msgid ""
"Make sure that any cover/ISBN mapping information is cached before the "
"Metadata object is put into result_queue."
msgstr "Прежде чем объект Metadata будет помещен в result_queue, убедитесь, что вся информация сопоставления обложки/ISBN закэширована."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:22
msgid "A log object, use it to output debugging information/errors"
msgstr "Объект журнала, используйте его для вывода отладочной информации/ошибок"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:23
msgid ""
"A result Queue, results should be put into it. Each result is a Metadata "
"object"
msgstr "Очередь результатов, результаты должны быть помещены в неё. Каждый результат - это объект метаданных."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:25
msgid ""
"If abort.is_set() returns True, abort further processing and return as soon "
"as possible"
msgstr "Если abort.is_set() возвращает True, прервать дальнейшую обработку и вернутся как можно скорее."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:27
msgid "The title of the book, can be None"
msgstr "Название книги может быть None"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:28
msgid "A list of authors of the book, can be None"
msgstr "Список авторов книги может быть None"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:29
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr "Словарь других идентификаторов, чаще всего {'isbn': '1234 ...'}"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:31
msgid ""
"Timeout in seconds, no network request should hang for longer than timeout."
msgstr "Тайм-аут в секундах, ни один сетевой запрос не должен зависать дольше таймаута."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:33
msgid ""
"None if no errors occurred, otherwise a unicode representation of the error "
"suitable for showing to the user"
msgstr "None, если ошибок не было, иначе - представление ошибки в Юникоде, подходящее для показа пользователю."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:1
msgid ""
"Download a cover and put it into result_queue. The parameters all have the "
"same meaning as for :meth:`identify`. Put (self, cover_data) into "
"result_queue."
msgstr "Скачать обложку и поместить её в result_queue. Все параметры имеют то же значение, что и для :meth:`identify`. Поместить (self, cover_data) в result_queue."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:5
msgid ""
"This method should use cached cover URLs for efficiency whenever possible. "
"When cached data is not present, most plugins simply call identify and use "
"its results."
msgstr "Этот метод должен использовать кешированные URL-адреса обложек для повышения эффективности, при возможности. Когда кэшированных данных нет, большинство плагинов просто вызывают идентификацию и используют её результаты."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:9
msgid ""
"If the parameter get_best_cover is True and this plugin can get multiple "
"covers, it should only get the \"best\" one."
msgstr "Если параметр get_best_cover имеет значение True и этот плагин может получить несколько обложек, он должен получить только «лучшую»."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
msgid ""
"Generate a sort key for comparison of the relevance of Metadata objects, "
"given a search query. This is used only to compare results from the same "
"metadata source, not across different sources."
msgstr "Сгенерировать ключ сортировки для сравнения релевантности объектов метаданных с учётом поискового запроса. Используется только для сравнения результатов из одного источника метаданных, но не из разных источников."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
msgid ""
"The sort key ensures that an ascending order sort is a sort by order of "
"decreasing relevance."
msgstr "Ключ сортировки гарантирует, что сортировка в порядке возрастания является сортировкой по убыванию релевантности."

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
msgid "The algorithm is:"
msgstr "Алгоритм такой:"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
msgid ""
"Prefer results that have at least one identifier the same as for the query"
msgstr "Предпочитать результаты, у которых есть хотя бы один идентификатор, такой же как у запроса"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
msgid "Prefer results with a cached cover URL"
msgstr "Предпочитать результаты с кешированным URL обложки"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
msgid "Prefer results with all available fields filled in"
msgstr "Предпочитать результаты со всеми заполненными полями"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
msgid ""
"Prefer results with the same language as the current user interface language"
msgstr "Предпочитать результаты на том же языке, что и текущий язык пользовательского интерфейса"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
msgid "Prefer results that are an exact title match to the query"
msgstr "Предпочитать результаты, которые точно соответствуют названию запроса"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr "Предпочитать результаты с более длинными комментариями, более чем на 10% длиннее"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
msgid ""
"Use the relevance of the result as reported by the metadata source's search"
msgstr "Используйте релевантность результата, полученную в результате поиска источника метаданных"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:17
msgid "engine"
msgstr "движок"

#: ../../__w/calibre/calibre/manual/plugins.rst:76
msgid "Conversion plugins"
msgstr "Плагины преобразования"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin:1
msgid ""
"InputFormatPlugins are responsible for converting a document into "
"HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. "
"The main action happens in :meth:`convert`."
msgstr "InputFormatPlugins отвечают за преобразование документа в HTML + OPF + CSS + и т. д. Результаты преобразования *должны* быть закодированы в UTF-8. Основное действие происходит в :meth:`convert`."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run For example: "
"``set(['azw', 'mobi', 'prc'])``"
msgstr "Набор типов файлов, для которых следует запускать этот плагин. Например: ``set (['azw', 'mobi', 'prc'])``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
msgid ""
"If True, this input plugin generates a collection of images, one per HTML "
"file. This can be set dynamically, in the convert method if the input files "
"can be both image collections and non-image collections. If you set this to "
"True, you must implement the get_images() method that returns a list of "
"images."
msgstr "Если True, этот плагин ввода генерирует коллекцию изображений, по одному на файл HTML. Устанавливается динамически в методе convert, если входные файлы могут быть как коллекциями изображений, так и коллекциями без изображений. Если вы установите для него значение True, то реализуйте метод get_images(), который возвращает список изображений."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.core_usage:1
msgid ""
"Number of CPU cores used by this plugin. A value of -1 means that it uses "
"all available cores"
msgstr "Количество ядер процессора, используемых этим плагином. Значение -1 означает, что он использует все доступные ядра."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.for_viewer:1
msgid ""
"If set to True, the input plugin will perform special processing to make its"
" output suitable for viewing"
msgstr "Если установлено значение True, плагин ввода будет выполнять специальную обработку, чтобы сделать его вывод подходящим для просмотра."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.output_encoding:1
msgid ""
"The encoding that this input plugin creates files in. A value of None means "
"that the encoding is undefined and must be detected individually"
msgstr "Кодировка, в которой этот модуль ввода создает файлы. Значение None означает, что кодировка не определена и должна определяться индивидуально."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.common_options:1
msgid ""
"Options shared by all Input format plugins. Do not override in sub-classes. "
"Use :attr:`options` instead. Every option must be an instance of "
":class:`OptionRecommendation`."
msgstr "Параметры, общие для всех плагинов формата ввода. Не переопределять в подклассах. Вместо этого используйте :attr:`options`. Каждая опция должна быть экземпляром :class:`OptionRecommendation`."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.options:1
msgid ""
"Options to customize the behavior of this plugin. Every option must be an "
"instance of :class:`OptionRecommendation`."
msgstr "Параметры для настройки поведения этого плагина. Каждая опция должна быть экземпляром :class:`OptionRecommendation`."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.recommendations:1
msgid ""
"A set of 3-tuples of the form (option_name, recommended_value, "
"recommendation_level)"
msgstr "Набор из 3-tuples (трех кортежей) формы (option_name, recommended_value, recommendation_level)"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.get_images:1
msgid ""
"Return a list of absolute paths to the images, if this input plugin "
"represents an image collection. The list of images is in the same order as "
"the spine and the TOC."
msgstr "Вернуть список абсолютных путей к изображениям, если этот входной плагин представляет коллекцию изображений. Список изображений находится в том же порядке, что и корешок и оглавление."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:1
msgid ""
"This method must be implemented in sub-classes. It must return the path to "
"the created OPF file or an :class:`OEBBook` instance. All output should be "
"contained in the current folder. If this plugin creates files outside the "
"current folder they must be deleted/marked for deletion before this method "
"returns."
msgstr "Этот метод должен быть реализован в подклассах. Он должен возвращать путь к созданному файлу OPF или экземпляру :class:`OEBBook`. Весь вывод должен содержаться в текущей папке. Если этот плагин создает файлы вне текущей папки, их необходимо удалить/пометить для удаления, прежде чем этот метод вернёт значение."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:8
msgid "A file like object that contains the input file."
msgstr "Файловый объект, содержащий входной файл."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:9
msgid ""
"Options to customize the conversion process. Guaranteed to have attributes "
"corresponding to all the options declared by this plugin. In addition, it "
"will have a verbose attribute that takes integral values from zero upwards. "
"Higher numbers mean be more verbose. Another useful attribute is "
"``input_profile`` that is an instance of "
":class:`calibre.customize.profiles.InputProfile`."
msgstr "Параметры для настройки процесса конвертации. Гарантированно наличие атрибутов, соответствующих всем параметрам, заявленным этим плагином. Кроме того, будет подробный атрибут, принимающий целые значения от нуля и выше. Большие числа означают более подробную информацию. Ещё один полезный атрибут - input_profile, который является экземпляром :class:calibre.customize.profiles.InputProfile."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:17
msgid ""
"The extension (without the .) of the input file. It is guaranteed to be one "
"of the `file_types` supported by this plugin."
msgstr "Расширение (без .) входного файла. Гарантируется, что это будет один из `file_types`, поддерживаемых этим плагином."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:20
msgid ""
"A :class:`calibre.utils.logging.Log` object. All output should use this "
"object."
msgstr "Объект :class:`calibre.utils.logging.Log`. Весь вывод должен использовать этот объект."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:22
msgid ""
"A dictionary of various information that the input plugin can get easily "
"that would speed up the subsequent stages of the conversion."
msgstr "Словарь различной информации, которую плагин ввода может легко получить, что ускорит последующие этапы преобразования."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
msgid ""
"Called to allow the input plugin to perform postprocessing after the book "
"has been parsed."
msgstr "Вызывается, чтобы разрешить плагину ввода выполнять постобработку после анализа книги."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.specialize:1
msgid ""
"Called to allow the input plugin to specialize the parsed book for a "
"particular output format. Called after postprocess_book and before any "
"transforms are performed on the parsed book."
msgstr "Вызывается, чтобы позволить плагину ввода специализировать анализируемую книгу для определенного формата вывода. Вызывается после postprocess_book и перед выполнением любых преобразований в проанализированной книге."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builtin input plugins for examples."
msgstr "Вызывается для создания виджета, используемого для настройки этого плагина в графическом интерфейсе calibre. Виджет должен быть экземпляром класса PluginWidget. См. примеры встроенных модулей ввода."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:1
msgid ""
"OutputFormatPlugins are responsible for converting an OEB document "
"(OPF+HTML) into an output e-book."
msgstr "OutputFormatPlugins отвечают за преобразование документа OEB (OPF + HTML) в выходную электронную книгу."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:4
msgid ""
"The OEB document can be assumed to be encoded in UTF-8. The main action "
"happens in :meth:`convert`."
msgstr "Предполагается, что документ OEB закодирован в UTF-8. Основное действие происходит в :meth:`convert`."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.file_type:1
msgid ""
"The file type (extension without leading period) that this plugin outputs"
msgstr "Тип файла (расширение без начальной точки), который выводит этот плагин."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.description:1
msgid ""
"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str"
msgstr "str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.description:4
msgid ""
"Create a new string object from the given object. If encoding or errors is "
"specified, then the object must expose a data buffer that will be decoded "
"using the given encoding and error handler. Otherwise, returns the result of"
" object.__str__() (if defined) or repr(object). encoding defaults to "
"sys.getdefaultencoding(). errors defaults to 'strict'."
msgstr "Создайте новый строковый объект из данного объекта. Если указаны кодировка или ошибки, то объект должен предоставить буфер данных, который будет декодирован с использованием данной кодировки и обработчика ошибок. В противном случае возвращает результат object.__str__() (если определено) или repr(object). кодировка по умолчанию sys.getdefaultencoding(). по умолчанию используется 'strict'."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:1
msgid ""
"Render the contents of `oeb_book` (which is an instance of "
":class:`calibre.ebooks.oeb.OEBBook`) to the file specified by output."
msgstr "Отрендерить содержимое `oeb_book` (который является экземпляром :class:`calibre.ebooks.oeb.OEBBook`) в файл, указанный в output."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:4
msgid ""
"Either a file like object or a string. If it is a string it is the path to a"
" folder that may or may not exist. The output plugin should write its output"
" into that folder. If it is a file like object, the output plugin should "
"write its output into the file."
msgstr "Либо файл, подобный объекту, либо строка. Если это строка, это путь к папке, которая может существовать, а может и не существовать. Плагин вывода должен записывать свой вывод в эту папку. Если это объект, подобный файлу, плагин вывода должен записывать свой вывод в файл."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:8
msgid ""
"The input plugin that was used at the beginning of the conversion pipeline."
msgstr "Плагин ввода, который использовался в начале конвейера конвертации."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:10
msgid ""
"Conversion options. Guaranteed to have attributes corresponding to the "
"OptionRecommendations of this plugin."
msgstr "Опции конвертации. Гарантировано наличие атрибутов, соответствующих рекомендациям OptionRecommendations этого плагина."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:12
msgid "The logger. Print debug/info messages etc. using this."
msgstr "Логгер. Печатать отладочные/информационные сообщения и т. д."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_options:1
msgid ""
"Can be used to change the values of conversion options, as used by the "
"conversion pipeline."
msgstr "Может использоваться для изменения значений параметров конвертации, используемых конвейером конвертации."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
msgid ""
"Can be used to make changes to the css during the CSS flattening process."
msgstr "Может использоваться для внесения изменений в CSS во время уплощения CSS."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
msgid "The item (HTML file) being processed"
msgstr "HTML-файл элемента, который обрабатывается"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
msgid ""
"A Stylizer object containing the flattened styles for item. You can get the "
"style for any element by stylizer.style(element)."
msgstr "Объект Stylizer, содержащий уплощённые стили для элемента. Вы можете получить стиль для любого элемента с помощью stylizer.style(element)."

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builtin output plugins for examples."
msgstr "Вызывается для создания виджета, используемого для настройки этого плагина в графическом интерфейсе calibre. Виджет должен быть экземпляром класса PluginWidget. См. примеры встроенных модулей ввода."

#: ../../__w/calibre/calibre/manual/plugins.rst:91
msgid "Device drivers"
msgstr "Драйверы устройств"

#: ../../__w/calibre/calibre/manual/plugins.rst:95
msgid ""
"The base class for all device drivers is :class:`DevicePlugin`. However, if "
"your device exposes itself as a USBMS drive to the operating system, you "
"should use the USBMS class instead as it implements all the logic needed to "
"support these kinds of devices."
msgstr "Базовый класс для всех драйверов устройств :class:`DevicePlugin`. Однако, если ваше устройство представляет себя для операционной системы как USBMS-накопитель, следует использовать вместо него класс USBMS, поскольку он реализует всю логику, необходимую для поддержки таких типов устройств."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin:1
msgid ""
"Defines the interface that should be implemented by backends that "
"communicate with an e-book reader."
msgstr "Определяет интерфейс, который должен быть реализован серверными модулями, которые взаимодействуют с устройством для чтения электронных книг."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.FORMATS:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.FORMATS:1
msgid "Ordered list of supported formats"
msgstr "Упорядоченный список поддерживаемых форматов"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.VENDOR_ID:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.VENDOR_ID:1
msgid ""
"VENDOR_ID can be either an integer, a list of integers or a dictionary If it"
" is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr "VENDOR_ID может быть целым числом, списком целых чисел или словарем. Если это словарь, то это должен быть словарь словарей в форме::"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.PRODUCT_ID:1
msgid "An integer or a list of integers"
msgstr "Целое число или список целых чисел"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.BCD:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.BCD:1
msgid ""
"BCD can be either None to not distinguish between devices based on BCD, or "
"it can be a list of the BCD numbers of all devices supported by this driver."
msgstr "BCD может иметь значение None, чтобы не различать устройства на основе BCD, или это может быть список BCD номеров всех устройств, поддерживаемых этим драйвером."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
msgid "Height for thumbnails on the device"
msgstr "Высота миниатюр на устройстве"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
msgid ""
"Compression quality for thumbnails. Set this closer to 100 to have better "
"quality thumbnails with fewer compression artifacts. Of course, the "
"thumbnails get larger as well."
msgstr "Качество сжатия миниатюр. Значение ближе к 100 - миниатюры лучшего качества с минимумом артефактов сжатия. Размер файлов миниатюр увеличивается."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
msgid ""
"Set this to True if the device supports updating cover thumbnails during "
"sync_booklists. Setting it to true will ask device.py to refresh the cover "
"thumbnails during book matching"
msgstr "Значение параметра True, если устройство поддерживает обновление миниатюр обложек во время sync_booklists. При значении True у device.py запрашивается обновление миниатюр обложек при сопоставлении книг."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.CAN_SET_METADATA:1
msgid "Whether the metadata on books can be set via the GUI."
msgstr "Можно ли установить метаданные книг через графический интерфейс."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
msgid "Whether the device can handle device_db metadata plugboards"
msgstr "Может ли устройство обрабатывать коммутации метаданных device_db"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.path_sep:1
msgid "Path separator for paths to books on device"
msgstr "Разделитель путей для путей к книгам на устройстве"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.icon:1
msgid "Icon for this device"
msgstr "Значок для этого устройства"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
msgid ""
"GUI displays this as a message if not None in the status bar. Useful if "
"opening can take a long time"
msgstr "В графическом интерфейсе это отображается как сообщение, если в строке статуса не None. Полезно, если открытие может занять много времени"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
msgid ""
"Set of extensions that are \"virtual books\" on the device and therefore "
"cannot be viewed/saved/added to library. For example: "
"``frozenset(['kobo'])``"
msgstr "Набор расширений, которые являются «виртуальными книгами» на устройстве и поэтому не могут быть просмотрены/сохранены/добавлены в библиотеку. Например: ``frozenset(['kobo'])``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSION_MESSAGE:1
msgid "Message to display to user for virtual book extensions."
msgstr "Сообщение, отображаемое пользователю для расширений виртуальных книг."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
msgid ""
"Whether to nuke comments in the copy of the book sent to the device. If not "
"None this should be short string that the comments will be replaced by."
msgstr "Удалять ли комментарии в копии книги, отправленной на устройство. Если не None, это должна быть короткая строка, которой будут заменены комментарии."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
msgid ""
"If True indicates that  this driver completely manages device detection, "
"ejecting and so forth. If you set this to True, you *must* implement the "
"detect_managed_devices and debug_managed_device_detection methods. A driver "
"with this set to true is responsible for detection of devices, managing a "
"blacklist of devices, a list of ejected devices and so forth. calibre will "
"periodically call the detect_managed_devices() method and if it returns a "
"detected device, calibre will call open(). open() will be called every time "
"a device is returned even if previous calls to open() failed, therefore the "
"driver must maintain its own blacklist of failed devices. Similarly, when "
"ejecting, calibre will call eject() and then assuming the next call to "
"detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr "Если True указывает, что этот драйвер полностью управляет обнаружением устройства, извлечением и т. д. При установке для него значение True, вы *должны* реализовать методы detect_managed_devices и debug_managed_device_detection. Драйвер, для которого установлено значение True, отвечает за обнаружение устройств, управление черным списком устройств, списком извлеченных устройств и т. д. calibre будет периодически вызывать метод detect_managed_devices(), и если он возвращает обнаруженное устройство, calibre вызовет open(). open() будет вызываться каждый раз, когда устройство возвращается, даже если предыдущие вызовы open() завершились неудачно, поэтому драйвер должен поддерживать свой собственный черный список отказавших устройств. Точно так же при извлечении calibre вызовет eject(), а затем, предполагая, что следующий вызов detect_managed_devices() вернет None, вызовет post_yank_cleanup()."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
msgid ""
"If set the True, calibre will call the :meth:`get_driveinfo()` method after "
"the books lists have been loaded to get the driveinfo."
msgstr "Если установлено True, calibre вызовет метод :meth:`get_driveinfo()` после загрузки списков книг для получения информации о диске."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
msgid ""
"If set to True, calibre will ask the user if they want to manage the device "
"with calibre, the first time it is detected. If you set this to True you "
"must implement :meth:`get_device_uid()` and "
":meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` "
"and :meth:`set_user_blacklisted_devices`"
msgstr "Если установлено значение True, при первом обнаружении устройства calibre спросит пользователя, хочет ли он управлять устройством с помощью calibre. Если установить параметру значение True, то вы должны реализовать :meth:`get_device_uid()` и :meth:`ignore_connected_device()` и :meth:`get_user_blacklisted_devices` и :meth:`set_user_blacklisted_devices`"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
msgid ""
"Set this to a dictionary of the form {'title':title, 'msg':msg, "
"'det_msg':detailed_msg} to have calibre popup a message to the user after "
"some callbacks are run (currently only upload_books). Be careful to not spam"
" the user with too many messages. This variable is checked after *every* "
"callback, so only set it when you really need to."
msgstr "Установите значение как словарь формы {'title': title, 'msg': msg, 'det_msg': detail_msg}, чтобы calibre отображал всплывающее сообщение для пользователя после выполнения некоторых обратных вызовов (в настоящее время только upload_books). Не спамьте пользователя потоком сообщений. Эта переменная проверяется после *каждого* обратного вызова, поэтому устанавливайте её только при необходимости."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_open_popup_message:1
msgid ""
"GUI displays this as a non-modal popup. Should be an instance of "
"OpenPopupMessage"
msgstr "GUI отображает это как немодальное всплывающее окно. Должен быть экземпляром OpenPopupMessage"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:1
msgid ""
"Return True, device_info if a device handled by this plugin is currently "
"connected."
msgstr "Вернуть True, device_info, если в данный момент подключено устройство, управляемое этим плагином."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:3
msgid "List of devices currently connected"
msgstr "Список подключенных устройств"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:1
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr "Вызывается, только если у MANAGES_DEVICE_PRESENCE значение True."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:3
msgid ""
"Scan for devices that this driver can handle. Should return a device object "
"if a device is found. This object will be passed to the open() method as the"
" connected_device. If no device is found, return None. The returned object "
"can be anything, calibre does not use it, it is only passed to open()."
msgstr "Просканировать устройства, с которыми может работать этот драйвер. Должен возвращать объект устройства, если устройство найдено. Этот объект будет передан методу open() как connected_device. Если устройство не найдено, вернуть None. Возвращаемый объект может быть любым, calibre его не использует, он передается только в open()."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:9
msgid ""
"This method is called periodically by the GUI, so make sure it is not too "
"resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr "Этот метод периодически вызывается графическим интерфейсом пользователя, поэтому убедитесь, что он не слишком ресурсоемкий. Используйте кеш, чтобы избежать повторного сканирования системы."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:13
msgid "Set of USB devices found on the system."
msgstr "Набор USB-устройств, обнаруженных в системе."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:15
msgid ""
"If True and the driver uses a cache to prevent repeated scanning, the cache "
"must be flushed."
msgstr "Если True и драйвер использует кеш для предотвращения повторного сканирования, то кеш должен быть очищен."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
msgid ""
"Should write information about the devices detected on the system to output,"
" which is a file like object."
msgstr "Должен записывать информацию об устройствах, обнаруженных в системе в вывод, представляющий собой файл, подобный объекту."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
msgid ""
"Should return True if a device was detected and successfully opened, "
"otherwise False."
msgstr "Должен возвращать True, если устройство было обнаружено и успешно открыто, в противном случае - False."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:1
msgid "The key to unlock the device"
msgstr "Ключ для разблокировки устройства"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:2
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:2
msgid "If true the packet stream to/from the device is logged"
msgstr "Если true, поток пакетов к/от устройства логируется."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:3
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.set_progress_reporter:3
msgid ""
"Function that is called with a % progress (number between 0 and 100) for "
"various tasks. If it is called with -1 that means that the task does not "
"have any progress information"
msgstr "Функция, которая вызывается с % прогресса (число от 0 до 100) для различных задач. Если она вызывается с -1, это означает, что задача не имеет информации о ходе выполнения."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:7
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:7
msgid "Device information from the device scanner"
msgstr " Информация об устройстве со сканера устройств"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:1
msgid ""
"Optional method to perform further checks on a device to see if this driver "
"is capable of handling it. If it is not it should return False. This method "
"is only called after the vendor, product ids and the bcd have matched, so it"
" can do some relatively time intensive checks. The default implementation "
"returns True. This method is called only on Windows. See also "
":meth:`can_handle`."
msgstr "Необязательный метод для выполнения дальнейших проверок устройства, чтобы узнать, способен ли этот драйвер обрабатывать его. Если это не так, он должен вернуть False. Этот метод вызывается только после того, как поставщик, идентификаторы продуктов и bcd совпадают, поэтому он может выполнять некоторые относительно трудоемкие проверки. Реализация по умолчанию возвращает True. Этот метод вызывается только в Windows. См. также :meth:`can_handle`."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:8
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:8
msgid ""
"Note that for devices based on USBMS this method by default delegates to "
":meth:`can_handle`.  So you only need to override :meth:`can_handle` in your"
" subclass of USBMS."
msgstr "Для устройств на базе USBMS этот метод по умолчанию делегирует :meth:`can_handle`. Таким образом, вам нужно только переопределить :meth:`can_handle` в подклассе USBMS."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:12
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:12
msgid ""
"A usbdevice as returned by :func:`calibre.devices.winusb.scan_usb_devices`"
msgstr "USB-устройство, возвращенное :func:`calibre.devices.winusb.scan_usb_devices`"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:1
msgid "Unix version of :meth:`can_handle_windows`."
msgstr "Версия для Unix :meth:`can_handle_windows`."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:3
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr "Кортеж из (vid, pid, bcd, производитель, продукт, серийный номер)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:1
msgid ""
"Perform any device specific initialization. Called after the device is "
"detected but before any other functions that communicate with the device. "
"For example: For devices that present themselves as USB Mass storage "
"devices, this method would be responsible for mounting the device or if the "
"device has been automounted, for finding out where it has been mounted. The "
"method :meth:`calibre.devices.usbms.device.Device.open` has an "
"implementation of this function that should serve as a good example for USB "
"Mass storage devices."
msgstr "Выполнить любую инициализацию конкретного устройства. Вызывается после обнаружения устройства, но перед любыми другими функциями, которые обмениваются данными с устройством. Например: для устройств, которые представляют себя как запоминающие устройства USB, этот метод будет отвечать за установку устройства или, если устройство было автоматически смонтировано, за определение места его установки. Метод :meth:`calibre.devices.usbms.device.Device.open` имеет реализацию этой функции, которая должна служить хорошим примером для запоминающих устройств USB."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:11
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:11
msgid ""
"This method can raise an OpenFeedback exception to display a message to the "
"user."
msgstr "Этот метод может вызвать исключение OpenFeedback для отображения сообщения пользователю."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:14
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:14
msgid ""
"The device that we are trying to open. It is a tuple of (vendor id, product "
"id, bcd, manufacturer name, product name, device serial number). However, "
"some devices have no serial number and on Windows only the first three "
"fields are present, the rest are None."
msgstr "Устройство, которое мы пытаемся открыть. Это кортеж из (идентификатор поставщика, идентификатор продукта, bcd, название производителя, название продукта, серийный номер устройства). Однако у некоторых устройств нет серийного номера, и в Windows присутствуют только первые три поля, остальные - None."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:20
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:20
msgid ""
"The UUID of the current calibre library. Can be None if there is no library "
"(for example when used from the command line)."
msgstr "UUID текущей библиотеки calibre. Может иметь значение None, если библиотеки нет (например, при использовании из командной строки)."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.eject:1
msgid ""
"Un-mount / eject the device from the OS. This does not check if there are "
"pending GUI jobs that need to communicate with the device."
msgstr "Размонтировать/извлечь устройство из ОС. Не проверяется есть ли ожидающие задания графического интерфейса пользователя, которым необходимо взаимодействовать с устройством."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.eject:4
msgid ""
"NOTE: That this method may not be called on the same thread as the rest of "
"the device methods."
msgstr "ПРИМЕЧАНИЕ. Этот метод нельзя вызывать в том же потоке, что и остальные методы устройства."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.post_yank_cleanup:1
msgid "Called if the user yanks the device without ejecting it first."
msgstr "Вызывается, если пользователь дергает устройство, не извлекая его предварительно."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.set_progress_reporter:1
msgid "Set a function to report progress information."
msgstr "Установить функцию для сообщения информации о ходе выполнения."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.get_device_information:1
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr "Спросить у устройства информацию об устройстве. См. L{DeviceInfoQuery}."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.get_device_information:3
msgid ""
"(device name, device version, software version on device, MIME type) The "
"tuple can optionally have a fifth element, which is a drive information "
"dictionary. See usbms.driver for an example."
msgstr "(имя устройства, версия устройства, версия программного обеспечения на устройстве, тип MIME). Кортеж может дополнительно иметь пятый элемент, который является словарем информации о накопителе. См. пример usbms.driver."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_driveinfo:1
msgid ""
"Return the driveinfo dictionary. Usually called from "
"get_device_information(), but if loading the driveinfo is slow for this "
"driver, then it should set SLOW_DRIVEINFO. In this case, this method will be"
" called by calibre after the book lists have been loaded. Note that it is "
"not called on the device thread, so the driver should cache the drive info "
"in the books() method and this function should return the cached data."
msgstr "Вернуть словарь driveinfo. Обычно вызывается из get_device_information(), но если загрузка информации о диске для этого драйвера происходит медленно, то следует установить SLOW_DRIVEINFO. В этом случае этот метод будет вызываться calibre после загрузки списков книг. Обратите внимание, что он не вызывается в потоке устройства, поэтому драйвер должен кэшировать информацию о диске в методе books(), и эта функция должна возвращать кэшированные данные."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.card_prefix:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.card_prefix:1
msgid ""
"Return a 2 element list of the prefix to paths on the cards. If no card is "
"present None is set for the card's prefix. E.G. ('/place', '/place2') (None,"
" 'place2') ('place', None) (None, None)"
msgstr "Возвращает список из 2 элементов префикса для путей на карточках. Если карта отсутствует, для префикса карты устанавливается значение None. НАПРИМЕР ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:4
msgid "Get total space available on the mountpoints:"
msgstr "Получить общее пространство, доступное на точках монтирования:"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:2
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:2
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:2
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:2
msgid "Main memory"
msgstr "Основная память"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:3
msgid "Memory Card A"
msgstr "Карта памяти A"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:4
msgid "Memory Card B"
msgstr "Карта памяти B"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:6
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:6
msgid ""
"A 3 element list with total space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return 0."
msgstr "Список из трех элементов с общим объёмом в байтах (1, 2, 3). Если на конкретном устройстве нет ни одного из этих местоположений, оно должно вернуть 0."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:4
msgid "Get free space available on the mountpoints:"
msgstr "Получить свободное место на точках монтирования:"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:3
msgid "Card A"
msgstr "Карта 1"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:4
msgid "Card B"
msgstr "Карта 2"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:6
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:6
msgid ""
"A 3 element list with free space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return -1."
msgstr "Список из трех элементов со свободным пространством в байтах (1, 2, 3). Если конкретное устройство не имеет ни одного из этих местоположений, оно должно вернуть -1."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:1
msgid "Return a list of e-books on the device."
msgstr "Вернуть список электронных книг на устройстве."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:3
msgid ""
"If 'carda' or 'cardb' return a list of e-books on the specific storage card,"
" otherwise return list of e-books in main memory of device. If a card is "
"specified and no books are on the card return empty list."
msgstr "Если 'carda' или 'cardb' возвращают список электронных книг на определенной карте памяти, в противном случае возвращает список электронных книг в основной памяти устройства. Если карта указана и на ней нет книг, вернуть пустой список."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:8
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:8
msgid "A BookList."
msgstr "СписокКниг."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:1
msgid ""
"Upload a list of books to the device. If a file already exists on the "
"device, it should be replaced. This method should raise a "
":class:`FreeSpaceError` if there is not enough free space on the device. The"
" text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is"
" not None otherwise it must contain the word \"memory\"."
msgstr "Загрузите список книг на устройство. Если файл уже существует на устройстве, его следует заменить. Этот метод должен вызывать :class:`FreeSpaceError`, если на устройстве недостаточно свободного места. Текст FreeSpaceError должен содержать слово \"card\", если ``on_card`` не равно None, в противном случае он должен содержать слово \"memory\"."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:7
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:7
msgid "A list of paths"
msgstr "Список путей"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:8
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:8
msgid ""
"A list of file names that the books should have once uploaded to the device."
" len(names) == len(files)"
msgstr "Список имен файлов книг которые были уже загружены на устройство. len(names) == len(files)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:10
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:10
msgid ""
"If not None, it is a list of :class:`Metadata` objects. The idea is to use "
"the metadata to determine where on the device to put the book. len(metadata)"
" == len(files). Apart from the regular cover (path to cover), there may also"
" be a thumbnail attribute, which should be used in preference. The thumbnail"
" attribute is of the form (width, height, cover_data as jpeg)."
msgstr "Если не None, это список объектов :class:`Metadata`. Идея состоит в том, чтобы использовать метаданные, чтобы определить, где на устройстве разместить книгу. len(metadata) == len(files). Помимо обычной обложки (путь к обложке), также может быть атрибут эскиза, который следует использовать в предпочтении. Атрибут эскиза имеет форму (ширина, высота, данные обложки в формате jpeg)."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:17
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:17
msgid ""
"A list of 3-element tuples. The list is meant to be passed to "
":meth:`add_books_to_metadata`."
msgstr "Список трехэлементных кортежей. Список предназначен для передачи в :meth:`add_books_to_metadata`."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:1
msgid ""
"Add locations to the booklists. This function must not communicate with the "
"device."
msgstr "Добавить местоположения в списки книг. Эта функция не должна связываться с устройством."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:4
msgid "Result of a call to L{upload_books}"
msgstr "Результат звонка L {upload_books}"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:5
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr "Список объектов :class:`Metadata`, такой же, как для :meth:`upload_books`."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:7
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:5
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.sync_booklists:3
msgid ""
"A tuple containing the result of calls to (:meth:`books(oncard=None)`, "
":meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr "Кортеж, содержащий результат вызовов (:meth:`books (oncard = None)`,: meth:`books(oncard='carda')`,: meth`books(oncard='cardb')`)."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.delete_books:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.delete_books:1
msgid "Delete books at paths on device."
msgstr "Удалять книги по путям на устройстве."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:1
msgid ""
"Remove books from the metadata list. This function must not communicate with"
" the device."
msgstr "Удалить книги из списка метаданных. Эта функция не должна связываться с устройством."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:4
msgid "paths to books on the device."
msgstr "пути к книгам на устройстве."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.sync_booklists:1
msgid "Update metadata on device."
msgstr "Обновить метаданные на устройстве."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:1
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr "Прочитать файл по ``пути`` на устройстве и записать его в outfile."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:3
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr "файловый объект, например ``sys.stdout``, или результат вызова :func:`open`."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.config_widget:1
msgid ""
"Should return a QWidget. The QWidget contains the settings for the device "
"interface"
msgstr "Должен вернуть QWidget. QWidget содержит настройки интерфейса устройства."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.save_settings:1
msgid ""
"Should save settings to disk. Takes the widget created in "
":meth:`config_widget` and saves all settings to disk."
msgstr "Должно сохранить настройки на диск. Принимает виджет, созданный в :meth:`config_widget`, и сохраняет все настройки на диск."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.settings:1
msgid ""
"Should return an opts object. The opts object should have at least one "
"attribute `format_map` which is an ordered list of formats for the device."
msgstr "Должно вернуть объект opts. Объект opts должен иметь как минимум один атрибут format_map, представляющий собой упорядоченный список форматов для устройства."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:1
msgid ""
"provide the driver the current set of plugboards and a function to select a "
"specific plugboard. This method is called immediately before add_books and "
"sync_booklists."
msgstr "предоставить драйверу текущий набор коммутационных панелей и функцию для выбора конкретной коммутационной панели. Этот метод вызывается непосредственно перед add_books и sync_booklists."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "pb_func is a callable with the following signature::"
msgstr "pb_func - это вызываемый объект со следующей подписью::"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "def pb_func(device_name, format, plugboards)"
msgstr " def pb_func(имя_устройства, формат, коммутационные панели)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:8
msgid ""
"You give it the current device name (either the class name or "
"DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or"
" 'device_db'), and the plugboards (you were given those by set_plugboards, "
"the same place you got this method)."
msgstr " Вы даете ему текущее имя устройства (либо имя класса, либо DEVICE_PLUGBOARD_NAME), интересующий вас формат ('настоящий' формат или 'device_db') и подключаемые модули (вам их предоставил set_plugboards, тем же способом получаете этот метод)."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:13
msgid "None or a single plugboard instance."
msgstr "Нет или один экземпляр коммутационной панели."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.set_driveinfo_name:1
msgid ""
"Set the device name in the driveinfo file to 'name'. This setting will "
"persist until the file is re-created or the name is changed again."
msgstr "Задать имя устройства в файле информации о диске 'name'. Этот параметр будет действовать до тех пор, пока файл не будет создан заново или имя не будет изменено снова."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.set_driveinfo_name:4
msgid ""
"Non-disk devices should implement this method based on the location codes "
"returned by the get_device_information() method."
msgstr "Недисковые устройства должны реализовывать этот метод на основе кодов местоположения, возвращаемых методом get_device_information()."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:1
msgid ""
"Given a list of paths, returns another list of paths. These paths point to "
"addable versions of the books."
msgstr "Учитывая список путей, возвращает другой список путей. Эти пути указывают на добавляемые версии книг."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:4
msgid ""
"If there is an error preparing a book, then instead of a path, the position "
"in the returned list for that book should be a three tuple: (original_path, "
"the exception instance, traceback)"
msgstr "Если при подготовке книги произошла ошибка, то вместо пути в возвращаемом списке для этой книги должна быть позиция из трёх кортежей: (исходный_путь, экземпляр исключения, трассировка)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.startup:1
msgid ""
"Called when calibre is starting the device. Do any initialization required. "
"Note that multiple instances of the class can be instantiated, and thus "
"__init__ can be called multiple times, but only one instance will have this "
"method called. This method is called on the device thread, not the GUI "
"thread."
msgstr "Вызывается, когда calibre запускает устройство. Выполните любую требуемую инициализацию. Обратите внимание, что можно создать несколько экземпляров класса, и, следовательно, __init__ можно вызывать несколько раз, но только один экземпляр будет вызывать этот метод. Этот метод вызывается в потоке устройства, а не в потоке графического интерфейса пользователя."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.shutdown:1
msgid ""
"Called when calibre is shutting down, either for good or in preparation to "
"restart. Do any cleanup required. This method is called on the device "
"thread, not the GUI thread."
msgstr "Вызывается, когда calibre выключается навсегда или при подготовке к перезапуску. Сделайте любую необходимую очистку. Этот метод вызывается в потоке устройства, а не в потоке графического интерфейса пользователя."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_uid:1
msgid ""
"Must return a unique id for the currently connected device (this is called "
"immediately after a successful call to open()). You must implement this "
"method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr "Должен возвращать уникальный идентификатор для текущего подключенного устройства (вызывается сразу после успешного вызова open()). Вы должны реализовать этот метод, если вы установите ASK_TO_ALLOW_CONNECT = True"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.ignore_connected_device:1
msgid ""
"Should ignore the device identified by uid (the result of a call to "
"get_device_uid()) in the future. You must implement this method if you set "
"ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately "
"after open(), so if open() caches some state, the driver should reset that "
"state."
msgstr "Должно игнорировать устройство, идентифицированное uid (результат вызова get_device_uid()) в будущем. Вы должны реализовать этот метод, если вы установите ASK_TO_ALLOW_CONNECT = True. Обратите внимание, что эта функция вызывается сразу после open(), поэтому, если open() кэширует какое-то состояние, драйвер должен сбросить это состояние."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
msgid ""
"Return map of device uid to friendly name for all devices that the user has "
"asked to be ignored."
msgstr "Вернуть маппинг uid устройства к понятному имени для всех устройств, которые пользователь попросил игнорировать."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
msgid "Set the list of device uids that should be ignored by this driver."
msgstr "Задать список идентификаторов устройств, которые должны игнорироваться этим драйвером."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
msgid ""
"Implement this method if your device wants to override a particular "
"preference. You must ensure that all call sites that want a preference that "
"can be overridden use device_prefs['something'] instead of "
"prefs['something']. Your method should call "
"device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: "
"metadata management (prefs['manage_device_metadata'])"
msgstr "Реализуйте этот метод, если ваше устройство хочет переопределить конкретную настройку. Вы должны убедиться, что все сайты вызовов, которым требуется переопределение настроек, используют device_prefs['something'] вместо prefs['something']. Ваш метод должен вызывать device_prefs.set_overrides(pref = val, pref = val, ...). В настоящее время используется для: управления метаданными (prefs['manage_device_metadata'])"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_library_info:1
msgid ""
"Implement this method if you want information about the current calibre "
"library. This method is called at startup and when the calibre library "
"changes while connected."
msgstr "Реализуйте этот метод, если вам нужна информация о текущей библиотеке calibre. Этот метод вызывается при запуске и при изменении библиотеки calibre при подключении."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
msgid ""
"Called by the device manager when starting plugins. If this method returns a"
" string, then a) it supports the device manager's dynamic control interface,"
" and b) that name is to be used when talking to the plugin."
msgstr "Вызывается диспетчером устройств при запуске плагинов. Если этот метод возвращает строку, то а) он поддерживает интерфейс динамического управления диспетчера устройств и б) это имя должно использоваться при разговоре с плагином."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:3
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:4
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:6
msgid ""
"This method can be called on the GUI thread. A driver that implements this "
"method must be thread safe."
msgstr "Этот метод можно вызвать в потоке графического интерфейса. Драйвер, реализующий этот метод, должен быть потокобезопасным."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:1
msgid ""
"This method is called to start the plugin. The plugin should begin to accept"
" device connections however it does that. If the plugin is already accepting"
" connections, then do nothing."
msgstr "Этот метод вызывается для запуска плагина. Плагин должен начать принимать подключения устройств, если он это делает. Если плагин уже принимает соединения, ничего не делайте."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:1
msgid ""
"This method is called to stop the plugin. The plugin should no longer accept"
" connections, and should cleanup behind itself. It is likely that this "
"method should call shutdown. If the plugin is already not accepting "
"connections, then do nothing."
msgstr "Этот метод вызывается для остановки плагина. Плагин больше не должен принимать соединения и должен очищаться за собой. Вероятно этот метод должен вызывать выключение. Если плагин уже не принимает подключения, ничего не делайте."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:1
msgid ""
"Return the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started. Return None if the option does not "
"exist."
msgstr "Вернуть значение параметра, указанного в opt_string. Этот метод можно вызвать, когда плагин не запущен. Вернуть None, если параметр не существует."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:1
msgid ""
"Set the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started."
msgstr "Установить значение параметра, обозначенного opt_string. Этот метод можно вызвать, когда плагин не запущен."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:1
msgid "Return True if the plugin is started, otherwise false"
msgstr "Вернуть True, если плагин запущен, иначе false"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:1
msgid ""
"Called during book matching when a book on the device is matched with a book"
" in calibre's db. The method is responsible for synchronizing data from the "
"device to calibre's db (if needed)."
msgstr "Вызывается во время сопоставления книг, когда книга на устройстве сопоставляется с книгой в базе данных calibre. Метод отвечает за синхронизацию данных с устройства в базу данных calibre (при необходимости)."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:5
msgid ""
"The method must return a two-value tuple. The first value is a set of "
"calibre book ids changed if calibre's database was changed or None if the "
"database was not changed. If the first value is an empty set then the "
"metadata for the book on the device is updated with calibre's metadata and "
"given back to the device, but no GUI refresh of that book is done. This is "
"useful when the calibre data is correct but must be sent to the device."
msgstr "Метод должен возвращать кортеж с двумя значениями. Первое значение - это набор идентификаторов книг calibre, измененных, если база данных calibre была изменена, или None, если база данных не была изменена. Если первое значение является пустым набором, то метаданные для книги на устройстве обновляются метаданными calibre и возвращаются на устройство, но обновление графического интерфейса этой книги не выполняется. Полезно, если данные calibre верны, но их необходимо отправить на устройство."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:13
msgid ""
"The second value is itself a 2-value tuple. The first value in the tuple "
"specifies whether a book format should be sent to the device. The intent is "
"to permit verifying that the book on the device is the same as the book in "
"calibre. This value must be None if no book is to be sent, otherwise return "
"the base file name on the device (a string like foobar.epub). Be sure to "
"include the extension in the name. The device subsystem will construct a "
"send_books job for all books with not- None returned values. Note: other "
"than to later retrieve the extension, the name is ignored in cases where the"
" device uses a template to generate the file name, which most do. The second"
" value in the returned tuple indicated whether the format is future-dated. "
"Return True if it is, otherwise return False. calibre will display a dialog "
"to the user listing all future dated books."
msgstr "Второе значение само по себе является кортежем с двумя значениями. Первое значение в кортеже указывает, следует ли отправлять на устройство формат книги. Цель состоит в том, чтобы разрешить проверку того, что книга на устройстве совпадает с книгой в calibre. Это значение должно быть None, если книга не отправляется, в противном случае возвращается базовое имя файла на устройстве (строка, вроде foobar.epub). Обязательно укажите расширение в имени. Подсистема устройства создаст задание send_books для всех книг, не возвращающих значений not-None. Примечание: кроме последующего извлечения расширения, имя игнорируется в тех случаях, когда устройство использует шаблон для генерации имени файла, в большинстве случаев так и происходит. Второе значение в возвращенном кортеже указывает, датирован ли формат будущей датой. Вернуть True, если это так, в противном случае вернуть False. calibre отобразит для пользователя диалоговое окно со списком всех книг датированных будущим."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:27
msgid ""
"Extremely important: this method is called on the GUI thread. It must be "
"threadsafe with respect to the device manager's thread."
msgstr "Чрезвычайно важно: этот метод вызывается в потоке графического интерфейса. Он должен быть потокобезопасным по отношению к потоку диспетчера устройств."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:30
msgid ""
"book_id: the calibre id for the book in the database. book_metadata: the "
"Metadata object for the book coming from the device. first_call: True if "
"this is the first call during a sync, False otherwise"
msgstr "book_id: идентификатор calibre книги в базе данных. book_metadata: объект метаданных для книги, поступающий с устройства. first_call: True, если это первый вызов во время синхронизации, в противном случае - False."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:1
msgid "Bases: :py:class:`list`"
msgstr "Bases: :py:class:`list`"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:1
msgid "A list of books. Each Book object must have the fields"
msgstr "Список книг. Каждый объект Book должен иметь поля"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:3
msgid "title"
msgstr "название"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:4
msgid "authors"
msgstr "авторы"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:5
msgid "size (file size of the book)"
msgstr "размер (размер файла книги)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:6
msgid "datetime (a UTC time tuple)"
msgstr "datetime (кортеж времени в формате UTC)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:7
msgid "path (path on the device to the book)"
msgstr "путь (путь на устройстве к книге)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:8
msgid ""
"thumbnail (can be None) thumbnail is either a str/bytes object with the "
"image data or it should have an attribute image_path that stores an absolute"
" (platform native) path to the image"
msgstr "thumbnail (может быть None). thumbnail - это либо объект str/bytes с данными изображения, либо он должен иметь атрибут image_path, в котором хранится абсолютный (собственный для платформы) путь к изображению."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:11
msgid "tags (a list of strings, can be empty)."
msgstr "теги (список строк, может быть пустым)."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.supports_collections:1
msgid "Return True if the device supports collections for this book list."
msgstr "Вернуть True, если устройство поддерживает коллекции для этого списка книг."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.add_book:1
msgid ""
"Add the book to the booklist. Intent is to maintain any device-internal "
"metadata. Return True if booklists must be sync'ed"
msgstr "Добавить книгу в список книг. Намерение состоит в том, чтобы поддерживать любые внутренние метаданные устройства. Вернуть True, если необходимо синхронизировать списки книг"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.remove_book:1
msgid ""
"Remove a book from the booklist. Correct any device metadata at the same "
"time"
msgstr "Удалить книгу из списка книг. Исправить любые метаданные устройства одновременно"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:1
msgid ""
"Return a dictionary of collections created from collection_attributes. Each "
"entry in the dictionary is of the form collection name:[list of books]"
msgstr "Вернуть словарь коллекций, созданных из collection_attributes. Каждая запись в словаре имеет название коллекции форм:[список книг]"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:5
msgid ""
"The list of books is sorted by book title, except for collections created "
"from series, in which case series_index is used."
msgstr "Список книг отсортирован по названию, за исключением сборников, созданных из серий, в этом случае используется series_index."

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:8
msgid "A list of attributes of the Book object"
msgstr "Список атрибутов объекта Book"

#: ../../__w/calibre/calibre/manual/plugins.rst:110
msgid "USB Mass Storage based devices"
msgstr "Устройства на базе USB Mass Storage"

#: ../../__w/calibre/calibre/manual/plugins.rst:112
msgid ""
"The base class for such devices is "
":class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits "
"some of its functionality from its bases, documented below. A typical basic "
"USBMS based driver looks like this:"
msgstr "Базовый класс для таких устройств :class:`calibre.devices.usbms.driver.USBMS`. Этот класс, в свою очередь, наследует часть своих функций от своих основ, описанных ниже. Типичный базовый драйвер на основе USBMS выглядит так:"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device:1
msgid ""
"Bases: :py:class:`~calibre.devices.usbms.deviceconfig.DeviceConfig`, "
":py:class:`~calibre.devices.interface.DevicePlugin`"
msgstr "Bases: :py:class:`~calibre.devices.usbms.deviceconfig.DeviceConfig`, :py:class:`~calibre.devices.interface.DevicePlugin`"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device:1
msgid ""
"This class provides logic common to all drivers for devices that export "
"themselves as USB Mass Storage devices. Provides implementations for "
"mounting/ejecting of USBMS devices on all platforms."
msgstr "Этот класс обеспечивает логику, общую для всех драйверов для устройств, которые экспортируют себя как запоминающие устройства USB. Предоставляет реализации для установки/извлечения устройств USBMS на всех платформах."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
msgid ""
"String identifying the main memory of the device in the Windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "Строка, определяющая основную память устройства в строках идентификатора Windows PnP. Это может быть None, строка, список строк или скомпилированное регулярное выражение."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
msgid ""
"String identifying the first card of the device in the Windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "Строка, идентифицирующая первую карту устройства в строках идентификатора Windows PnP. Это может быть None, строка, список строк или скомпилированное регулярное выражение."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
msgid ""
"String identifying the second card of the device in the Windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "Строка, идентифицирующая вторую карту устройства в строках идентификатора Windows PnP. Это может быть None, строка, список строк или скомпилированное регулярное выражение."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
msgid ""
"Used by the new driver detection to disambiguate main memory from storage "
"cards. Should be a regular expression that matches the main memory mount "
"point assigned by macOS"
msgstr "Используется при обнаружении нового драйвера для устранения неоднозначности основной памяти и карт памяти. Должно быть регулярное выражение, которое соответствует точке монтирования основной памяти, назначенной macOS."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
msgid "The maximum length of paths created on the device"
msgstr "Максимальная длина путей, созданных на устройстве"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
msgid "Put news in its own folder"
msgstr "Поместите новости в отдельную папку"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.windows_sort_drives:1
msgid ""
"Called to disambiguate main memory and storage card for devices that do not "
"distinguish between them on the basis of `WINDOWS_CARD_NAME`. For example: "
"The EB600"
msgstr "Вызывается для устранения неоднозначности основной памяти и карты памяти для устройств, которые не различают их на основе `WINDOWS_CARD_NAME`. Например: EB600"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.sanitize_callback:1
msgid ""
"Callback to allow individual device drivers to override the path "
"sanitization used by :meth:`create_upload_path`."
msgstr "Обратный вызов, позволяющий отдельным драйверам устройств отменять очистку пути, используемую :meth:`create_upload_path`."

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.filename_callback:1
msgid ""
"Callback to allow drivers to change the default file name set by "
":meth:`create_upload_path`."
msgstr "Обратный вызов, позволяющий драйверам изменять имя файла по умолчанию, установленное :meth:`create_upload_path`."

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.sanitize_path_components:1
msgid ""
"Perform any device specific sanitization on the path components for files to"
" be uploaded to the device"
msgstr "Выполнить любую специальную очистку устройства в компонентах пути для файлов, которые будут загружены на устройство."

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.get_annotations:1
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr "Разрешить path_map в annotation_map файлов, найденных на устройстве"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.add_annotation_to_library:1
msgid "Add an annotation to the calibre library"
msgstr "Добавить аннотацию в библиотеку calibre"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS:1
msgid ""
"Bases: :py:class:`~calibre.devices.usbms.cli.CLI`, "
":py:class:`~calibre.devices.usbms.device.Device`"
msgstr "Bases: :py:class:`~calibre.devices.usbms.cli.CLI`, :py:class:`~calibre.devices.usbms.device.Device`"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS:1
msgid ""
"The base class for all USBMS devices. Implements the logic for "
"sending/getting/updating metadata/caching metadata/etc."
msgstr "Базовый класс для всех устройств USBMS. Реализует логику отправки/получения/обновления метаданных/кеширования метаданных и т. д."

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:1
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr "Загрузить обложку книги на устройство. Реализация по умолчанию ничего не делает."

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:3
msgid "The full path to the folder where the associated book is located."
msgstr "Полный путь к папке, в которой находится соответствующая книга."

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:4
msgid "The name of the book file without the extension."
msgstr "Имя файла книги без расширения."

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:5
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr "метаданные, принадлежащие книге. Используйте metadata.thumbnail для обложки"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:7
msgid "The full path to the e-book file"
msgstr "Полный путь к файлу электронной книги"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.normalize_path:1
msgid "Return path with platform native path separators"
msgstr "Вернуть путь с нативными разделителями путей платформы"

#: ../../__w/calibre/calibre/manual/plugins.rst:157
msgid "User interface actions"
msgstr "Действия в пользовательском интерфейсе"

#: ../../__w/calibre/calibre/manual/plugins.rst:159
msgid ""
"If you are adding your own plugin in a ZIP file, you should subclass both "
"InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` "
"method of your InterfaceActionBase subclass must return an instantiated "
"object of your InterfaceBase subclass."
msgstr "Если вы добавляете свой собственный плагин в ZIP-файл, вы должны создать подкласс как InterfaceActionBase, так и InterfaceAction. Метод :meth:`load_actual_plugin` вашего подкласса InterfaceActionBase должен возвращать экземпляр объекта вашего подкласса InterfaceBase."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:1
msgid "Bases: :py:class:`~PyQt6.QtCore.QObject`"
msgstr "Основы: :py:class:`~PyQt6.QtCore.QObject`"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:1
msgid ""
"A plugin representing an \"action\" that can be taken in the graphical user "
"interface. All the items in the toolbar and context menus are implemented by"
" these plugins."
msgstr "Плагин, представляющий \"действие\", которое может быть выполнено в графическом пользовательском интерфейсе. Все элементы на панели инструментов и контекстных меню реализованы этими плагинами."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:5
msgid ""
"Note that this class is the base class for these plugins, however, to "
"integrate the plugin with calibre's plugin system, you have to make a "
"wrapper class that references the actual plugin. See the "
":mod:`calibre.customize.builtins` module for examples."
msgstr "Обратите внимание, что этот класс является базовым классом для этих подключаемых модулей, однако, чтобы интегрировать подключаемый модуль с системой подключаемых модулей calibre, вам необходимо создать класс-оболочку, который ссылается на фактический подключаемый модуль. См. Примеры модуля :mod:`calibre.customize.builtins`."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:10
msgid ""
"If two :class:`InterfaceAction` objects have the same name, the one with "
"higher priority takes precedence."
msgstr "Если два объекта :class:`InterfaceAction` имеют одинаковое имя, приоритет имеет объект с более высоким приоритетом."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:13
msgid ""
"Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, "
":meth:`location_selected`, :meth:`shutting_down`, "
":meth:`initialization_complete` and :meth:`tag_browser_context_action` "
"methods."
msgstr "Подклассы должны реализовывать методы :meth:`genesis`, :meth:`library_changed`, :meth:`location_selected`, :meth:`shutting_down`, :meth:`initialization_complete` и :meth:`tag_browser_context_action` "

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:17
msgid ""
"Once initialized, this plugin has access to the main calibre GUI via the "
":attr:`gui` member. You can access other plugins by name, for example::"
msgstr "После инициализации этот плагин получает доступ к графическому интерфейсу основного calibre через член :attr:`gui`. Вы можете получить доступ к другим плагинам по имени, например::"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:22
msgid ""
"To access the actual plugin, use the :attr:`interface_action_base_plugin` "
"attribute, this attribute only becomes available after the plugin has been "
"initialized. Useful if you want to use methods from the plugin class like "
"do_user_config()."
msgstr "Чтобы получить доступ к собственному плагину, используйте атрибут :attr:`interface_action_base_plugin`, этот атрибут становится доступным только после инициализации плагина. Полезно, если вы хотите использовать методы из класса плагина, например do_user_config()."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:27
msgid ""
"The QAction specified by :attr:`action_spec` is automatically create and "
"made available as ``self.qaction``."
msgstr "QAction, указанный в :attr:`action_spec`, создается автоматически и становится доступным как self.qaction."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.name:1
msgid ""
"The plugin name. If two plugins with the same name are present, the one with"
" higher priority takes precedence."
msgstr "Название плагина. Если присутствуют два плагина с одинаковым именем, приоритет имеет тот, который имеет более высокий приоритет."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.priority:1
msgid ""
"The plugin priority. If two plugins with the same name are present, the one "
"with higher priority takes precedence."
msgstr "Приоритет плагина. Если присутствуют два плагина с одинаковым именем, приоритет имеет тот, который имеет более высокий приоритет."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.popup_type:1
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr "Тип всплывающего меню, когда этот плагин добавляется на панель инструментов."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.auto_repeat:1
msgid ""
"Whether this action should be auto repeated when its shortcut key is held "
"down."
msgstr "Следует ли автоматически повторять это действие при удерживании его сочетания клавиш."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_spec:1
msgid ""
"Of the form: (text, icon_path, tooltip, keyboard shortcut). icon, tooltip "
"and keyboard shortcut can be None. keyboard shortcut must be either a "
"string, None or tuple of shortcuts. If None, a keyboard shortcut "
"corresponding to the action is not registered. If you pass an empty tuple, "
"then the shortcut is registered with no default key binding."
msgstr "Форма: (текст, путь к значку, всплывающая подсказка, сочетание клавиш) значок, всплывающая подсказка и сочетание клавиш могут иметь значение None, сочетание клавиш должно быть строкой, None или кортежем сочетаний клавиш. Если None, сочетание клавиш, соответствующее действию, не регистрируется. Если вы передаете пустой кортеж, ярлык регистрируется без привязки клавиш по умолчанию."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_add_menu:1
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr "Если True, меню создается автоматически и добавляется в self.qaction."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
msgid ""
"If True, a clone of self.qaction is added to the menu of self.qaction If you"
" want the text of this action to be different from that of self.qaction, set"
" this variable to the new text"
msgstr "Если True, клон self.qaction добавляется в меню self.qaction. Если вы хотите, чтобы текст этого действия отличался от текста self.qaction, установите для этой переменной новый текст."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.dont_add_to:1
msgid ""
"Set of locations to which this action must not be added. See "
":attr:`all_locations` for a list of possible locations"
msgstr "Набор локаций, в которые нельзя добавлять это действие. См. :attr:`all_locations` для списка возможных местоположений."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.dont_remove_from:1
msgid ""
"Set of locations from which this action must not be removed. See "
":attr:`all_locations` for a list of possible locations"
msgstr "Набор локаций, из которых нельзя удалять это действие. См. :attr:`all_locations` для списка возможных местоположений."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_type:1
msgid ""
"Type of action 'current' means acts on the current view 'global' means an "
"action that does not act on the current view, but rather on calibre as a "
"whole"
msgstr "Тип действия 'current' означает действие в текущем представлении, 'global' означает действие, которое действует не на текущее представление, а, скорее, на calibre в целом."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.accepts_drops:1
msgid ""
"If True, then this InterfaceAction will have the opportunity to interact "
"with drag and drop events. See the methods, :meth:`accept_enter_event`, "
":meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr "Если True, то у этого InterfaceAction будет возможность взаимодействовать с событиями перетаскивания. Подробнее см. в методах :meth:`accept_enter_event`, :meth:`accept_drag_move_event`, :meth:`drop_event`."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accept_enter_event:1
msgid ""
"This method should return True iff this interface action is capable of "
"handling the drag event. Do not call accept/ignore on the event, that will "
"be taken care of by the calibre UI."
msgstr "Этот метод должен возвращать True, если это действие интерфейса способно обрабатывать событие перетаскивания. Не вызывайте accept/ignore для события, о котором позаботится пользовательский интерфейс calibre."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.drop_event:1
msgid ""
"This method should perform some useful action and return True iff this "
"interface action is capable of handling the drop event. Do not call "
"accept/ignore on the event, that will be taken care of by the calibre UI. "
"You should not perform blocking/long operations in this function. Instead "
"emit a signal or use QTimer.singleShot and return quickly. See the builtin "
"actions for examples."
msgstr "Этот метод должен выполнять некоторые полезные действия и возвращать True, если это действие интерфейса способно обрабатывать событие drop. Не вызывайте accept/ignore для события, о котором позаботится пользовательский интерфейс calibre. В этой функции не следует выполнять блокирующие/длительные операции. Вместо этого отправьте сигнал или используйте QTimer.singleShot и быстро вернитесь. См. примеры встроенных действий."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:1
msgid ""
"Convenience method to easily add actions to a QMenu. Returns the created "
"QAction. This action has one extra attribute calibre_shortcut_unique_name "
"which if not None refers to the unique name under which this action is "
"registered with the keyboard manager."
msgstr "Удобный метод простого добавления действий в QMenu. Возвращает созданный QAction. Это действие имеет один дополнительный атрибут calibre_shortcut_unique_name, который, если не None, относится к уникальному имени, под которым это действие зарегистрировано диспетчером клавиатуры."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:6
msgid "The QMenu the newly created action will be added to"
msgstr "QMenu вновь созданное действие будет добавлено в"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:7
msgid ""
"A unique name for this action, this must be globally unique, so make it as "
"descriptive as possible. If in doubt, add an UUID to it."
msgstr "Уникальное имя для этого действия, оно должно быть уникальным во всем мире, поэтому сделайте его как можно более описательным. Если сомневаетесь, добавьте к нему UUID."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:10
msgid "The text of the action."
msgstr "Текст действия."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:11
msgid ""
"Either a QIcon or a file name. The file name is passed to the QIcon.ic() "
"builtin, so you do not need to pass the full path to the images folder."
msgstr "Либо QIcon, либо имя файла. Имя файла передается встроенной функции QIcon.ic(), поэтому вам не нужно передавать полный путь к папке с изображениями."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:14
msgid ""
"A string, a list of strings, None or False. If False, no keyboard shortcut "
"is registered for this action. If None, a keyboard shortcut with no default "
"keybinding is registered. String and list of strings register a shortcut "
"with default keybinding as specified."
msgstr "Строка, список строк, None или False. Если значение равно False, для этого действия не регистрируется комбинация клавиш. Если None, то регистрируется сочетание клавиш без привязки клавиш по умолчанию. Строка и список строк регистрируют ярлык с привязкой клавиш по умолчанию, как указано."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:18
msgid "A description for this action. Used to set tooltips."
msgstr "Описание этого действия. Используется для установки всплывающих подсказок."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:20
msgid ""
"A callable which is connected to the triggered signal of the created action."
msgstr "Вызываемый объект, связанный с сработавшим сигналом созданного действия."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:22
msgid ""
"The text displayed to the user when customizing the keyboard shortcuts for "
"this action. By default it is set to the value of ``text``."
msgstr "Текст, отображаемый пользователю при настройке сочетаний клавиш для этого действия. По умолчанию установлено значение text."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:25
msgid ""
"Shortcuts for actions that don't always appear, or are library dependent, "
"may disappear when other keyboard shortcuts are edited unless "
"```persist_shortcut``` is set True."
msgstr "Ярлыки для действий, которые не всегда появляются или зависят от библиотеки, могут исчезнуть при редактировании других сочетаний клавиш, если для параметра persist_shortcut установлено значение True."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:12
msgid ""
"A dictionary of the form ``{name : file_contents}``. Any names that were not"
" found in the ZIP file will not be present in the dictionary."
msgstr "Словарь формы '{name: file_contents}'. Любые имена, которые не были найдены в ZIP-файле, не будут присутствовать в словаре."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.genesis:1
msgid ""
"Setup this plugin. Only called once during initialization. self.gui is "
"available. The action specified by :attr:`action_spec` is available as "
"``self.qaction``."
msgstr "Установка этого плагина. Вызывается только один раз во время инициализации. self.gui доступен. Действие, указанное в :attr:`action_spec`, доступно как ``self.qaction``."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.location_selected:1
msgid ""
"Called whenever the book list being displayed in calibre changes. Currently "
"values for loc are: ``library, main, card and cardb``."
msgstr "Вызывается при изменении  отображаемого списка книг в calibre. В настоящее время значения loc следующие: ``library, main, card и cardb``."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.location_selected:4
msgid ""
"This method should enable/disable this action and its sub actions as "
"appropriate for the location."
msgstr "Этот метод должен включать/отключать это действие и его вспомогательные действия в зависимости от местоположения."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:1
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:1
msgid "Called whenever the current library is changed."
msgstr "Вызывается при изменении текущей библиотеки."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:3
msgid "The LibraryDatabase corresponding to the previous library."
msgstr "LibraryDatabase, соответствующая предыдущей библиотеке."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:4
msgid "The LibraryDatabase corresponding to the new library."
msgstr "LibraryDatabase, соответствующая новой библиотеке."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:3
msgid "The LibraryDatabase corresponding to the current library."
msgstr "LibraryDatabase, соответствующая текущей библиотеке."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
msgid ""
"Called once per action when the layout of the main GUI is completed. If your"
" action needs to make changes to the layout, they should be done here, "
"rather than in :meth:`initialization_complete`."
msgstr "Вызывается один раз за действие, когда макет основного графического интерфейса завершен. Если ваше действие требует внесения изменений в макет, они должны быть выполнены здесь, а не в :meth:`initialization_complete`."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.initialization_complete:1
msgid ""
"Called once per action when the initialization of the main GUI is completed."
msgstr "Вызывается один раз для каждого действия после завершения инициализации основного графического интерфейса."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.tag_browser_context_action:1
msgid ""
"Called when displaying the context menu in the Tag browser. ``index`` is the"
" QModelIndex that points to the Tag browser item that was right clicked. "
"Test it for validity with index.valid() and get the underlying TagTreeItem "
"object with index.data(Qt.ItemDataRole.UserRole). Any action objects yielded"
" by this method will be added to the context menu."
msgstr "Вызывается при отображении контекстного меню в браузере тегов. index - это QModelIndex, который указывает на элемент браузера тегов, нажатый правой кнопкой мыши. Проверьте его на достоверность с помощью index.valid () и получите базовый объект TagTreeItem с помощью index.data (Qt.ItemDataRole.UserRole). Любые объекты действия, полученные этим методом, будут добавлены в контекстное меню."

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.shutting_down:1
msgid ""
"Called once per plugin when the main GUI is in the process of shutting down."
" Release any used resources, but try not to block the shutdown for long "
"periods of time."
msgstr "Вызывается один раз для каждого плагина, когда основной графический интерфейс находится в процессе завершения работы. Освободите все используемые ресурсы, но постарайтесь не блокировать выключение на длительные периоды времени."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.InterfaceActionBase.load_actual_plugin:1
msgid "This method must return the actual interface action plugin object."
msgstr "Этот метод должен возвращать фактический объект плагина действия интерфейса."

#: ../../__w/calibre/calibre/manual/plugins.rst:175
msgid "Preferences plugins"
msgstr "Плагины параметров"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:1
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr "Плагин, представляющий виджет, отображаемый в диалоговом окне «Настройки»."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:3
msgid ""
"This plugin has only one important method :meth:`create_widget`. The various"
" fields of the plugin control how it is categorized in the UI."
msgstr "У этого плагина есть только один важный метод :meth:`create_widget`. Различные поля плагина определяют его категоризацию в пользовательском интерфейсе."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.config_widget:1
msgid ""
"Import path to module that contains a class named ConfigWidget which "
"implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr "Путь импорта к модулю, который содержит класс с именем ConfigWidget, который реализует интерфейс ConfigWidgetInterface. Используется :meth:`create_widget`."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.category_order:1
msgid ""
"Where in the list of categories the :attr:`category` of this plugin should "
"be."
msgstr "Где в списке категорий должна быть :attr:`category` этого плагина"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.name_order:1
msgid ""
"Where in the list of names in a category, the :attr:`gui_name` of this "
"plugin should be"
msgstr "Где в списке имен в категории должен быть :attr:`gui_name` этого плагина"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.category:1
msgid "The category this plugin should be in"
msgstr "Категория, в которую должен входить этот плагин"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.gui_category:1
msgid "The category name displayed to the user for this plugin"
msgstr "Название категории, отображаемое пользователю для этого плагина."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.gui_name:1
msgid "The name displayed to the user for this plugin"
msgstr "Имя, отображаемое пользователю для этого плагина."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.icon:1
msgid "The icon for this plugin, should be an absolute path"
msgstr "Значок этого плагина должен быть абсолютным путем"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.description:1
msgid "The description used for tooltips and the like"
msgstr "Описание, используемое для всплывающих подсказок и т.п."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:1
msgid ""
"Create and return the actual Qt widget used for setting this group of "
"preferences. The widget must implement the "
":class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr "Создать и вернуть фактический виджет Qt, используемый для установки этой группы предпочтений. Виджет должен реализовывать :class:`calibre.gui2.preferences.ConfigWidgetInterface`."

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:5
msgid ""
"The default implementation uses :attr:`config_widget` to instantiate the "
"widget."
msgstr "Реализация по умолчанию использует :attr:`config_widget` для создания экземпляра виджета."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface:1
msgid ""
"This class defines the interface that all widgets displayed in the "
"Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base "
"class that implements this interface and defines various convenience methods"
" as well."
msgstr "Этот класс определяет интерфейс, который должны реализовывать все виджеты, отображаемые в диалоговом окне «Настройки». Смотрите :class:`ConfigWidgetBase`, чтобы узнать о базовом классе, который реализует этот интерфейс и также определяет различные удобные методы."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetBase.changed_signal:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
msgid ""
"This signal must be emitted whenever the user changes a value in this widget"
msgstr "Этот сигнал должен излучаться всякий раз, когда пользователь изменяет значение в этом виджете."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetBase.supports_restoring_to_defaults:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr "Установить значение True, если реализован метод :meth:`restore_to_defaults`."

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
msgid "The tooltip for the \"Restore defaults\" button"
msgstr "Подсказка для кнопки \"Восстановить по умолчанию\""

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetBase.restart_critical:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
msgid ""
"If True the Preferences dialog will not allow the user to set any more "
"preferences. Only has effect if :meth:`commit` returns True."
msgstr "Если True, диалоговое окно Preferences не позволит пользователю устанавливать какие-либо другие предпочтения. Действует только в том случае, если :meth:`commit` возвращает True."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
msgid ""
"Called once before the widget is displayed, should perform any necessary "
"setup."
msgstr "Вызывается один раз перед отображением виджета, должен выполнить все необходимые настройки."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
msgid "The main calibre graphical user interface"
msgstr "Главный графический интерфейс пользователя calibre"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.initialize:1
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
msgid ""
"Should set all config values to their initial values (the values stored in "
"the config files). A \"return\" statement is optional. Return False if the "
"dialog is not to be shown."
msgstr "Следует установить для всех значений конфигурации их начальные значения (значения, хранящиеся в файлах конфигурации). Оператор возврата не является обязательным. Вернуть False, если диалоговое окно не должно отображаться."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.restore_defaults:1
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
msgid "Should set all config values to their defaults."
msgstr "Должно установить для всех значений конфигурации значения по умолчанию."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.commit:1
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
msgid ""
"Save any changed settings. Return True if the changes require a restart, "
"False otherwise. Raise an :class:`AbortCommit` exception to indicate that an"
" error occurred. You are responsible for giving the user feedback about what"
" the error is and how to correct it."
msgstr "Сохранить все изменённые настройки. Вернуть True, если изменения требуют перезапуска, в противном случае - False. Вызвать исключение :class:`AbortCommit`, чтобы указать, что произошла ошибка. Вы несете ответственность за предоставление пользователю отзыва о том, в чём заключается ошибка и как её исправить."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
msgid ""
"Called once after this widget is committed. Responsible for causing the gui "
"to reread any changed settings. Note that by default the GUI re-initializes "
"various elements anyway, so most widgets won't need to use this method."
msgstr "Вызывается один раз после фиксации этого виджета. Отвечает за то, что пользовательский интерфейс перечитывает любые измененные настройки. Обратите внимание, что по умолчанию графический интерфейс в любом случае повторно инициализирует различные элементы, поэтому большинству виджетов не нужно использовать этот метод."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.initial_tab_changed:1
msgid ""
"Called if the initially displayed tab is changed before the widget is shown,"
" but after it is initialized."
msgstr "Вызывается, если изначально отображаемая вкладка изменена до показа виджета, но после его инициализации."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:1
msgid ""
"Base class that contains code to easily add standard config widgets like "
"checkboxes, combo boxes, text fields and so on. See the :meth:`register` "
"method."
msgstr "Базовый класс, содержащий код для простого добавления стандартных виджетов конфигурации, таких как флажки, поля со списком, текстовые поля и т. д. См. метод :meth:`register`."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:5
msgid ""
"This class automatically handles change notification, resetting to default, "
"translation between gui objects and config objects, etc. for registered "
"settings."
msgstr "Этот класс автоматически обрабатывает уведомление об изменении, сброс до значения по умолчанию, перевод между объектами gui и объектами конфигурации и т. д. для зарегистрированных настроек."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:9
msgid ""
"If your config widget inherits from this class but includes setting that are"
" not registered, you should override the :class:`ConfigWidgetInterface` "
"methods and call the base class methods inside the overrides."
msgstr "Если ваш виджет конфигурации наследуется от этого класса, но включает в себя незарегистрированные параметры, вам следует переопределить методы :class:`ConfigWidgetInterface` и вызвать методы базового класса внутри переопределений."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:1
msgid "Register a setting."
msgstr "Зарегистрировать настройки."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:3
msgid "The setting name"
msgstr "Название настройки"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:4
msgid "The config object that reads/writes the setting"
msgstr "Объект конфигурации, который читает/записывает параметр"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:5
msgid ""
"The name of the GUI object that presents an interface to change the setting."
" By default it is assumed to be ``'opt_' + name``."
msgstr "Имя объекта GUI, представляющего интерфейс для изменения настройки. По умолчанию предполагается, что это ``'opt_' + name``."

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:8
msgid ""
"If this setting is a multiple choice (combobox) based setting, the list of "
"choices. The list is a list of two element tuples of the form: ``[(gui name,"
" value), ...]``"
msgstr "Если этот параметр основан на множественном выборе (поле со списком), то это - список вариантов. Список представляет собой список из двух кортежей элементов формы: `` [(имя графического интерфейса, значение), ...] ``"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:11
msgid ""
"The class responsible for managing this setting. The default class handles "
"almost all cases, so this param is rarely used."
msgstr "Класс, отвечающий за управление этим параметром. Класс по умолчанию обрабатывает почти все случаи, поэтому этот параметр используется редко."
