# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# Aleksandr P, 2019
# ashed <craysy@gmail.com>, 2020-2022
# Caarmi, 2021
# Vlad Loktionov, 2015
# Виктор, 2022
# Родион Р., 2020
# Родион Р., 2019
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-23 14:29+0000\n"
"PO-Revision-Date: 2014-06-17 08:34+0000\n"
"Last-Translator: ashed <craysy@gmail.com>, 2020-2022\n"
"Language-Team: Russian (http://www.transifex.com/calibre/calibre/language/ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../__w/calibre/calibre/manual/template_lang.rst:4
msgid "The calibre template language"
msgstr "Язык шаблонов calibre"

#: ../../__w/calibre/calibre/manual/template_lang.rst:6
msgid ""
"The calibre template language is a calibre-specific language used throughout"
" calibre for tasks such as specifying file paths, formatting values, and "
"computing the value for user-specified columns. Examples:"
msgstr "Язык шаблонов calibre — это специфичный для calibre язык, используемый в calibre для таких задач, как указание путей к файлам, форматирование значений и вычисление значений для столбцов, указанных пользователем. Примеры:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:8
msgid ""
"Specify the folder structure and file names when saving files from the "
"calibre library to the disk or e-book reader."
msgstr "Укажите структуру папок и имена файлов при сохранении файлов из библиотеки calibre на диск или в читалку электронных книг"

#: ../../__w/calibre/calibre/manual/template_lang.rst:9
msgid "Define rules for adding icons and colors to the calibre book list."
msgstr "Определите правила добавления значков и цветов в список книг calibre."

#: ../../__w/calibre/calibre/manual/template_lang.rst:10
msgid "Define `virtual columns` that contain data from other columns."
msgstr "Определите виртуальные столбцы, содержащие данные из других столбцов."

#: ../../__w/calibre/calibre/manual/template_lang.rst:11
msgid "Advanced library searching."
msgstr "Расширенный поиск в библиотеке."

#: ../../__w/calibre/calibre/manual/template_lang.rst:12
msgid "Advanced metadata search and replace."
msgstr "Расширенный поиск и замена метаданных."

#: ../../__w/calibre/calibre/manual/template_lang.rst:14
msgid ""
"The language is built around the notion of a `template`, which specifies "
"which book metadata to use, computations on that metadata, and how it is to "
"be formatted."
msgstr "Язык построен на понятии «шаблон», который определяет, какие метаданные книги использовать, вычисления над этими метаданными и способ их форматирования."

#: ../../__w/calibre/calibre/manual/template_lang.rst:17
msgid "Basic templates"
msgstr "Базовые шаблоны"

#: ../../__w/calibre/calibre/manual/template_lang.rst:19
msgid ""
"A basic template consists one or more ``template expressions``. A ``template"
" expression`` consists of text and names in curly brackets (``{}``) that is "
"replaced by the corresponding metadata from the book being processed. For "
"example, the default template in calibre used for saving books to device has"
" 4 ``template expressions``::"
msgstr "Базовый шаблон состоит из одного или нескольких ``шаблонных выражений``. ``Шаблонное выражение`` состоит из текста и имен в фигурных скобках (``{}``), которые заменяются соответствующими метаданными из обрабатываемой книги. Например, шаблон по умолчанию в calibre, используемый для сохранения книг на устройство, имеет 4 ``шаблонных выражения``::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:23
msgid "For the book \"The Foundation\" by \"Isaac Asimov\" the  will become::"
msgstr "Для книги Айзека Азимова «Основание» \"The Foundation\" by \"Isaac Asimov\" им станет:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:27
msgid ""
"The slashes are not ``template expressions`` because they are in between in "
"``{}``. Such text is left where it appears. For example, if the template "
"is::"
msgstr "Косые черты не являются ``шаблонными выражениями``, потому что они находятся между ними в ``{}``. Такой текст остается там, где он появляется. Например, если шаблон::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:31
msgid "then for \"The Foundation\" the template produces::"
msgstr "затем для книги «Основание» шаблон создает::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:35
msgid ""
"A ``template expression`` can access all the metadata available in calibre, "
"including custom columns (columns you create yourself), by using a column's "
"``lookup name``. To find the lookup name for a `column` (sometimes called "
"`fields`), hover your mouse over the column header in calibre's book list. "
"Lookup names for custom columns always begin with ``#``. For series type "
"columns there is an additional field named ``#lookup name_index`` that is "
"the series index for that book in the series. For example, if you have a "
"custom series column named ``#myseries``, there will also be a column named "
"``#myseries_index``. The standard series column's index is named "
"``series_index``."
msgstr "``Шаблонное выражение`` может получить доступ ко всем метаданным, доступным в calibre, включая настраиваемые столбцы (столбцы, которые вы создаете самостоятельно), используя ``имя поиска`` столбца. Чтобы найти поисковое имя для столбца (иногда называемых полями), наведите указатель мыши на заголовок столбца в списке книг calibre. Имена подстановки для настраиваемых столбцов всегда начинаются с символа ``#``. Для столбцов типа серии есть дополнительное поле с именем ``#lookup name_index``, которое является индексом серии для этой книги в серии. Например, если у вас есть столбец настраиваемой серии с именем ``#myseries``, также будет столбец с именем ``#myseries_index``. Индекс столбца стандартной серии называется ``series_index``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:37
msgid "In addition to the standard column based fields, you also can use:"
msgstr "В дополнение к стандартным полям на основе столбцов вы также можете использовать:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:39
msgid ""
"``{formats}`` - A list of formats available in the calibre library for a "
"book"
msgstr "``{formats}``- Список форматов, доступных в библиотеке calibre для книги"

#: ../../__w/calibre/calibre/manual/template_lang.rst:40
msgid "``{identifiers:select(isbn)}`` - The ISBN of the book"
msgstr "``{identifiers:select(isbn)}`` - ISBN книги"

#: ../../__w/calibre/calibre/manual/template_lang.rst:42
msgid ""
"If the metadata for the field for a given book is not defined then the field"
" in the template is replaced by the empty string (``''``). For example, "
"consider the following template::"
msgstr "Если метаданные для поля для данной книги не определены, тогда поле в шаблоне заменяется пустой строкой (``''``). Например, рассмотрим следующий шаблон::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:46
msgid ""
"If Asimov's book \"Second Foundation\" is in the series \"Foundation\" then "
"the template produces::"
msgstr "Если книга Азимова «Второе основание» входит в серию «Основание», то шаблон дает::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:50
msgid ""
"If a series has not been entered for the book then the template produces::"
msgstr "Если для книги не введена серия, то шаблон выдает::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:54
msgid ""
"The template processor automatically removes multiple slashes and leading or"
" trailing spaces."
msgstr "Обработчик шаблонов автоматически удаляет несколько косых черт и начальные или конечные пробелы."

#: ../../__w/calibre/calibre/manual/template_lang.rst:57
msgid "Advanced formatting"
msgstr "Расширенное форматирование"

#: ../../__w/calibre/calibre/manual/template_lang.rst:59
msgid ""
"In addition to metadata substitution, templates can conditionally include "
"additional text and control how substituted data is formatted."
msgstr "Помимо подстановки метаданных, шаблоны могут условно включать дополнительный текст и управлять форматированием заменяемых данных."

#: ../../__w/calibre/calibre/manual/template_lang.rst:61
msgid "**Conditionally including text**"
msgstr "**Условно включая текст**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:63
msgid ""
"Sometimes you want text to appear in the output only if a field is not "
"empty. A common case is ``series`` and ``series_index`` where you want "
"either nothing or the two values separated by a hyphen. calibre handles this"
" case using a special ``template expression`` syntax."
msgstr "Иногда вы хотите, чтобы текст отображался в выводе, только если поле не пустое. Обычный случай - это series и series_index, когда вы не хотите ничего или два значения, разделенные дефисом. calibre обрабатывает этот случай, используя специальный синтаксис ``шаблонного выражения``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:65
msgid ""
"For example and using the above Foundation example, assume you want the "
"template to produce `Foundation - 3 - Second Foundation`. This template "
"produces that output:"
msgstr "Например, используя приведенный выше пример Foundation, предположим, что вы хотите, чтобы шаблон создавал `Foundation - 3 - Second Foundation`. Этот шаблон производит такой вывод:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:67
msgid "``{series} - {series_index} - {title}``"
msgstr "``{series} - {series_index} - {title}``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:69
msgid ""
"However, if a book has no series the template will produce `- - the title`, "
"which is probably not what you want. Generally, people want the result be "
"the title without the extraneous hyphens. You can accomplish this using the "
"following template syntax:"
msgstr "Однако, если в книге нет серии, шаблон создаст `- - title`, что, вероятно, не то, что вам нужно. Обычно люди хотят, чтобы в результате получился заголовок без лишних дефисов. Вы можете сделать это, используя следующий синтаксис шаблона:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:71
msgid "``{field:|prefix_text|suffix_text}``"
msgstr "``{field:|prefix_text|suffix_text}``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:73
msgid ""
"This ``template expression`` says that if ``field`` has the value `XXXX` "
"then the result will be `prefix_textXXXXXsuffix_text`. If ``field`` is empty"
" (has no value) then the result will be the empty string (nothing) because "
"the prefix and suffix are ignored. The prefix and suffix can contain blanks."
msgstr "Это ``шаблонное выражение`` говорит, что если ``field`` имеет значение ``XXXX``, то результатом будет ``prefix_textXXXXXsuffix_text``. Если поле пусто (не имеет значения), результатом будет пустая строка (ничего), потому что префикс и суффикс игнорируются. Префикс и суффикс могут содержать пробелы."

#: ../../__w/calibre/calibre/manual/template_lang.rst:75
msgid ""
"**Do not use subtemplates (`{ ... }`) or functions (see below) in the prefix"
" or the suffix.**"
msgstr "**Не используйте подшаблоны (`{ ... }`) или функции (см. Ниже) в префиксе или суффиксе.**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:77
msgid ""
"Using this syntax, we can solve the above no-series problem with the "
"template::"
msgstr "Используя этот синтаксис, мы можем решить указанную выше проблему без серии с шаблоном::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:81
msgid ""
"The hyphens will be included only if the book has a series index, which it "
"has only if it has a series. Continuing the Foundation example again, the "
"template will produce `Foundation - 1 - Second Foundation`."
msgstr "Дефисы будут добавлены только в том случае, если у книги есть индекс серии, который есть только в том случае, если в ней есть серия. Продолжая пример с Foundation снова, шаблон создаст `Foundation - 1 - Second Foundation`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:83
#: ../../__w/calibre/calibre/manual/template_lang.rst:260
msgid "Notes:"
msgstr "Примечания:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:85
msgid ""
"You must include the colon after the ``lookup name`` if you are using a "
"prefix or a suffix."
msgstr "Вы должны включить двоеточие после ``имени поиска``, если используете префикс или суффикс."

#: ../../__w/calibre/calibre/manual/template_lang.rst:86
msgid ""
"You must either use either no or both ``|`` characters. Using one, as in "
"``{field:| - }``, is not allowed."
msgstr "Вы должны использовать либо никакой, либо оба символа ``|``. Использовать один, как в ``{field:| -}``, не допускается."

#: ../../__w/calibre/calibre/manual/template_lang.rst:87
msgid ""
"It is OK to provide no text for either the prefix or the suffix, such as in "
"``{series:|| - }``. The template ``{title:||}`` is the same as ``{title}``."
msgstr "Допускается отсутствие текста для префикса или суффикса, например, в ``{series:|| -}``. Шаблон ``{title:||}`` такой же, как ``{title}``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:89
msgid "**Formatting**"
msgstr "**Форматирование**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:91
msgid ""
"Suppose you want the ``series_index`` to be formatted as three digits with "
"leading zeros. This does the trick:"
msgstr "Предположим, вы хотите, чтобы ``series_index`` был отформатирован как три цифры с ведущими нулями. Это помогает:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:93
msgid "``{series_index:0>3s}`` - Three digits with leading zeros"
msgstr "``{series_index: 0>3s}`` - три цифры с ведущими нулями"

#: ../../__w/calibre/calibre/manual/template_lang.rst:95
msgid "For trailing zeros, use:"
msgstr "Для завершающих нулей используйте:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:97
msgid "``{series_index:0<3s}`` - Three digits with trailing zeros"
msgstr "``{series_index: 0<3s}``- три цифры с завершающими нулями"

#: ../../__w/calibre/calibre/manual/template_lang.rst:99
msgid ""
"If you use series indices with fractional values, e.g., 1.1, you might want "
"the decimal points to line up. For example, you might want the indices 1 and"
" 2.5 to appear as 01.00 and 02.50 so that they will sort correctly on a "
"device that does lexical sorting. To do this, use:"
msgstr "Если вы используете индексы серий с дробными значениями, например 1.1, и нужно чтобы десятичные точки совпадали. Например, чтобы индексы 1 и 2.5 отображались как 01.00 и 02.50 и правильно сортировались на устройстве, которое выполняет лексическую сортировку. Для этого используйте:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:101
msgid ""
"``{series_index:0>5.2f}`` - Five characters consisting of two digits with "
"leading zeros, a decimal point, then 2 digits after the decimal point."
msgstr "``{series_index: 05.2f}`` - пять символов, состоящих из двух цифр с ведущими нулями, десятичной точкой и двумя цифрами после десятичной точки."

#: ../../__w/calibre/calibre/manual/template_lang.rst:103
msgid "If you want only the first two letters of the data, use:"
msgstr "Если вам нужны только первые две буквы данных, используйте:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:105
msgid ""
"``{author_sort:.2}`` - Only the first two letters of the author sort name"
msgstr "``{author_sort:.2}`` - Только первые две буквы сортировочного имени автора"

#: ../../__w/calibre/calibre/manual/template_lang.rst:107
msgid ""
"Much of the calibre template language formatting comes from Python. For more"
" details on the syntax of these advanced formatting operations see the "
"`Python documentation "
"<https://docs.python.org/3/library/string.html#formatstrings>`_."
msgstr "Большая часть форматирования языка шаблонов calibre из Python. Дополнительные сведения о синтаксисе расширенных операций форматирования см. в `Python documentation <https://docs.python.org/3/library/string.html#formatstrings>`_."

#: ../../__w/calibre/calibre/manual/template_lang.rst:111
msgid "Using templates to define custom columns"
msgstr "Использование шаблонов для определения пользовательских столбцов"

#: ../../__w/calibre/calibre/manual/template_lang.rst:113
msgid ""
"Templates can be used to display information that isn't in calibre metadata,"
" or to display metadata differently from calibre's normal format. For "
"example, you might want to show the ``ISBN``, a field that calibre does not "
"display. You can accomplish this creating a custom column with the type "
"`Column built from other columns` (hereafter called `composite columns`) and"
" providing a template to generate the displayed text. The column will "
"display the result of evaluating the template. For example, to display the "
"ISBN, create the column and enter ``{identifiers:select(isbn)}`` in the "
"template box. To display a column containing the values of two series custom"
" columns, separated by a comma, use ``{#series1:||,}{#series2}``."
msgstr "Шаблоны могут использоваться для отображения информации, которая не входит в метаданные calibre, или для отображения метаданных, отличных от обычного формата calibre. Например, чтобы отобразить ``ISBN``, поле, которое штатно не отображается в calibre. Создайте настраиваемый столбец с типом `Столбец, построенный из других столбцов` (в дальнейшем называемый `составные столбцы`) и предоставьте шаблон для генерации отображаемого текста. В столбце отобразится результат оценки шаблона. Чтобы отобразить ISBN, создайте составной столбец и введите ``{identifiers:select (isbn)}`` в поле шаблона. Чтобы отобразить столбец, содержащий значения двух пользовательских столбцов серий, разделённых запятой, используйте ``{#series1:||,}{#series2}``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:115
msgid "Composite columns can use any template option, including formatting."
msgstr "В составных столбцах можно использовать любой параметр шаблона, включая форматирование."

#: ../../__w/calibre/calibre/manual/template_lang.rst:117
msgid ""
"Note: You cannot edit the data displayed in a composite column. Instead you "
"edit the source columns. If you edit a composite column, for example by "
"double-clicking it, calibre will open the template for editing, not the "
"underlying data."
msgstr "Примечание. Вы не можете редактировать данные, отображаемые в составном столбце. Вместо этого вы редактируете исходные столбцы. Если вы редактируете составной столбец, например, дважды щелкнув по нему, calibre откроет для редактирования шаблон, а не базовые данные."

#: ../../__w/calibre/calibre/manual/template_lang.rst:122
msgid "Using functions in templates - Single Function Mode"
msgstr "Использование функций в шаблонах - режим одной функции"

#: ../../__w/calibre/calibre/manual/template_lang.rst:124
msgid ""
"Suppose you want to display the value of a field in upper case when that "
"field is normally in title case. You can do this using `template functions`."
" For example, to display the title in upper case use the ``uppercase`` "
"function, as in ``{title:uppercase()}``. To display it in title case, use "
"``{title:titlecase()}``."
msgstr "Предположим, вы хотите отобразить значение поля в верхнем регистре, когда это поле обычно находится в регистре заголовков. Вы можете сделать это с помощью шаблонных функций. Например, чтобы отобразить заголовок в верхнем регистре, используйте функцию ``uppercase``, как в ``{title:uppercase()}``. Чтобы отобразить его в регистре заголовка, используйте ``{title:titlecase()}``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:126
msgid ""
"Functions go into the format part of the template, after the ``:`` and "
"before the first ``|`` or the closing ``}`` if no prefix/suffix is used. If "
"you have both a format and a function reference, the function comes after a "
"second ``:``.  Functions return the value of the column specified in the "
"template, suitably modified."
msgstr "Функции входят в форматную часть шаблона после ``:`` и перед первым ``|`` или закрывающим ``}``, если не используется префикс/суффикс. Если у вас есть и формат, и ссылка на функцию, функция появляется после второго ``:``. Функции возвращают соответствующее измененное значение столбца, указанного в шаблоне."

#: ../../__w/calibre/calibre/manual/template_lang.rst:128
msgid "The syntax for using functions is one of::"
msgstr "Синтаксис использования функций - один из::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:135
msgid ""
"Function names must always be followed by opening and closing parentheses. "
"Some functions require extra values (arguments), and these go inside the "
"parentheses. Arguments are separated by commas. Literal commas (commas as "
"text, not argument separators) must be preceded by a backslash (``\\``) . "
"The last (or only) argument cannot contain a textual closing parenthesis."
msgstr "За именами функций всегда должны стоять открывающие и закрывающие круглые скобки. Некоторым функциям требуются дополнительные значения (аргументы), и они заключаются в круглые скобки. Аргументы разделяются запятыми. Буквальным запятым (запятым как тексту, а не разделителям аргументов) должна предшествовать обратная косая черта (``\\\\``). Последний (или единственный) аргумент не может содержать закрывающую текстовую скобку."

#: ../../__w/calibre/calibre/manual/template_lang.rst:137
msgid ""
"Functions are evaluated before format specifications and the prefix/suffix. "
"See further down for an example of using both a format and a function."
msgstr "Функции оцениваются до спецификации формата и префикса/суффикса. См. Ниже пример использования формата и функции."

#: ../../__w/calibre/calibre/manual/template_lang.rst:139
msgid ""
"**Important**: If you have programming experience, please note that the "
"syntax in `Single Function Mode` is not what you expect. Strings are not "
"quoted and spaces are significant. All arguments are considered to be "
"constants; there are no expressions."
msgstr "**Важно**: если у вас есть опыт программирования, обратите внимание, что синтаксис в `Single Function Mode` не соответствует вашим ожиданиям. Строки не заключаются в кавычки, а пробелы имеют значение. Все аргументы считаются константами; нет выражений."

#: ../../__w/calibre/calibre/manual/template_lang.rst:141
msgid ""
"**Do not use subtemplates (`{ ... }`) as function arguments.** Instead, use "
":ref:`Template Program Mode <template_mode>` and :ref:`General Program Mode "
"<general_mode>`."
msgstr "**Не используйте подшаблоны (`{ ... }`) в качестве аргументов функции.** Вместо этого используйте :ref:`Template Program Mode <template_mode>` и :ref:`General Program Mode <general_mode>`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:143
msgid ""
"Some functions require regular expressions. In the template language regular"
" expression matching is case-insensitive."
msgstr "Для некоторых функций требуются регулярные выражения. В языке шаблонов сопоставление регулярных выражений производится без учета регистра."

#: ../../__w/calibre/calibre/manual/template_lang.rst:145
msgid ""
"In the function documentation below, the notation ``[something]*`` means "
"that ``something`` can be repeated zero or more times. The notation "
"``[something]+`` means that the ``something`` is repeated one or more times "
"(must exist at least one time)."
msgstr "В документации по функциям ниже обозначение ``[something]*`` означает, что ``something`` может повторяться ноль или более раз. Обозначение ``[что-то]+`` означает, что ``что-то`` повторяется один или несколько раз (должно существовать хотя бы один раз)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:147
msgid "The functions intended for use in Single Function Mode are:"
msgstr "Функции, предназначенные для использования в режиме одной функции:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:150
msgid ""
"``capitalize()`` -- returns the value with the first letter upper case and "
"the rest lower case."
msgstr "``capitalize()`` -- возвращает значение, в котором первая буква в верхнем регистре, а остальные в нижнем регистре."

#: ../../__w/calibre/calibre/manual/template_lang.rst:151
msgid ""
"``contains(pattern, text if match, text if not match)`` -- checks if the "
"value is matched by the regular expression ``pattern``. Returns ``text if "
"match`` if the pattern matches the value, otherwise returns ``text if no "
"match``."
msgstr "``содержит (шаблон, текст в случае совпадения, текст в случае несовпадения)`` - проверяет, соответствует ли значение регулярному выражению ``паттерн``. Возвращает ``текст при совпадении``, если паттерн соответствует значению, в противном случае возвращает ``текст при отсутствии совпадения``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:152
msgid ""
"``count(separator)`` -- interprets the value as a list of items separated by"
" ``separator`` and returns the number of items in the list. Most lists use a"
" comma as the separator, but ``authors`` uses an ampersand (&). Examples: "
"``{tags:count(,)}``, ``{authors:count(&)}``. Aliases: ``count()``, "
"``list_count()``"
msgstr "``count(separator)`` - интерпретирует значение как список элементов, разделенных разделителем, и возвращает количество элементов в списке. В большинстве списков в качестве разделителя используется запятая, но в словах «авторы» используется амперсанд (&). Примеры: ``{tags:count(,)}``, ``{authors:count(&)}``. Псевдонимы: ``count()``, ``list_count()``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:153
msgid ""
"``format_number(template)`` -- interprets the value as a number and formats "
"that number using a Python formatting template such as ``{0:5.2f}`` or "
"``{0:,d}`` or ``${0:5,.2f}``. The formatting template must begin with "
"``{0:`` and end with ``}`` as in the above examples. Exception: you can "
"leave off the leading \"{0:\" and trailing \"}\" if the format template "
"contains only a format. See the template language and the `Python "
"documentation "
"<https://docs.python.org/3/library/string.html#formatstrings>`_ for more "
"examples. Returns the empty string if formatting fails."
msgstr "``format_number (template)`` - интерпретирует значение как число и форматирует это число, используя шаблон форматирования Python, такой как ``{0:5.2f}`` или ``{0:,d}` или ``${0:5,.2f}``. Шаблон форматирования должен начинаться с ``{0:`` и заканчиваться ``}``, как в приведенных выше примерах. Исключение: вы можете опустить начальные ``{0:`` и завершающие ``}``, если шаблон формата содержит только формат. См. Дополнительные примеры в языке шаблонов и в `документации Python `_. Возвращает пустую строку, если форматирование не удалось."

#: ../../__w/calibre/calibre/manual/template_lang.rst:154
msgid ""
"``human_readable()`` -- expects the value to be a number and returns a "
"string representing that number in KB, MB, GB, etc."
msgstr "``human_readable()`` - ожидает, что значение будет числом, и возвращает строку, представляющую это число в КБ, МБ, ГБ и т. д."

#: ../../__w/calibre/calibre/manual/template_lang.rst:155
msgid ""
"``ifempty(text if empty)`` -- if the value is not empty then return the "
"value of the field, otherwise return `text if empty`."
msgstr "``ifempty(text if empty)`` - если значение не пустое, то вернуть значение поля, иначе вернуть текст if empty."

#: ../../__w/calibre/calibre/manual/template_lang.rst:156
msgid ""
"``in_list(separator, [ pattern, found_val, ]* not_found_val)`` -- interpret "
"the value as a list of items separated by ``separator``, checking the "
"``pattern`` against each item in the list. If the ``pattern`` matches an "
"item then return ``found_val``, otherwise return ``not_found_val``. The pair"
" ``pattern`` and ``found_value`` can be repeated as many times as desired, "
"permitting returning different values depending on the item's value. The "
"patterns are checked in order, and the first match is returned."
msgstr "``in_list(separator, [ pattern, found_val, ]* not_found_val)`` - интерпретирует значение как список элементов, разделенных разделителем, проверяя ``pattern`` по каждому элементу в списке. Если шаблон соответствует элементу, вернуть ``found_val``, иначе вернуть ``not_found_val``. Пара ``pattern`` и ``found_value`` может повторяться сколько угодно раз, что позволяет возвращать разные значения в зависимости от значения элемента. Шаблоны проверяются по порядку, и возвращается первое совпадение."

#: ../../__w/calibre/calibre/manual/template_lang.rst:157
msgid ""
"``language_strings(localize)`` -- return the `language names "
"<https://www.loc.gov/standards/iso639-2/php/code_list.php>`_ for the "
"`language codes <https://www.loc.gov/standards/iso639-2/php/code_list.php>`_"
" passed in as the value. Example: ``{languages:language_strings()}``.  If "
"``localize`` is zero, return the strings in English. If ``localize`` is not "
"zero, return the strings in the language of the current locale. "
"``Lang_codes`` is a comma-separated list."
msgstr "``language_strings(localize)`` -- возвращает `language names <https://www.loc.gov/standards/iso639-2/php/code_list.php>`_ для `language codes <https://www.loc.gov/standards/iso639-2/php/code_list.php>`_ , переданных в качестве значения. Пример: ``{languages:language_strings()}``. Если ``localize`` равно нулю, вернуть строки на английском языке. Если ``localize`` не равно нулю, вернуть строки на языке текущей локали. ``Lang_codes`` - это список, разделённый запятыми."

#: ../../__w/calibre/calibre/manual/template_lang.rst:158
msgid ""
"``list_item(index, separator)`` -- interpret the value as a list of items "
"separated by ``separator``, returning the 'index'th item. The first item is "
"number zero. The last item has the index ``-1`` as in "
"``list_item(-1,separator)``. If the item is not in the list, then the empty "
"string is returned."
msgstr "``list_item(индекс, разделитель)`` -- обрабатывает значение как список элементов, разделённых ``разделителем``, возвращая элемент с соответствующим индексом. Первый элемент имеет нулевой индекс. К последнему элементу можно обратиться по индексу ``-1``, напр. ``list_item(-1,разделитель)``. Если элемент отсутствует, возвращается пустая строка."

#: ../../__w/calibre/calibre/manual/template_lang.rst:159
msgid ""
"``lookup([ pattern, key, ]* else_key)`` -- The patterns will be checked "
"against the value in order. If a pattern matches then the value of the field"
" named by ``key`` is returned. If no pattern matches then the value of the "
"field named by ``else_key`` is returned. See``switch`` (below)."
msgstr "``lookup([ pattern, key, ]* else_key)`` --  Шаблоны будут проверяться по значению по порядку. Если шаблон совпадает, возвращается значение поля, названного ``key``. Если ни один шаблон не совпадает, возвращается значение поля с именем ``else_key``. Смотрите ``switch`` (ниже)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:160
msgid "``lowercase()`` -- returns the value of the field in lower case."
msgstr "``lowercase()`` -- возвращает значение поля в нижнем регистре."

#: ../../__w/calibre/calibre/manual/template_lang.rst:161
msgid ""
"``rating_to_stars(use_half_stars)`` -- Returns the rating as string of star "
"(``★``) characters. The value must be a number between 0 and 5. Set "
"use_half_stars to 1 if you want half star characters for fractional numbers "
"available with custom ratings columns."
msgstr "``rating_to_stars(use_half_stars)`` -- Возвращает рейтинг в виде строки, состоящей из звездочек (``★``'). Значение должно быть числом от 0 до 5. Задайте для use_half_stars значение 1, если вы хотите, чтобы символы половинной звезды для дробных чисел были доступны в настраиваемых столбцах рейтингов."

#: ../../__w/calibre/calibre/manual/template_lang.rst:162
msgid ""
"``re(pattern, replacement)`` -- return the value after applying the regular "
"expression. All instances of ``pattern`` in the value are replaced with "
"``replacement``. The template language uses case insensitive `Python regular"
" expressions <https://docs.python.org/3/library/re.html>`_."
msgstr "``re(pattern, replacement)`` --  вернуть значение после применения регулярного выражения. Все вхождения ``pattern`` в значении заменяются на ``replacement``. В языке шаблонов используются `Python regular expressions `_."

#: ../../__w/calibre/calibre/manual/template_lang.rst:163
msgid ""
"``select(key)`` -- interpret the value as a comma-separated list of items "
"with each item having the form ``id:value`` (the calibre ``identifier`` "
"format). The function finds the first pair with the id equal to key and "
"returns the corresponding value. If no id matches then the function returns "
"the empty string."
msgstr "``select(ключ)`` -- обрабатывает значение как разделённый запятыми список элементов вида ``идентификатор:значение`` (формат ``идентификаторов`` calibre). Функция находит первую пару с совпадающим с ``ключом`` идентификатором, и возвращает соответствующее значение. При отсутствии совпадений возвращается пустая строка."

#: ../../__w/calibre/calibre/manual/template_lang.rst:164
msgid ""
"``shorten(left chars, middle text, right chars)`` -- Return a shortened "
"version of the value, consisting of ``left chars`` characters from the "
"beginning of the value, followed by ``middle text``, followed by ``right "
"chars`` characters from the end of the value. ``Left chars`` and ``right "
"chars`` must be non-negative integers. Example: assume you want to display "
"the title with a length of at most 15 characters in length. One template "
"that does this is ``{title:shorten(9,-,5)}``. For a book with the title "
"`Ancient English Laws in the Times of Ivanhoe` the result will be `Ancient "
"E-anhoe`: the first 9 characters of the title, a ``-``, then the last 5 "
"characters. If the value's length is less than ``left chars`` + ``right "
"chars`` + the length of ``middle text`` then the value will be returned "
"unchanged. For example, the title `The Dome` would not be changed."
msgstr "``shorten(left chars, middle text, right chars)`` -- Возвращает сокращенную версию значения, состоящую из символов ``left chars`` с начала значения, за которыми следует ``middle text``, за которыми следуют символы ``right chars`` с конца значения. ``left chars`` и ``right chars`` должны быть неотрицательными целыми числами. Пример: предположим, что вы хотите отобразить заголовок длиной не более 15 символов. Один из шаблонов, который делает это, - ``{title:short(9,-,5)}``. Для книги с названием «Ancient English Laws in the Times of Ivanhoe» результатом будет ``Ancient E-nhoe``: первые 9 символов названия, ``-``, затем последние 5 символов. Если длина значения меньше, чем ``левые символы`` + ``правые символы`` + длина ``среднего текста``, то значение будет возвращено без изменений. Например, название `The Dome` не изменится."

#: ../../__w/calibre/calibre/manual/template_lang.rst:165
msgid ""
"``str_in_list(separator, [ string, found_val, ]+ not_found_val)`` -- "
"interpret the value as a list of items separated by ``separator`` then "
"compare ``string`` against each value in the list. The ``string`` is not a "
"regular expression. If ``string`` is equal to any item (ignoring case) then "
"return the corresponding ``found_val``. If ``string`` contains "
"``separators`` then it is also treated as a list and each subvalue is "
"checked. The ``string`` and ``found_value`` pairs can be repeated as many "
"times as desired, permitting returning different values depending on "
"string's value. If none of the strings match then ``not_found_value`` is "
"returned. The strings are checked in order. The first match is returned."
msgstr "``str_in_list(separator, [ string, found_val, ]+ not_found_val)`` -- интерпретирует значение как список элементов, разделенных ``separator``, затем сравнивает ``string`` с каждым значением в списке. Строка не является регулярным выражением. Если строка равна любому элементу (без учета регистра), вернуть соответствующее значение ``found_val``. Если строка содержит разделители, она также рассматривается как список, и каждое подзначение проверяется. Пары ``string`` и ``found_value`` могут повторяться сколько угодно раз, что позволяет возвращать разные значения в зависимости от значения строки. Если ни одна из строк не совпадает, возвращается ``not_found_value``. Строки проверяются по порядку. Возвращается первое совпадение."

#: ../../__w/calibre/calibre/manual/template_lang.rst:166
msgid ""
"``subitems(start_index, end_index)`` -- This function breaks apart lists of "
"tag-like hierarchical items such as genres. It interprets the value as a "
"comma-separated list of tag-like items, where each item is a period-"
"separated list. It returns a new list made by extracting from each item the "
"components from ``start_index`` to ``end_index``, then merging the results "
"back together. Duplicates are removed. The first subitem in a period-"
"separated list has an index of zero. If an index is negative then it counts "
"from the end of the list. As a special case, an end_index of zero is assumed"
" to be the length of the list."
msgstr "``subitems(нач_индекс, кон_индекс)`` -- Функция разбивает на части списки иерерхических тегов, например жанров. Значение обрабатывается как разделённый запятыми список тегов, каждый элемент в котором -- разделенный точками список. Она возвращает новый список, извлекая из каждого элемента компоненты от ``нач_индекса`` до ``кон_индекса``, объединяя полученные результаты без повторов. Первый компонент в разделённом точками списке имеет нулевой индекс. Если индекс отрицательный, то он отсчитыватеся от конца списка. Нулевое значение кон_индекса означает длину списка."

#: ../../__w/calibre/calibre/manual/template_lang.rst:168
#: ../../__w/calibre/calibre/manual/template_lang.rst:388
msgid "Examples:"
msgstr "Примеры:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:170
msgid "Assuming a #genre column containing `A.B.C`:"
msgstr "Если столбец #genre содержит `A.B.C`:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:172
msgid "``{#genre:subitems(0,1)}`` returns \"A\""
msgstr "``{#genre:subitems(0,1)}`` вернет \"A\""

#: ../../__w/calibre/calibre/manual/template_lang.rst:173
msgid "``{#genre:subitems(0,2)}`` returns \"A.B\""
msgstr "``{#genre:subitems(0,2)}`` вернет \"A.B\""

#: ../../__w/calibre/calibre/manual/template_lang.rst:174
msgid "``{#genre:subitems(1,0)}`` returns \"B.C\""
msgstr "``{#genre:subitems(1,0)}`` вернет \"B.C\""

#: ../../__w/calibre/calibre/manual/template_lang.rst:176
msgid "Assuming a #genre column containing \"A.B.C, D.E\":"
msgstr "Если столбец #genre содержит \"A.B.C, D.E\":"

#: ../../__w/calibre/calibre/manual/template_lang.rst:178
msgid "``{#genre:subitems(0,1)}`` returns \"A, D\""
msgstr "``{#genre:subitems(0,1)}`` вернет \"A, D\""

#: ../../__w/calibre/calibre/manual/template_lang.rst:179
msgid "``{#genre:subitems(0,2)}`` returns \"A.B, D.E\""
msgstr "``{#genre:subitems(0,2)}`` вернет \"A.B, D.E\""

#: ../../__w/calibre/calibre/manual/template_lang.rst:181
msgid ""
"``sublist(start_index, end_index, separator)`` -- interpret the value as a "
"list of items separated by ``separator``, returning a new list made from the"
" items from ``start_index`` to ``end_index``. The first item is number zero."
" If an index is negative, then it counts from the end of the list. As a "
"special case, an end_index of zero is assumed to be the length of the list."
msgstr "``sublist(start_index, end_index, separator)`` -- интерпретировать значение как список элементов, разделенных ``separator``, возвращая новый список, составленный из элементов от ``start_index`` до ``end_index``. Первый элемент - номер ноль. Если индекс отрицательный, он отсчитывается с конца списка. В качестве особого случая предполагается, что ``end_index``, равный нулю, является длиной списка."

#: ../../__w/calibre/calibre/manual/template_lang.rst:183
msgid ""
"Examples assuming that the tags column (which is comma-separated) contains "
"\"A, B ,C\":"
msgstr "Примеры, предполагающие, что столбец тегов (который разделён запятыми) содержит ''A, B, C'':"

#: ../../__w/calibre/calibre/manual/template_lang.rst:185
msgid "``{tags:sublist(0,1,\\,)}`` returns \"A\""
msgstr "``{tags:sublist(0,1,\\,)}`` вернет \"A\""

#: ../../__w/calibre/calibre/manual/template_lang.rst:186
msgid "``{tags:sublist(-1,0,\\,)}`` returns \"C\""
msgstr "``{tags:sublist(-1,0,\\,)}`` вернет \"C\""

#: ../../__w/calibre/calibre/manual/template_lang.rst:187
msgid "``{tags:sublist(0,-1,\\,)}`` returns \"A, B\""
msgstr "``{tags:sublist(0,-1,\\,)}`` вернет \"A, B\""

#: ../../__w/calibre/calibre/manual/template_lang.rst:189
msgid ""
"``swap_around_articles(separator)`` -- returns the value with articles moved"
" to the end. The value can be a list, in which case each item in the list is"
" processed. If the value is a list then you must provide the ``separator``. "
"If no ``separator`` is provided then the value is treated as being a single "
"value, not a list. The `articles` are those used by calibre to generate the "
"``title_sort``."
msgstr "``swap_around_articles(separator)`` -- возвращает значение со статьями, перемещёнными в конец. Значение может быть списком, и в этом случае обрабатывается каждый элемент в списке. Если значение является списком, вы должны указать ``separator``. Если ``separator`` не указан, значение рассматривается как одно значение, а не как список. Статьи `articles` - это те, которые используются calibre для создания ``title_sort``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:190
msgid ""
"``swap_around_comma()`` -- given a value of the form ``B, A``, return ``A "
"B``. This is most useful for converting names in LN, FN format to FN LN. If "
"there is no comma in the value then the function returns the value "
"unchanged."
msgstr "``swap_around_comma()`` -- если значение имеет вид ``Б, А``, возвращает ``А Б``. Это наиболее полезно для преобразования имён вида «Ф, И О» к виду «И О Ф». Если значение не содержит запятой, то оно возвращается без изменений."

#: ../../__w/calibre/calibre/manual/template_lang.rst:191
msgid ""
"``switch([pattern, value,]+ else_value)`` -- for each ``pattern, value`` "
"pair, checks if the value matches the regular expression ``pattern`` and if "
"so returns the associated ``value``. If no ``pattern`` matches, then "
"``else_value`` is returned. You can have as many ``pattern, value`` pairs as"
" you wish. The first match is returned."
msgstr "``switch([pattern, value,]+ else_value)`` -- для каждой пары ``pattern, value``, проверяет, соответствует ли значение регулярному выражению `pattern``, и если да, возвращает связанное `` value``. Если нет совпадений с шаблоном, возвращается else_value. У вас может быть столько пар ``pattern, value``, сколько хотите. Возвращается первое совпадение."

#: ../../__w/calibre/calibre/manual/template_lang.rst:192
msgid ""
"``test(text if not empty, text if empty)`` -- return ``text if not empty`` "
"if the value is not empty, otherwise return ``text if empty``."
msgstr "``test(если_не_пусто, если_пусто)`` -- возвращает ``если_не_пусто`` если значение не пусто, в противном случае возвращает ``если_пусто``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:193
msgid "``titlecase()`` -- returns the value of the field in title case."
msgstr "``titlecase()`` -- возвращает значение поля в заглавном регистре."

#: ../../__w/calibre/calibre/manual/template_lang.rst:194
msgid ""
"``transliterate()`` -- Return a string in a latin alphabet formed by "
"approximating the sound of the words in the source field. For example, if "
"the source field is ``Фёдор Миха́йлович Достоевский`` this function returns "
"``Fiodor Mikhailovich Dostoievskii``."
msgstr "``transliterate()`` -- Возвращает строку в латинском алфавите, образованную приближением звучания слов в исходном поле. Например, если исходное поле - ``Фёдор Миха́йлович Достоевский``, эта функция возвращает ``Fiodor Mikhailovich Dostoievskii``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:195
msgid "``uppercase()`` -- returns the value of the field in upper case."
msgstr "``uppercase()`` -- возвращает значение поля в верхнем регистре."

#: ../../__w/calibre/calibre/manual/template_lang.rst:197
msgid "**Using functions and formatting in the same template**"
msgstr "**Использование функций и форматирования в одном шаблоне**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:199
msgid ""
"Suppose you have an integer custom column ``#myint`` that you want displayed"
" with leading zeros, as in ``003``. One way to do this is to use a format of"
" ``0>3s``. However, by default if a number (integer or float) equals zero "
"then the value is displayed as the empty string so zero values will produce "
"the empty string, not ``000``. If you want to see ``000`` values then you "
"use both the format string and the ``ifempty`` function to change the empty "
"value back to a zero. The template would be::"
msgstr "Предположим, у вас есть целочисленный настраиваемый столбец ``#myint``, который вы хотите отображать с ведущими нулями, как в ``003``. Один из способов сделать это - использовать формат 03. Однако по умолчанию, если число (целое или с плавающей запятой) равно нулю, тогда значение отображается как пустая строка, поэтому нулевые значения будут давать пустую строку, а не ``000``. Если вы хотите увидеть значения ``000``, используйте как строку формата, так и функцию ifempty, чтобы изменить пустое значение обратно в ноль. Шаблон будет::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:203
msgid ""
"Note that you can use the prefix and suffix as well. If you want the number "
"to appear as ``[003]`` or ``[000]``, then use the template::"
msgstr "Обратите внимание, что вы также можете использовать префикс и суффикс. Если вы хотите, чтобы номер отображался как ``[003]`` или ``[000]``, то используйте шаблон::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:210
msgid "General Program Mode"
msgstr "Общий программный режим"

#: ../../__w/calibre/calibre/manual/template_lang.rst:212
msgid ""
"`General Program Mode` (`GPM`) replaces `template expressions` with a "
"program written in the `template language`. The syntax of the language is "
"defined by the following grammar::"
msgstr "``Общий программный режим`` (``GPM``) заменяет ``шаблонные выражения``  программой, написанной на ``языке шаблонов``. Синтаксис языка определяется следующей грамматикой::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:262
msgid ""
"a ``top_expression`` always has a value. The value of an ``expression_list``"
" is the value of the last ``top_expression`` in the list. For example, the "
"value of the expression list ``1;2;'foobar';3`` is ``3``."
msgstr "``top_expression`` всегда имеет значение. Значение ``expression_list`` - это значение последнего ``top_expression`` в списке. Например, значение списка выражений ``1;2;'foobar';3`` равно ``3``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:263
msgid "In a logical context, any non-empty value is ``True``"
msgstr "В логическом контексте любое непустое значение - ``True``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:264
msgid "In a logical context, the empty value is ``False``"
msgstr "В логическом контексте пустым значением является ``False``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:265
msgid ""
"Strings and numbers can be used interchangeably. For example, ``10`` and "
"``'10'`` are the same thing."
msgstr "Строки и числа могут использоваться как взаимозаменяемые. Например, ``10`` и ``'10'`` - это одно и то же."

#: ../../__w/calibre/calibre/manual/template_lang.rst:266
msgid ""
"Comments are lines starting with a '#' character. Comments beginning later "
"in a line are not supported."
msgstr "Комментарии - это строки, начинающиеся с символа '#'. Комментарии, начинающиеся позже в строке, не поддерживаются."

#: ../../__w/calibre/calibre/manual/template_lang.rst:268
msgid "**Operator precedence**"
msgstr "**Приоритет оператора**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:270
msgid ""
"The operator precedence (order of evaluation) from highest (evaluated first)"
" to lowest (evaluated last) is:"
msgstr "Приоритет оператора (порядок оценки) от наивысшего (оценивается первым) до самого низкого (оценивается последним):"

#: ../../__w/calibre/calibre/manual/template_lang.rst:272
msgid ""
"Function calls, constants, parenthesized expressions, statement expressions,"
" assignment expressions, field references."
msgstr "Вызовы функций, константы, выражения в скобках, выражения операторов, выражения присваивания, ссылки на поля."

#: ../../__w/calibre/calibre/manual/template_lang.rst:273
msgid ""
"Unary plus (``+``) and minus (``-``). These operators evaluate right to "
"left."
msgstr "Унарный плюс (``+``) и минус (``-``). Эти операторы вычисляют справа налево."

#: ../../__w/calibre/calibre/manual/template_lang.rst:275
msgid ""
"These and all the other arithmetic operators return integers if the "
"expression results in a fractional part equal to zero. For example, if an "
"expression returns ``3.0`` it is changed to ``3``."
msgstr "Эти и все другие арифметические операторы возвращают целые числа, если результат выражения дает дробную часть, равную нулю. Например, если выражение возвращает ``3.0``, оно изменяется на ``3``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:276
msgid ""
"Multiply (``*``) and divide (``/``). These operators are associative and "
"evaluate left to right. Use parentheses if you want to change the order of "
"evaluation."
msgstr "Умножение (``*``) и деление (``/``). Эти операторы ассоциативны и выполняются слева направо. Используйте круглые скобки, если хотите изменить порядок оценки."

#: ../../__w/calibre/calibre/manual/template_lang.rst:277
msgid ""
"Add (``+``) and subtract (``-``). These operators are associative and "
"evaluate left to right."
msgstr "Сложение (``+``) и вычитание (``-``). Эти операторы ассоциативны и выполняются слева направо."

#: ../../__w/calibre/calibre/manual/template_lang.rst:278
msgid ""
"Numeric and string comparisons. These operators return ``'1'`` if the "
"comparison succeeds, otherwise the empty string (``''``). Comparisons are "
"not associative: ``a < b < c`` is a syntax error."
msgstr "Числовые и строковые сравнения. Эти операторы возвращают ``1``, если сравнение прошло успешно, в противном случае - пустую строку (``''``). Сравнения не ассоциативны: ``a < b < c`` - синтаксическая ошибка."

#: ../../__w/calibre/calibre/manual/template_lang.rst:279
msgid ""
"String concatenation (``&``). The ``&`` operator returns a string formed by "
"concatenating the left-hand and right-hand expressions. Example: ``'aaa' & "
"'bbb'`` returns ``'aaabbb'``. The operator is associative and evaluates left"
" to right."
msgstr "Конкатенация строк (``&``). Оператор ``&`` возвращает строку сформированную путем объединения левого и правого выражений. Пример: ``'aaa' & 'bbb'` возвращает ``'aaabbb'``. Оператор является ассоциативным и оценивает слева направо."

#: ../../__w/calibre/calibre/manual/template_lang.rst:280
msgid ""
"Unary logical not (``!``). This operator returns ``'1'`` if the expression "
"is False (evaluates to the empty string), otherwise ``''``."
msgstr "Унарное логическое НЕ (``!``). Этот оператор возвращает ``'1'``, если выражение ложно (возвращает пустую строку), в противном случае ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:281
msgid ""
"Logical and (``&&``). This operator returns '1' if both the left-hand and "
"right-hand expressions are True, or the empty string ``''`` if either is "
"False. It is associative, evaluates left to right, and does `short-"
"circuiting <https://chortle.ccsu.edu/java5/Notes/chap40/ch40_2.html>`_."
msgstr "Логическое и (``&&``). Этот оператор возвращает '1', если и левое, и правое выражения имеют значение True, или пустую строку ``''``, если любое из них имеет значение False. Он ассоциативен, вычисляется слева направо и выполняет `short-circuiting `_."

#: ../../__w/calibre/calibre/manual/template_lang.rst:282
msgid ""
"Logical or (``||``). This operator returns ``'1'`` if either the left-hand "
"or right-hand expression is True, or ``''`` if both are False. It is "
"associative, evaluates left to right, and does `short-circuiting "
"<https://chortle.ccsu.edu/java5/Notes/chap40/ch40_2.html>`_. It is an "
"`inclusive or`, returning ``'1'`` if both the left- and right-hand "
"expressions are True."
msgstr "Логическое ИЛИ (``||``). Этот оператор возвращает ``1``, если левое или правое выражение истинно, или ``''``, если оба ложны. Он ассоциативен, вычисляется слева направо и выполняет `short-circuiting `_. Это `включающее ИЛИ`, возвращающее``'1'``, если и левое, и правое выражения истинны."

#: ../../__w/calibre/calibre/manual/template_lang.rst:284
msgid "**Field references**"
msgstr "**Ссылки на поля**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:286
msgid ""
"A ``field_reference`` evaluates to the value of the metadata field named by "
"lookup name that follows the ``$`` or ``$$``. Using ``$`` is equivalent to "
"using the ``field()`` function. Using ``$$`` is equivalent to using the "
"``raw_field`` function. Examples::"
msgstr "``Field_reference`` оценивает значение поля метаданных, названного именем поиска, которое следует за ``$`` или ``$$``. Использование ``$`` эквивалентно использованию функции ``field()``. Использование ``$$`` эквивалентно использованию функции ``raw_field``. Примеры::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:293
msgid "**If expressions**"
msgstr "**If выражения** "

#: ../../__w/calibre/calibre/manual/template_lang.rst:295
msgid ""
"``If`` expressions first evaluate the ``condition``. If the ``condition`` is"
" True (a non-empty value) then the ``expression_list`` in the ``then`` "
"clause is evaluated. If it is False then if present the ``expression_list`` "
"in the ``elif`` or ``else`` clause is evaluated. The ``elif`` and ``else`` "
"parts are optional. The words ``if``, ``then``, ``elif``, ``else``, and "
"``fi`` are reserved; you cannot use them as identifier names. You can put "
"newlines and white space wherever they make sense. The ``condition`` is a "
"``top_expression`` not an ``expression_list``; semicolons are not allowed. "
"The ``expression_lists`` are semicolon-separated sequences of "
"``top_expressions``. An ``if`` expression returns the result of the last "
"``top_expression`` in the evaluated ``expression_list``, or the empty string"
" if no expression list was evaluated."
msgstr "Выражения ``if`` сначала оценивают условие. Если ``condition`` равно True (непустое значение), тогда ``expression_list`` в предложении ``then`` оценивается. Если оно равно False, то при его наличии вычисляется список выражений в предложении ``elif`` или ``else``. Части ``elif`` и ``else`` не являются обязательными. Слова ``if``, ``then``, ``elif``, ``else`` и ``fi`` зарезервированы; вы не можете использовать их в качестве имен идентификаторов. Вы можете помещать символы новой строки и пробелы везде, где они имеют смысл. ``condition`` - это ``top_expression``, а не ``expression_list``; точки с запятой не допускаются. ``expression_list`` - это разделенные точкой с запятой последовательности «top_expressions». Выражение ``if`` возвращает результат последнего выражения ``top_expression`` в вычисленном списке выражений или пустую строку, если список выражений не оценивался."

#: ../../__w/calibre/calibre/manual/template_lang.rst:297
msgid "Examples::"
msgstr "Примеры::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:310
msgid "Nested ``if`` example::"
msgstr "Пример вложенного ``if``::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:323
msgid ""
"As said above, an ``if`` produces a value. This means that all the following"
" are equivalent::"
msgstr "Как сказано выше, ``if`` выдаёт значение. Это означает, что всё следующее эквивалентно::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:329
msgid ""
"As a last example, this program returns the value of the ``series`` column "
"if the book has a series, otherwise the value of the ``title`` column::"
msgstr "В качестве последнего примера эта программа возвращает значение столбца ``series``, если в книге есть серия, в противном случае значение столбца ``title``::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:333
msgid "**For expressions**"
msgstr "**For выражения**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:335
msgid ""
"The ``for`` expression iterates over a list of values, processing them one "
"at a time. The ``list_expression`` must evaluate either to a metadata field "
"``lookup name`` e.g., ``tags`` or ``#genre``, or to a list of values. The "
":ref:`range() function <range_function>` (see below) generates a list of "
"numbers. If the result is a valid ``lookup name`` then the field's value is "
"fetched and the separator specified for that field type is used. If the "
"result isn't a valid lookup name then it is assumed to be a list of values. "
"The list is assumed to be separated by commas unless the optional keyword "
"``separator`` is supplied, in which case the list values must be separated "
"by the result of evaluating the ``separator_expr``. A separator cannot be "
"used if the list is generated by ``range()``. Each value in the list is "
"assigned to the specified variable then the ``expression_list`` is "
"evaluated. You can use ``break`` to jump out of the loop, and ``continue`` "
"to jump to the beginning of the loop for the next iteration."
msgstr "Выражение for выполняет итерацию по списку значений, обрабатывая их по одному. Выражение ``list_expression`` должно соответствовать либо полю метаданных ``lookup name``, например ``tags`` или ``# genre``, либо списку значений. Функция :ref:`range() <range_function>` (см. ниже) генерирует список чисел. Если результатом является допустимое ``lookup name``, тогда выбирается значение поля и используется разделитель, указанный для этого типа поля. Если результат не является допустимым именем поиска, предполагается, что это список значений. Предполагается, что список разделен запятыми, если не указано необязательное ключевое слово ``separator``. В этом случае значения списка должны быть разделены результатом вычисления ``separator_expr``. Каждое значение в списке присваивается указанной переменной, после чего вычисляется ``expression_list``. Вы можете использовать ``break``, чтобы выйти из цикла, и ``continue``, чтобы перейти к началу цикла для следующей итерации."

#: ../../__w/calibre/calibre/manual/template_lang.rst:337
msgid ""
"Example: This template removes the first hierarchical name for each value in"
" Genre (``#genre``), constructing a list with the new names::"
msgstr "Пример: этот шаблон удаляет первое иерархическое имя для каждого значения в жанре (``#genre``), создавая список с новыми именами::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:347
msgid ""
"If the original Genre is `History.Military, Science Fiction.Alternate "
"History, ReadMe` then the template returns `Military, Alternate History, "
"ReadMe`. You could use this template in calibre's :guilabel:`Edit metadata "
"in bulk -> Search & replace` with :guilabel:`Search for` set to ``template``"
" to strip off the first level of the hierarchy and assign the resulting "
"value to Genre."
msgstr "Если исходный жанр -  `History.Military, Science Fiction.Alternate History, ReadMe`, то шаблон возвращает `Military, Alternate History, ReadMe`. Вы можете использовать этот шаблон в calibre :guilabel:`Массовое редактирование метаданных - Поиск и замена` с помощью: guilabel:` Search for`, установленного на ``template``, чтобы удалить первый уровень иерархии и присвоить полученное значение Жанру."

#: ../../__w/calibre/calibre/manual/template_lang.rst:350
msgid ""
"Note: the last line in the template, ``new_tags``, isn't strictly necessary "
"in this case because ``for`` returns the value of the last top_expression in"
" the expression list. The value of an assignment is the value of its "
"expression, so the value of the ``for`` statement is what was assigned to "
"``new_tags``."
msgstr "Примечание: последняя строка в шаблоне, ``new_tags``, в этом случае не является строго необходимой, потому что ``for`` возвращает значение последнего ``top_expression`` в списке выражений. Значение присваивания - это значение его выражения, поэтому значение оператора ``for`` - это то, что было присвоено ``new_tags``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:352
msgid "**Function definition**"
msgstr "**Определение функции**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:354
msgid ""
"If you have code in a template that repeats then you can put that code into "
"a local function. The ``def`` keyword starts the definition. It is followed "
"by the function name, the argument list, then the code in the function. The "
"function definition ends with the ``fed`` keyword."
msgstr "Если у вас есть повторяющийся код в шаблоне, вы можете поместить этот код в локальную функцию. Ключевое слово ``def`` запускает определение. За ним следует имя функции, список аргументов, затем код функции. Определение функции заканчивается ключевым словом ``fed``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:356
msgid ""
"Arguments are positional. When a function is called the supplied arguments "
"are matched left to right against the defined parameters, with the value of "
"the argument assigned to the parameter. It is an error to provide more "
"arguments than defined parameters. Parameters can have default values, such "
"as ``a = 25``. If an argument is not supplied for that parameter then the "
"default value is used, otherwise the parameter is set to the empty string."
msgstr "Аргументы позиционные. При вызове функции предоставленные аргументы сопоставляются слева направо с определенными параметрами, при этом значение аргумента присваивается параметру. Будет ошибкой указывать больше аргументов, чем определено параметров. Параметры могут иметь значения по умолчанию, например ``a = 25``. Если для этого параметра не указан аргумент, используется значение по умолчанию, в противном случае параметру присваивается пустая строка."

#: ../../__w/calibre/calibre/manual/template_lang.rst:358
msgid "The ``return`` statement can be used in a local function."
msgstr "Оператор ``return`` можно использовать в локальной функции."

#: ../../__w/calibre/calibre/manual/template_lang.rst:360
msgid "A function must be defined before it can be used."
msgstr "Функция должна быть определена до того, как её можно будет использовать."

#: ../../__w/calibre/calibre/manual/template_lang.rst:362
msgid ""
"Example: This template computes an approximate duration in years, months, "
"and days from a number of days. The function ``to_plural()`` formats the "
"computed values. Note that the example also uses the ``&`` operator::"
msgstr "Пример. Этот шаблон вычисляет приблизительную продолжительность в годах, месяцах и днях из числа дней. Функция ``to_plural()`` форматирует вычисляемые значения. Обратите внимание, что в примере также используется оператор ``&``::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:377
msgid "**Relational operators**"
msgstr "**Операторы отношения**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:379
msgid ""
"Relational operators return ``'1'`` if the comparison is true, otherwise the"
" empty string ('')."
msgstr "Операторы отношения возвращают ``1``, если сравнение истинно, в противном случае - пустую строку ('')."

#: ../../__w/calibre/calibre/manual/template_lang.rst:381
msgid ""
"There are two forms of relational operators: string comparisons and numeric "
"comparisons."
msgstr "Есть две формы операторов отношения: сравнение строк и сравнение чисел."

#: ../../__w/calibre/calibre/manual/template_lang.rst:383
msgid ""
"String comparisons do case-insensitive string comparison using lexical "
"order. The supported string comparison operators are ``==``, ``!=``, ``<``, "
"``<=``, ``>``, ``>=``, ``in``, and ``inlist``. For the ``in`` operator, the "
"result of the left hand expression is interpreted as a regular expression "
"pattern. The ``in`` operator is True if the value of left-hand regular "
"expression matches the value of the right hand expression. The ``inlist`` "
"operator is true if the left hand regular expression matches any one of the "
"items in the right hand list where the items in the list are separated by "
"commas. The matches are case-insensitive."
msgstr "При сравнении строк выполняется сравнение строк без учета регистра с использованием лексического порядка. Поддерживаемые операторы сравнения строк:  ``==``, ``!=``, ``<``, ``<=``, ``>``, ``>=``, ``in`` и ``inlist``. Для оператора ``in`` результат левого выражения интерпретируется как шаблон регулярного выражения. Оператор ``in`` имеет значение True, если значение левого регулярного выражения совпадает со значением правого выражения. Оператор ``inlist`` верен, если левое регулярное выражение соответствует любому из элементов в правом списке, где элементы в списке разделены запятыми. В совпадениях регистр не учитывается."

#: ../../__w/calibre/calibre/manual/template_lang.rst:386
msgid ""
"The numeric comparison operators are ``==#``, ``!=#``, ``<#``, ``<=#``, "
"``>#``, ``>=#``. The left and right expressions must evaluate to numeric "
"values with two exceptions: both the string value \"None\" (undefined field)"
" and the empty string evaluate to the value zero."
msgstr "Операторы сравнения чисел: ``==#``, ``!=#``, ``<#``, ``<=#``, ``>#``, ``>=#``. Левое и правое выражения должны оцениваться как числовые значения с двумя исключениями: как строковое значение \"None\" (неопределенное поле), так и пустая строка оцениваются как нулевое значение."

#: ../../__w/calibre/calibre/manual/template_lang.rst:390
msgid ""
"``program: field('series') == 'foo'`` returns ``'1'`` if the book's series "
"is 'foo', otherwise ``''``."
msgstr "``program: field('series') == 'foo'`` возвращает ``'1'`` если серия книги - 'foo', иначе - ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:391
msgid ""
"``program: 'f.o' in field('series')`` returns ``'1'`` if the book's series "
"matches the regular expression ``f.o`` (e.g., `foo`, `Off Onyx`, etc.), "
"otherwise ``''``."
msgstr "``program: 'f.o' in field('series')`` вернёт ``'1'`` если серия книги соответствует регулярному выражению ``f.o`` (например, `foo`, `Off Onyx` и т. д.), иначе ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:392
msgid ""
"``program: 'science' inlist field('#genre')`` returns ``'1'`` if any of the "
"book's genres match the regular expression ``science``, e.g., `Science`, "
"`History of Science`, `Science Fiction` etc.), otherwise ``''``."
msgstr "``program: 'science' inlist field('#genre')`` вернёт ``'1'`` если какой-либо из жанров книги соответствует регулярному выражению ``science``, например, `Science`, `History of Science`, `Science Fiction` и т. д.), в противном случае ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:393
msgid ""
"``program: '^science$' inlist field('#genre')`` returns ``'1'`` if any of "
"the book's genres exactly match the regular expression ``^science$``, e.g., "
"`Science`. The genres `History of Science` and `Science Fiction` don't "
"match. If there isn't a match then returns ``''``."
msgstr "``program: '^science$' inlist field('#genre')`` вернёт ``'1'`` если какой-либо из жанров книги точно соответствует регулярному выражению ``^science$``, например `Science`. Жанры `History of Science` и `Science Fiction` не совпадают. Если совпадений нет, возвращается ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:394
msgid ""
"``program: if field('series') != 'foo' then 'bar' else 'mumble' fi`` returns"
" ``'bar'`` if the book's series is not ``foo``. Otherwise it returns "
"``'mumble'``."
msgstr "``program: if field('series') != 'foo' then 'bar' else 'mumble' fi`` returns ``'bar'`` если серия книги не ``foo``. В противном случае возвращается ``'mumble'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:395
msgid ""
"``program: if field('series') == 'foo' || field('series') == '1632' then "
"'yes' else 'no' fi`` returns ``'yes'`` if series is either ``'foo'`` or "
"``'1632'``, otherwise ``'no'``."
msgstr "``program: if field('series') == 'foo' || field('series') == '1632' then 'yes' else 'no' fi`` returns ``'yes'`` if series is either ``'foo'`` or ``'1632'``, иначе ``'no'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:396
msgid ""
"``program: if '^(foo|1632)$' in field('series') then 'yes' else 'no' fi`` "
"returns ``'yes'`` if series is either ``'foo'`` or ``'1632'``, otherwise "
"``'no'``."
msgstr "``program: if '^(foo|1632)$' in field('series') then 'yes' else 'no' fi`` returns ``'yes'`` if series is either ``'foo'`` or ``'1632'``, otherwise ``'no'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:397
msgid ""
"``program: if 11 > 2 then 'yes' else 'no' fi`` returns ``'no'`` because the "
"``>`` operator does a lexical comparison."
msgstr "``program: if 11 > 2 then 'yes' else 'no' fi`` returns ``'no'`` because the ``>`` оператор выполняет лексическое сравнение."

#: ../../__w/calibre/calibre/manual/template_lang.rst:398
msgid ""
"``program: if 11 ># 2 then 'yes' else 'no' fi`` returns ``'yes'`` because "
"the ``>#`` operator does a numeric comparison."
msgstr "``program: if 11 ># 2 then 'yes' else 'no' fi`` вернёт ``'yes'``  потому что оператор  ``>#`` выполняет числовое сравнение."

#: ../../__w/calibre/calibre/manual/template_lang.rst:400
msgid "**Additional available functions**"
msgstr "**Дополнительные доступные функции**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:402
msgid ""
"The following functions are available in addition to those described in "
":ref:`Single Function Mode <single_mode>`."
msgstr "Следующие функции доступны в дополнение к описанным в :ref:`Single Function Mode <single_mode>`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:404
msgid ""
"In `GPM` the functions described in `Single Function Mode` all require an "
"additional first parameter specifying the value to operate upon. All "
"parameters are expression_lists (see the grammar above)."
msgstr "В `GPM` все функции, описанные в `Single Function Mode`, требуют дополнительного первого параметра, определяющего значение для работы. Все параметры - это expression_lists (списки выражений) (см. Грамматику выше)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:406
msgid ""
"``add(x [, y]*)`` -- returns the sum of its arguments. Throws an exception "
"if an argument is not a number. In most cases you can use the ``+`` operator"
" instead of this function."
msgstr "``add(x [, y]*)`` -- возвращает сумму своих аргументов. Выдает исключение, если аргумент не является числом. В большинстве случаев вместо этой функции можно использовать оператор ``+``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:407
msgid ""
"``and(value [, value]*)`` -- returns the string \"1\" if all values are not "
"empty, otherwise returns the empty string. You can have as many values as "
"you want. In most cases you can use the ``&&`` operator instead of this "
"function.  One reason not to replace ``and`` with ``&&`` is if short-"
"circuiting can change the results because of side effects. For example, "
"``and(a='',b=5)`` will always do both assignments, where the ``&&`` operator"
" won't do the second."
msgstr "``and(value [, value]*)`` -- возвращает строку \"1\", если все значения не пустые, в противном случае возвращает пустую строку. Значения - сколько захотите. В большинстве случаев вместо этой функции можно использовать оператор &&. Одна из причин не заменять ``and`` на ``&&`` заключается в том, что короткое замыкание может изменить результаты из-за побочных эффектов. Например, ``and(a='',b=5)`` всегда будет выполнять оба присваивания, а оператор ``&&`` не будет выполнять второе."

#: ../../__w/calibre/calibre/manual/template_lang.rst:408
msgid ""
"``assign(id, val)`` -- assigns ``val`` to ``id``, then returns ``val``. "
"``id`` must be an identifier, not an expression. In most cases you can use "
"the ``=`` operator instead of this function."
msgstr "``assign(id, val)`` -- присваивает ``val`` идентификатору ``id`, а затем возвращает ``val``. ``id`` должен быть идентификатором, а не выражением. В большинстве случаев вместо этой функции можно использовать оператор ``=``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:409
msgid ""
"``approximate_formats()`` -- return a comma-separated list of formats "
"associated with the book. There is no guarantee that the list is correct, "
"although it probably is. This and other zero-parameter functions can be "
"called in Template Program Mode (see below) using the template "
"``{:'approximate_formats()'}``. Note that resulting format names are always "
"uppercase, as in EPUB. The ``approximate_formats()`` function is "
"significantly faster than the ``formats_...`` functions discussed below."
msgstr "``approximate_formats()`` -- возвращает разделённый запятыми список форматов, связанных с книгой. Нет никакой гарантии, что список правильный, хотя, вероятно, это так. Эта и другие функции с нулевыми параметрами могут быть вызваны в режиме Template Program Mode (см. ниже) с использованием шаблона``{:'approximate_formats()'}``. Обратите внимание, что имена результирующих форматов всегда пишутся в верхнем регистре, как в EPUB. Функция ``approximate_formats()`` значительно быстрее, чем функции ``formats_...``, обсуждаемые ниже."

#: ../../__w/calibre/calibre/manual/template_lang.rst:410
msgid ""
"``author_links(val_separator, pair_separator)`` -- returns a string "
"containing a list of authors and those authors' link values in the form::"
msgstr "``author_links(val_separator, pair_separator)`` -- возвращает строку, содержащую список авторов и значения ссылок этих авторов в форме::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:414
msgid ""
"An author is separated from its link value by the ``val_separator`` string "
"with no added spaces. ``author:linkvalue`` pairs are separated by the "
"``pair_separator`` string argument with no added spaces. It is up to you to "
"choose separator strings that do not occur in author names or links. An "
"author is included even if the author link is empty."
msgstr "Автор отделяется от значения ссылки строкой ``val_separator`` без дополнительных пробелов. Пары ``author: linkvalue`` разделяются строковым аргументом ``pair_separator`` без дополнительных пробелов. Вы можете выбрать строки-разделители, которые не встречаются в именах авторов или в ссылках. Автор включается, даже если ссылка на автора пуста."

#: ../../__w/calibre/calibre/manual/template_lang.rst:415
msgid ""
"``author_sorts(val_separator)`` -- returns a string containing a list of "
"author's sort values for the authors of the book. The sort is the one in the"
" author metadata information (different from the author_sort in books). The "
"returned list has the form ``author sort 1`` ``val_separator`` ``author sort"
" 2`` etc. with no added spaces. The author sort values in this list are in "
"the same order as the authors of the book. If you want spaces around "
"``val_separator`` then include them in the ``val_separator`` string."
msgstr "``author_sorts(val_separator)`` -- возвращает строку, содержащую список значений сортировок автора для авторов книги. Сортировка - метаданные автора (отличающиеся от author_sort в книгах). Возвращаемый список имет формат ``author_sort1`` ``val_separator`` ``author_sort2`` и т.д. без добавляемых пробелов. Значения author_sort в этом списке в том же порядке, как и авторы в книге. Если вам нужны пробелы вокруг разделителя ``val_separator``, включите их в строку ``val_separator``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:416
msgid ""
"``book_count(query, use_vl)`` -- returns the count of books found by "
"searching for ``query``. If ``use_vl`` is ``0`` (zero) then virtual "
"libraries are ignored. This function and its companion ``book_values()`` are"
" particularly useful in template searches, supporting searches that combine "
"information from many books such as looking for series with only one book. "
"It cannot be used in composite columns unless the tweak "
"``allow_template_database_functions_in_composites`` is set to True. It can "
"be used only in the GUI."
msgstr "``book_count(query, use_vl)`` -- возвращает количество книг, найденных при поиске ``query``. Если ``use_vl`` равно ``0`` (ноль), тогда виртуальные библиотеки игнорируются. Эта функция и её компаньон ``book_values()`` особенно полезны при поиске по шаблону, поддерживая поиск, объединяющий информацию из многих книг, например, поиск серий только с одной книгой. Его нельзя использовать в составных столбцах, если для настройки ``allow_template_database_functions_in_composites`` установлено значение True. Его можно использовать только в графическом интерфейсе."

#: ../../__w/calibre/calibre/manual/template_lang.rst:418
msgid ""
"For example this template search uses this function and its companion to "
"find all series with only one book:"
msgstr "Например, этот поиск по шаблону использует эту функцию и её компаньон для поиска всех серий только с одной книгой:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:420
msgid ""
"Define a stored template (using :guilabel:`Preferences->Advanced->Template "
"functions`) named ``series_only_one_book`` (the name is arbitrary). The "
"template is::"
msgstr "Обозначьте сохранённый шаблон (используя :guilabel:`Настройки->Дополнительно->Функции шаблона`) с именем ``series_only_one_book`` (имя может быть произвольным). Шаблон такой::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:435
msgid ""
"The first time the template runs (the first book checked) it stores the "
"results of the database lookups in a ``global`` template variable named "
"``vals``. These results are used to check subsequent books without redoing "
"the lookups."
msgstr "При первом запуске шаблона (проверена первая книга) он сохраняет результаты поиска в базе данных в переменной шаблона ``global`` с именем ``vals``. Эти результаты используются для проверки последующих книг без повторного поиска."

#: ../../__w/calibre/calibre/manual/template_lang.rst:437
msgid "Use the stored template in a template search::"
msgstr "Использовать сохраненный шаблон в поиске по шаблону::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:441
msgid ""
"Using a stored template instead of putting the template into the search "
"eliminates problems caused by the requirement to escape quotes in search "
"expressions."
msgstr "Использование сохранённого шаблона вместо ввода шаблона в поиск устраняет проблемы, вызванные требованием избегать кавычек в выражениях поиска."

#: ../../__w/calibre/calibre/manual/template_lang.rst:442
msgid ""
"``book_values(column, query, sep, use_vl)`` -- returns a list of the unique "
"values contained in the column ``column`` (a lookup name), separated by "
"``sep``, in the books found by searching for ``query``. If ``use_vl`` is "
"``0`` (zero) then virtual libraries are ignored. This function and its "
"companion ``book_count()`` are particularly useful in template searches, "
"supporting searches that combine information from many books such as looking"
" for series with only one book. It cannot be used in composite columns "
"unless the tweak ``allow_template_database_functions_in_composites`` is set "
"to True. It can be used only in the GUI."
msgstr "``book_values(column, query, sep, use_vl)`` -- возвращает список уникальных значений, содержащихся в столбце ``column`` (имя поиска), разделенных ``sep``, в найденных книгах путем поиска ``query``. Если ``use_vl`` равно ``0`` (ноль), тогда виртуальные библиотеки игнорируются. Эта функция и её компаньон ``book_count()`` особенно полезны при поиске по шаблону, поддерживая поиск, объединяющий информацию из многих книг, например, поиск серий только с одной книгой. Его нельзя использовать в составных столбцах, если для настройки ``allow_template_database_functions_in_composites`` установлено значение True. Его можно использовать только в графическом интерфейсе."

#: ../../__w/calibre/calibre/manual/template_lang.rst:443
msgid ""
"``booksize()`` -- returns the value of the calibre 'size' field. Returns '' "
"if there are no formats."
msgstr "``booksize()`` -- возвращает значение поля calibre 'size'. Возвращает '', если форматов нет."

#: ../../__w/calibre/calibre/manual/template_lang.rst:444
msgid ""
"``check_yes_no(field_name, is_undefined, is_false, is_true)`` -- checks if "
"the value of the yes/no field named by the lookup name ``field_name`` is one"
" of the values specified by the parameters, returning ``'yes'`` if a match "
"is found otherwise returning the empty string. Set the parameter "
"``is_undefined``, ``is_false``, or ``is_true`` to 1 (the number) to check "
"that condition, otherwise set it to 0. Example:"
msgstr "``check_yes_no(field_name, is_undefined, is_false, is_true)`` -- проверяет, является ли значение поля да / нет, названного именем поиска ``field_name``, одним из значений, заданных параметрами, возвращая ``'yes'``, если найдено совпадение, в противном случае возвращает пустую строку. Установите для параметра ``is_undefined``, ``is_false`` или ``is_true`` значение 1 (число), чтобы проверить это условие, в противном случае установите значение 0. Пример:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:446
msgid ""
"``check_yes_no(\"#bool\", 1, 0, 1)`` returns ``'yes'`` if the yes/no field "
"``#bool`` is either True or undefined (neither True nor False)."
msgstr "``check_yes_no(\"#bool\", 1, 0, 1)`` возвращает ``'yes'`` если поле yes/no ``#bool`` имеет значение True или undefined (ни True, ни False)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:448
msgid ""
"More than one of ``is_undefined``, ``is_false``, or ``is_true`` can be set "
"to 1."
msgstr "Для более чем одного из ``is_undefined``, ``is_false`` или ``is_true`` может быть установлено значение 1."

#: ../../__w/calibre/calibre/manual/template_lang.rst:449
msgid ""
"``ceiling(x)`` -- returns the smallest integer greater than or equal to "
"``x``. Throws an exception if ``x`` is not a number."
msgstr "``ceiling(x)`` -- возвращает наименьшее целое число, большее или равное ``x``. Выдает исключение, если ``x`` не является числом."

#: ../../__w/calibre/calibre/manual/template_lang.rst:450
msgid ""
"``character(character_name)`` -- returns the character named by "
"character_name. For example, ``character('newline')`` returns a newline "
"character (``'\\n'``). The supported character names are ``newline``, "
"``return``, ``tab``, and ``backslash``."
msgstr "``character(character_name)`` - возвращает символ, названный character_name. Например, ``character('newline)`` возвращает символ новой строки (``'\\n'``). Поддерживаемые имена символов: ``newline``, ``return``, ``tab``, и ``backslash``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:451
msgid ""
"``cmp(x, y, lt, eq, gt)`` -- compares ``x`` and ``y`` after converting both "
"to numbers. Returns ``lt`` if ``x <# y``, ``eq`` if ``x ==# y``, otherwise "
"``gt``. This function can usually be replaced with one of the numeric "
"compare operators (``==#``, ``<#``, ``>#``, etc)."
msgstr "``cmp(x, y, lt, eq, gt)`` -- сравнивает ``x`` и ``y`` после преобразования обоих в числа. Возвращает ``lt``, если ``x <# y``. Возвращает ``eq``, если ``x ==# y``. В противном случае возвращает ``gt``. Во многих случаях операторы числового сравнения (``==#``, ``<#``, ``>#`` и т. п.) могут заменить эту функцию."

#: ../../__w/calibre/calibre/manual/template_lang.rst:452
msgid ""
"``connected_device_name(storage_location_key)`` -- if a device is connected "
"then return the device name, otherwise return the empty string. Each storage"
" location on a device has its own device name. The ``storage_location_key`` "
"names are ``'main'``, ``'carda'`` and ``'cardb'``. This function works only "
"in the GUI."
msgstr "``connected_device_name(storage_location_key)`` -- если устройство подключено, вернуть имя устройства, в противном случае вернуть пустую строку. Каждое место хранения на устройстве может иметь другое имя. Названия ``storage_location_key`` - ``'main'``, ``'carda'`` и ``'cardb'``. Эта функция работает только в графическом интерфейсе."

#: ../../__w/calibre/calibre/manual/template_lang.rst:453
msgid ""
"``connected_device_uuid(storage_location_key)`` -- if a device is connected "
"then return the device uuid (unique id), otherwise return the empty string. "
"Each storage location on a device has a different uuid. The "
"``storage_location_key`` location names are ``'main'``, ``'carda'`` and "
"``'cardb'``. This function works only in the GUI."
msgstr "``connected_device_uuid(storage_location_key)`` -- если устройство подключено, вернуть uuid устройства (уникальный идентификатор), иначе вернуть пустую строку. У каждого места хранения на устройстве свой uuid. Названия локаций - ``'main'``, ``'carda'`` и ``'cardb'``. Эта функция работает только в графическом интерфейсе."

#: ../../__w/calibre/calibre/manual/template_lang.rst:454
msgid ""
"``current_library_name()`` -- return the last name on the path to the "
"current calibre library."
msgstr "``current_library_name()`` -- возвращает последнее имя в пути к текущей библиотеке calibre."

#: ../../__w/calibre/calibre/manual/template_lang.rst:455
msgid ""
"``current_library_path()`` -- return the full path to the current calibre "
"library."
msgstr "``current_library_path()`` -- возвращает полный путь к текущей библиотеке calibre."

#: ../../__w/calibre/calibre/manual/template_lang.rst:456
msgid ""
"``current_virtual_library_name()`` -- return the name of the current virtual"
" library if there is one, otherwise the empty string. Library name case is "
"preserved. Example: ``program: current_virtual_library_name()``. This "
"function works only in the GUI."
msgstr "``current_virtual_library_name()`` -- вернуть имя текущей виртуальной библиотеки, если она есть, иначе пустую строку. Регистр имени библиотеки сохраняется. Пример: ``program: current_virtual_library_name()``.Эта функция работает только в GUI."

#: ../../__w/calibre/calibre/manual/template_lang.rst:457
msgid ""
"``date_arithmetic(date, calc_spec, fmt)`` -- Calculate a new date from "
"``date`` using ``calc_spec``. Return the new date formatted according to "
"optional ``fmt``: if not supplied then the result will be in ISO format. The"
" calc_spec is a string formed by concatenating pairs of ``vW`` "
"(``valueWhat``) where ``v`` is a possibly-negative number and W is one of "
"the following letters:"
msgstr "``date_arithmetic(date, calc_spec, fmt)`` -- вычислить новую дату от ``date`` с помощью ``calc_spec``. Вернуть новую дату, отформатированную в соответствии с необязательным ``fmt``: если не указано, то результат будет в формате ISO. calc_spec - это строка, образованная конкатенацией пар ``vW`` (``valueWhat``), где ``v`` - возможно отрицательное число, а W - одна из следующих букв:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:459
msgid "``s``: add ``v`` seconds to ``date``"
msgstr "``s``: добавить ``v`` секунд к ``date``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:460
msgid "``m``: add ``v`` minutes to ``date``"
msgstr "``m``: добавить ``v`` минут к ``date``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:461
msgid "``h``: add ``v`` hours to ``date``"
msgstr "``h``: добавить ``v`` часов к ``date``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:462
msgid "``d``: add ``v`` days to ``date``"
msgstr "``d``: добавить ``v`` дней к ``date``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:463
msgid "``w``: add ``v`` weeks to ``date``"
msgstr "``w``: добавить ``v`` недель к ``date``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:464
msgid "``y``: add ``v`` years to ``date``, where a year is 365 days."
msgstr "``y``: добавить ``v`` лет к ``date`` где в году 365 дней."

#: ../../__w/calibre/calibre/manual/template_lang.rst:466
msgid ""
"Example: ``'1s3d-1m'`` will add 1 second, add 3 days, and subtract 1 minute "
"from ``date``."
msgstr "Пример: ``'1s3d-1m'`` добавит 1 секунду, прибавит 3 дня и вычтет 1 минуту из ``date``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:467
msgid ""
"``days_between(date1, date2)`` -- return the number of days between "
"``date1`` and ``date2``. The number is positive if ``date1`` is greater than"
" ``date2``, otherwise negative. If either ``date1`` or ``date2`` are not "
"dates, the function returns the empty string."
msgstr "``days_between(date1, date2)`` -- возвращает количество дней между ``date1`` и ``date2``. Число положительно, если ``date1`` больше ``date2``, в противном случае отрицательно. Если ``date1`` или ``date2`` не являются датой, функция возвращает пустую строку."

#: ../../__w/calibre/calibre/manual/template_lang.rst:468
msgid ""
"``divide(x, y)`` -- returns ``x / y``. Throws an exception if either ``x`` "
"or ``y`` are not numbers. This function can usually be replaced by the ``/``"
" operator."
msgstr "``divide(x, y)`` -- возвращает ``x / y``. Выдает исключение, если ``x`` или ``y`` не являются числами. Эту функцию часто можно заменить оператором ``/``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:469
msgid ""
"``eval(string)`` -- evaluates the string as a program, passing the local "
"variables. This permits using the template processor to construct complex "
"results from local variables. In :ref:`Template Program Mode "
"<template_mode>`, because the `{` and `}` characters are interpreted before "
"the template is evaluated you must use `[[` for the `{` character and `]]` "
"for the ``}`` character. They are converted automatically. Note also that "
"prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the "
"argument to this function when using :ref:`Template Program Mode "
"<template_mode>`."
msgstr "``eval(string)`` -- оценивает строку как программу, передавая локальные переменные. Это позволяет использовать шаблонный процессор для построения сложных результатов из локальных переменных. В :ref:`Template Program Mode <template_mode>`, поскольку символы `{` и `}`интерпретируются до оценки шаблона, вы должны использовать`[[`для символа `{` и `]]` для символа``}``. Они конвертируются автоматически. Также обратите внимание, что префиксы и суффиксы (синтаксис `|prefix|suffix` ) не могут использоваться в аргументе этой функции при использовании :ref:`Template Program Mode <template_mode>`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:470
msgid ""
"``field(lookup_name)`` -- returns the value of the metadata field with "
"lookup name ``lookup_name``."
msgstr "``field(lookup_name)`` -- возвращает поле метаданных с именем ``lookup_name``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:471
msgid ""
"``field_exists(field_name)`` -- checks if a field (column) with the lookup "
"name ``field_name`` exists, returning ``'1'`` if so and the empty string if "
"not."
msgstr "``field_exists(field_name)`` -- проверяет, существует ли поле (столбец) с именем ``field_name``, возвращая ``'1'``, если это так, и пустую строку, если нет."

#: ../../__w/calibre/calibre/manual/template_lang.rst:472
msgid ""
"``finish_formatting(val, fmt, prefix, suffix)`` -- apply the format, prefix,"
" and suffix to a value in the same way as done in a template like "
"``{series_index:05.2f| - |- }``. This function is provided to ease "
"conversion of complex single-function- or template-program-mode templates to"
" `GPM` Templates. For example, the following program produces the same "
"output as the above template::"
msgstr "``finish_formatting(val, fmt, prefix, suffix)`` -- применяет формат, префикс и суффикс к значению так же, как в шаблоне вроде ``{series_index:05.2f| - |- }``. Эта функция предназначена для упрощения преобразования сложных шаблонов, выполняемых в режиме одной функции или шаблонной программы, в шаблоны GPM. Например, следующая программа делает то же, что и указанный шаблон::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:476
msgid ""
"Another example: for the template "
"``{series:re(([^\\s])[^\\s]+(\\s|$),\\1)}{series_index:0>2s| - | - "
"}{title}`` use::"
msgstr "Другой пример: для шаблона ``{series:re(([^\\s])[^\\s]+(\\s|$),\\1)}{series_index:0>2s| - | - }{title}`` используйте::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:485
msgid ""
"``first_matching_cmp(val, [ cmp, result, ]* else_result)`` -- compares ``val"
" < cmp`` in sequence, returning the associated result for the first "
"comparison that succeeds. Returns else_result if no comparison succeeds. "
"Example::"
msgstr "``first_matching_cmp(val, [ cmp, result, ]* else_result)`` -- сравнивает ``val < cmp`` в последовательности, возвращая связанный результат для первого успешного сравнения. Если сравнение не удалось, возвращает else_result. Пример::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:490
msgid ""
"returns ``\"large\"``. The same example with a first value of 16 returns "
"``\"giant\"``."
msgstr "возвращает ``\"large\"``. В том же примере с первым значением 16 возвращается ``\"giant\"``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:492
msgid ""
"``first_non_empty(value [, value]*)`` -- returns the first ``value`` that is"
" not empty. If all values are empty, then the empty string is returned. You "
"can have as many values as you want."
msgstr "``first_non_empty(value [, value]*)`` -- возвращает первое непустое значение. Если все значения пусты, возвращается пустая строка. Вы можете иметь сколько угодно значений."

#: ../../__w/calibre/calibre/manual/template_lang.rst:493
msgid ""
"``floor(x)`` -- returns the largest integer less than or equal to ``x``. "
"Throws an exception if ``x`` is not a number."
msgstr "``floor(x)`` -- возвращает наибольшее целое число, меньшее или равное ``x``. Выдает исключение, если ``x`` не является числом."

#: ../../__w/calibre/calibre/manual/template_lang.rst:494
msgid ""
"``format_date(val, format_string)`` -- format the value, which must be a "
"date string, using the format_string, returning a string. The formatting "
"codes are:"
msgstr "``format_date(val, format_string)`` -- форматирует значение, которое должно быть строкой даты, используя format_string, возвращая строку. Коды форматирования:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:496
msgid "``d    :`` the day as number without a leading zero (1 to 31)"
msgstr "``d :`` день как число без нуля в начале (от 1 до 31)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:497
msgid "``dd   :`` the day as number with a leading zero (01 to 31)"
msgstr "``dd :`` день как число с нулем в начале (от 01 до 31)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:498
msgid "``ddd  :`` the abbreviated localized day name (e.g. \"Mon\" to \"Sun\")."
msgstr "``ddd :`` сокращенное название дня недели (например, с \"Пн\" по \"Вс\")."

#: ../../__w/calibre/calibre/manual/template_lang.rst:499
msgid "``dddd :`` the long localized day name (e.g. \"Monday\" to \"Sunday\")."
msgstr "``dddd :`` длинное локализованное название дня (например, с Понедельник по Воскресенье)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:500
msgid "``M    :`` the month as number without a leading zero (1 to 12)."
msgstr "``M :`` месяц как число без нуля в начале (от 1 до 12)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:501
msgid "``MM   :`` the month as number with a leading zero (01 to 12)"
msgstr "``MM :`` месяц как число с нулем в начале (от 01 до 12)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:502
msgid "``MMM  :`` the abbreviated localized month name (e.g. \"Jan\" to \"Dec\")."
msgstr "``MMM :`` сокращенное название месяца (например, с \"Янв\" по \"Дек\")."

#: ../../__w/calibre/calibre/manual/template_lang.rst:503
msgid "``MMMM :`` the long localized month name (e.g. \"January\" to \"December\")."
msgstr "``MMMM :`` длинное локализованное название месяца (например, с \"Январь\" по \"Декабрь\")."

#: ../../__w/calibre/calibre/manual/template_lang.rst:504
msgid "``yy   :`` the year as two digit number (00 to 99)."
msgstr "``yy :`` год в виде двузначного числа (от 00 до 99)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:505
msgid "``yyyy :`` the year as four digit number."
msgstr "``yyyy :`` четыре цифры года."

#: ../../__w/calibre/calibre/manual/template_lang.rst:506
msgid ""
"``h    :`` the hours without a leading 0 (0 to 11 or 0 to 23, depending on "
"am/pm)"
msgstr "``h :`` часы без 0 в начале (от 0 до 11 или от 0 до 23, в зависимости от am/pm)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:507
msgid ""
"``hh   :`` the hours with a leading 0 (00 to 11 or 00 to 23, depending on "
"am/pm)"
msgstr "``hh :`` часы с 0 в начале (с 00 до 11 или с 00 до 23, в зависимости от am/pm)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:508
msgid "``m    :`` the minutes without a leading 0 (0 to 59)"
msgstr "``m :`` минуты без 0 в начале (от 0 до 59)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:509
msgid "``mm   :`` the minutes with a leading 0 (00 to 59)"
msgstr "``mm :`` минуты с 0 в начале (от 00 до 59)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:510
msgid "``s    :`` the seconds without a leading 0 (0 to 59)"
msgstr "``s :`` секунды без начального 0 (от 0 до 59)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:511
msgid "``ss   :`` the seconds with a leading 0 (00 to 59)"
msgstr "``ss :`` секунды с 0 в начале (от 00 до 59)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:512
msgid ""
"``ap   :`` use a 12-hour clock instead of a 24-hour clock, with 'ap' "
"replaced by the localized string for am or pm."
msgstr "``ap :`` использовать 12-часовые часы вместо 24-часовых, с заменой 'ap' на локализованную строку для am или pm."

#: ../../__w/calibre/calibre/manual/template_lang.rst:513
msgid ""
"``AP   :`` use a 12-hour clock instead of a 24-hour clock, with 'AP' "
"replaced by the localized string for AM or PM."
msgstr "``AP :`` использовать 12-часовой формат времени вместо 24-часового с заменой 'AP' на локализованную строку для AM или PM."

#: ../../__w/calibre/calibre/manual/template_lang.rst:514
msgid ""
"``iso  :`` the date with time and timezone. Must be the only format present."
msgstr "``iso :`` дата с указанием времени и часового пояса. Должен быть единственный формат."

#: ../../__w/calibre/calibre/manual/template_lang.rst:515
msgid ""
"``to_number   :`` convert the date & time into a floating point number (a "
"`timestamp`)"
msgstr "``to_number :`` преобразовать дату и время в число с плавающей запятой (`timestamp` отметка времени)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:516
msgid ""
"``from_number :`` convert a floating point number (a `timestamp`) into an "
"``iso`` formatted date. If you want a different date format then add the "
"desired formatting string after ``from_number`` and a colon (``:``). "
"Example: ``from_number:MMM dd yyyy``"
msgstr "``from_number :`` преобразовать число с плавающей запятой (отметку времени) в дату в формате iso. Если вам нужен другой формат даты, добавьте желаемую строку форматирования после ``from_number`` и двоеточия (``:``). Пример: ``from_number:MMM dd yyyy``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:518
msgid ""
"You might get unexpected results if the date you are formatting contains "
"localized month names, which can happen if you changed the date format "
"tweaks to contain ``MMMM``. In this case, instead of using the ``field()`` "
"function as in::"
msgstr "Вы можете получить неожиданные результаты, если форматируемая дата содержит локализованные названия месяцев, что может произойти, если вы изменили настройки формата даты, чтобы они содержали ``MMMM``. В этом случае вместо использования функции ``field()``, как в::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:522
msgid "use the ``raw_field()`` function as in::"
msgstr "используйте функцию ``raw_field()``, как в::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:526
msgid ""
"``formats_modtimes(date_format_string)`` -- return a comma-separated list of"
" colon-separated items ``FMT:DATE`` representing modification times for the "
"formats of a book. The ``date_format_string`` parameter specifies how the "
"date is to be formatted. See the ``format_date()`` function for details. You"
" can use the ``select`` function to get the modification time for a specific"
" format. Note that format names are always uppercase, as in EPUB."
msgstr "``formats_modtimes(date_format_string)`` -- возвращает разделённый запятыми список разделённых двоеточиями элементов ``FMT:DATE``, представляющих собой время изменения форматов книги. Параметр ``date_format_string`` задаёт формат даты. Смотрите функцию ``format_date()`` для подробностей. Вы можете использовать функцию ``select`` для получения времени модификации для заданного формата. Названия форматов всегда в верхнем регистре, например EPUB."

#: ../../__w/calibre/calibre/manual/template_lang.rst:527
msgid ""
"``formats_paths()`` -- return a comma-separated list of colon-separated "
"items ``FMT:PATH`` giving the full path to the formats of a book. You can "
"use the select function to get the path for a specific format. Note that "
"format names are always uppercase, as in EPUB."
msgstr "``formats_paths()`` -- возвращает разделённый запятыми список элементов, разделённых двоеточиями``FMT:PATH``, представляющих собой полный путь к форматам книги. Вы можете использовать функцию ``select`` для получения пути для заданного формата. Названия форматов всегда в верхнем регистре, например EPUB."

#: ../../__w/calibre/calibre/manual/template_lang.rst:528
msgid ""
"``formats_sizes()`` -- return a comma-separated list of colon-separated "
"``FMT:SIZE`` items giving the sizes in bytes of the formats of a book. You "
"can use the select function to get the size for a specific format. Note that"
" format names are always uppercase, as in EPUB."
msgstr "``formats_sizes()`` -- возвращает разделённый запятыми список элементов, разделённых двоеточиями``FMT:SIZE``, представляющих собой размеры в байтах форматов книги. Вы можете использовать функцию ``select`` для получения размера для заданного формата. Названия форматов всегда в верхнем регистре, например EPUB."

#: ../../__w/calibre/calibre/manual/template_lang.rst:529
msgid ""
"``fractional_part(x)`` -- returns the value after the decimal point. For "
"example, ``fractional_part(3.14)`` returns ``0.14``. Throws an exception if "
"``x`` is not a number."
msgstr "``fractional_part(x)`` -- возвращает значение после десятичной точки. Например, ``fractional_part(3.14)`` возвращает ``0.14`. Выдает исключение, если ``x`` не является числом."

#: ../../__w/calibre/calibre/manual/template_lang.rst:530
msgid ""
"``has_cover()`` -- return ``'Yes'`` if the book has a cover, otherwise the "
"empty string."
msgstr "``has_cover()`` -- возвращает ``'Yes'``, если у книги есть обложка, иначе возвращает пустую строку"

#: ../../__w/calibre/calibre/manual/template_lang.rst:531
msgid ""
"``is_marked()`` -- check whether the book is `marked` in calibre. If it is "
"then return the value of the mark, either ``'true'`` (lower case) or a "
"comma-separated list of named marks. Returns ``''`` (the empty string) if "
"the book is not marked. This function works only in the GUI."
msgstr "``is_marked()`` -- проверить, помечена ли книга в calibre. Если это так, то вернуть значение метки, либо ``'true'``(lower case), либо список именованных меток, разделенных запятыми. Возврат ``''``, если книга не отмечена."

#: ../../__w/calibre/calibre/manual/template_lang.rst:532
msgid ""
"``language_codes(lang_strings)`` -- return the `language codes "
"<https://www.loc.gov/standards/iso639-2/php/code_list.php>`_ for the "
"language names passed in `lang_strings`. The strings must be in the language"
" of the current locale. ``Lang_strings`` is a comma-separated list."
msgstr "``language_codes(lang_strings)`` -- возвращает коды языка <https://www.loc.gov/standards/iso639-2/php/code_list.php>`_ для строк, взятых из `lang_strings`. Строки должны быть на языке текущей локализации. ``Lang_strings`` - это список, разделённый запятыми."

#: ../../__w/calibre/calibre/manual/template_lang.rst:533
msgid ""
"``list_contains(value, separator, [ pattern, found_val, ]* not_found_val)`` "
"-- (Alias of ``in_list``) Interpreting the value as a list of items "
"separated by ``separator``, evaluate the ``pattern`` against each value in "
"the list. If the ``pattern`` matches any value then return ``found_val``, "
"otherwise return ``not_found_val``. The ``pattern`` and ``found_value`` can "
"be repeated as many times as desired, permitting returning different values "
"depending on the search. The patterns are checked in order. The first match "
"is returned. Aliases: ``in_list()``, ``list_contains()``"
msgstr "``list_contains(value, separator, [ pattern, found_val, ]* not_found_val)`` -- (Псевдоним ``in_list``). Интерпретируя значение как список элементов, разделённых ``separator``, оценивает ``pattern`` для каждого значения в списке. Если шаблон соответствует любому значению, вернуть ``found_val``, иначе вернуть ``not_found_val``. Шаблоны и ``found_value`` могут повторяться сколько угодно раз, что позволяет возвращать разные значения в зависимости от поиска. Шаблоны проверяются по порядку. Возвращается первое совпадение. Псевдонимы: ``in_list()``, ``list_contains()``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:534
msgid ""
"``list_count(value, separator)`` -- interprets ``value`` as a list of items "
"separated by ``separator``, returning the count of items in the list. "
"Aliases: ``count()``, ``list_count()``"
msgstr "``list_count(value, separator)`` -- интерпретирует значение как список элементов, разделённых ``separator``, возвращая количество элементов в списке. Псевдонимы: ``count()``, ``list_count()``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:535
msgid ""
"``list_count_matching(list, pattern, separator)`` -- interprets ``list`` as "
"a list of items separated by ``separator``, returning the number of items in"
" the list that match the regular expression ``pattern``. Aliases: "
"``list_count_matching()``, ``count_matching()``"
msgstr "``list_count_matching(list, pattern, separator)`` -- интерпретирует ``list`` как список элементов, разделенных ``separator``, возвращая количество элементов в списке, которые соответствуют регулярному выражению ``pattern``. Псевдонимы: ``list_count_matching()``, ``count_matching()``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:536
msgid ""
"``list_difference(list1, list2, separator)`` -- return a list made by "
"removing from ``list1`` any item found in ``list2`` using a case-insensitive"
" comparison. The items in ``list1`` and ``list2`` are separated by "
"separator, as are the items in the returned list."
msgstr "``list_difference(list1, list2, separator)`` -- возвращает список, созданный при помощи удаления из списка ``list1`` любого элемента, найденного в списке ``list2``, используя регистронезависимое сравнение. Элементы в списках ``list1`` и ``list2`` разделяются разделителем ``separator``, так же как и элементы в возвращаемом списке."

#: ../../__w/calibre/calibre/manual/template_lang.rst:537
msgid ""
"``list_equals(list1, sep1, list2, sep2, yes_val, no_val)`` -- return "
"``yes_val`` if ``list1`` and `list2` contain the same items, otherwise "
"return ``no_val``. The items are determined by splitting each list using the"
" appropriate separator character (``sep1`` or ``sep2``). The order of items "
"in the lists is not relevant. The comparison is case-insensitive."
msgstr "``list_equals(list1, sep1, list2, sep2, yes_val, no_val)`` -- возвращает ``yes_val`` если ``list1`` и ``list2`` содержат одинаковые элементы, иначе возвращает ``no_val``. Элементы определяются разделением каждого списка с использованием соответствующего символа разделителя (``sep1`` или ``sep2``). Порядок элементов в списке не важен. Сравнение регистронезависимое."

#: ../../__w/calibre/calibre/manual/template_lang.rst:538
msgid ""
"``list_intersection(list1, list2, separator)`` -- return a list made by "
"removing from ``list1`` any item not found in ``list2``, using a case-"
"insensitive comparison. The items in ``list1`` and ``list2`` are separated "
"by separator, as are the items in the returned list."
msgstr "``list_intersection(list1, list2, separator)`` -- вернуть список, созданный путём удаления из ``list1`` любого элемента, не найденного в ``list2``, с использованием сравнения без учета регистра. Элементы в ``list1`` и ``list2`` разделены разделителем ``separator``, как и элементы в возвращаемом списке."

#: ../../__w/calibre/calibre/manual/template_lang.rst:539
msgid ""
"``list_join(with_separator, list1, separator1 [, list2, separator2]*)`` -- "
"return a list made by joining the items in the source lists (``list1`` etc) "
"using ``with_separator`` between the items in the result list. Items in each"
" source ``list[123...]`` are separated by the associated "
"``separator[123...]``. A list can contain zero values. It can be a field "
"like ``publisher`` that is single-valued, effectively a one-item list. "
"Duplicates are removed using a case-insensitive comparison. Items are "
"returned in the order they appear in the source lists. If items on lists "
"differ only in letter case then the last is used. All separators can be more"
" than one character."
msgstr "``list_join(with_separator, list1, separator1 [, list2, separator2]*)`` -- возвращает список, созданный путем объединения элементов исходных списков (``list1`` и т. д.), используя ``with_separator`` между элементами в списке результатов. Элементы в каждом источнике ``список[123...]`` разделены соответствующим ``разделителем[123...]``. Список может содержать нулевые значения. Это может быть поле типа ``publisher``, которое является однозначным, фактически представляет собой список из одного элемента. Дубликаты удаляются с помощью сравнения без учета регистра. Элементы возвращаются в том порядке, в котором они появляются в исходных списках. Если элементы в списках различаются только регистром букв, то используется последний. Все разделители могут состоять из более чем одного символа."

#: ../../__w/calibre/calibre/manual/template_lang.rst:541
#: ../../__w/calibre/calibre/manual/template_lang.rst:563
msgid "Example::"
msgstr "Пример::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:546
msgid ""
"You can use ``list_join`` on the results of previous calls to ``list_join`` "
"as follows::"
msgstr "Вы можете использовать ``list_join`` для результатов предыдущих вызовов ``list_join`` следующим образом:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:552
msgid ""
"You can use expressions to generate a list. For example, assume you want "
"items for ``authors`` and ``#genre``, but with the genre changed to the word"
" \"Genre: \" followed by the first letter of the genre, i.e. the genre "
"\"Fiction\" becomes \"Genre: F\". The following will do that::"
msgstr "Вы можете использовать выражения для создания списка. Например, предположим, что вам нужны элементы для ``authors`` и ``#genre``, но с изменением жанра на слово \"Genre: \", за которым следует первая буква жанра, то есть  genre \"Fiction\" становится \"Genre: F\". Это будет сделано следующим образом::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:557
msgid ""
"``list_re(src_list, separator, include_re, opt_replace)`` -- Construct a "
"list by first separating ``src_list`` into items using the ``separator`` "
"character. For each item in the list, check if it matches ``include_re``. If"
" it does then add it to the list to be returned. If ``opt_replace`` is not "
"the empty string then apply the replacement before adding the item to the "
"returned list."
msgstr "``list_re(src_list, separator, include_re, opt_replace)`` -- создать список, вначале разделив ``src_list`` на элементы с помощью символа разделителя. Для каждого элемента в списке проверить, соответствует ли он ``include_re``. Если это так, добавить его в список для возврата. Если ``opt_replace`` не является пустой строкой, применить замену перед добавлением элемента в возвращаемый список."

#: ../../__w/calibre/calibre/manual/template_lang.rst:558
msgid ""
"``list_re_group(src_list, separator, include_re, search_re [, "
"template_for_group]*)`` -- Like list_re except replacements are not "
"optional. It uses ``re_group(item, search_re, template ...)`` when doing the"
" replacements."
msgstr "``list_re_group(src_list, separator, include_re, search_re [, template_for_group]*)`` -- Как и ``list_re``, за исключением того, что замены не являются обязательными. При замене используется ``re_group(item, search_re, template ...)``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:559
msgid ""
"``list_remove_duplicates(list, separator)`` -- return a list made by "
"removing duplicate items in ``list``. If items differ only in case then the "
"last is returned. The items in ``list`` are separated by ``separator``, as "
"are the items in the returned list."
msgstr "``list_remove_duplicates(list, separator)`` -- вернуть список, созданный путем удаления повторяющихся элементов в ``list``. Если элементы отличаются только регистром, возвращается последний. Элементы в списке ``list`` разделены разделителем ``separator``, как и элементы в возвращаемом списке``list``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:560
msgid ""
"``list_sort(list, direction, separator)`` -- return ``list`` sorted using a "
"case-insensitive lexical sort. If ``direction`` is zero, ``list`` is sorted "
"ascending, otherwise descending. The list items are separated by "
"``separator``, as are the items in the returned list."
msgstr "``list_sort(list, direction, separator)`` -- вернуть список, отсортированный с использованием лексической сортировки без учета регистра. Если ``direction`` равно нулю, список сортируется по возрастанию, иначе по убыванию. Элементы списка разделены разделителем ``separator``, как и элементы в возвращаемом списке."

#: ../../__w/calibre/calibre/manual/template_lang.rst:561
msgid ""
"``list_split(list_val, sep, id_prefix)`` -- splits ``list_val`` into "
"separate values using ``sep``, then assigns the values to local variables "
"named ``id_prefix_N`` where N is the position of the value in the list. The "
"first item has position 0 (zero). The function returns the last element in "
"the list."
msgstr "``list_split(list_val, sep, id_prefix)`` -- разделяет ``list_val`` на отдельные значения с помощью ``sep``, затем присваивает значения переменным с именем ``id_prefix_N``, где N — позиция значения в списке. Первый элемент имеет позицию 0 (ноль). Функция возвращает последний элемент в списке."

#: ../../__w/calibre/calibre/manual/template_lang.rst:567
msgid "is equivalent to::"
msgstr "эквивалентно::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:573
msgid ""
"``list_union(list1, list2, separator)`` -- return a list made by merging the"
" items in ``list1`` and ``list2``, removing duplicate items using a case-"
"insensitive comparison. If items differ in case, the one in ``list1`` is "
"used. The items in ``list1`` and ``list2`` are separated by ``separator``, "
"as are the items in the returned list. Aliases: ``merge_lists()``, "
"``list_union()``"
msgstr "``list_union(list1, list2, separator)`` -- возвращает список, составленный путем слияния элементов в ``list1`` и ``list2``, удаляя повторяющиеся элементы с помощью сравнения без учета регистра. Если элементы отличаются регистром, используется значение из списка ``list1``. Элементы в списках ``list1`` и ``list2`` разделены разделителем, как и элементы в возвращаемом списке. Псевдонимы: ``merge_lists()``, ``list_union()``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:574
msgid ""
"``mod(x, y)`` -- returns the ``floor`` of the remainder of ``x / y``. Throws"
" an exception if either ``x`` or ``y`` is not a number."
msgstr "``mod(x, y)`` -- возвращает ``floor`` остаток от ``x / y``. Выдает исключение, если ``x`` или ``y`` не является числом."

#: ../../__w/calibre/calibre/manual/template_lang.rst:575
msgid ""
"``multiply(x [, y]*)`` -- returns the product of its arguments. Throws an "
"exception if any argument is not a number. This function can usually be "
"replaced by the ``*`` operator."
msgstr "``multiply(x [, y]*)`` -- возвращает произведение своих аргументов. Выдает исключение, если какой-либо аргумент не является числом. Эту функцию часто можно заменить оператором ``*``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:576
msgid ""
"``not(value)`` -- returns the string \"1\" if the value is empty, otherwise "
"returns the empty string. This function can usually be replaced with the "
"unary not (``!``) operator."
msgstr "``not(value)`` -- возвращает строку \"1\", если значение пустое, иначе возвращает пустую строку. Эту функцию обычно можно заменить унарным оператором not (``!``)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:577
msgid ""
"``ondevice()`` -- return the string ``'Yes'`` if ``ondevice`` is set, "
"otherwise return the empty string."
msgstr "``ondevice()`` -- возвращает ``'Yes'``, если ``ondevice`` установлено, иначе возвращает пустую строку."

#: ../../__w/calibre/calibre/manual/template_lang.rst:578
msgid ""
"``or(value [, value]*)`` -- returns the string ``'1'`` if any value is not "
"empty, otherwise returns the empty string. You can have as many values as "
"you want. This function can usually be replaced by the ``||`` operator. A "
"reason it cannot be replaced is if short-circuiting will change the results "
"because of side effects."
msgstr "``or(value [, value]*)`` -- возвращает строку \"1\", если все значения не пустые, в противном случае возвращает пустую строку. Значения - сколько захотите. Во многих случаях оператор ``||`` может заменить эту функцию. Причина, по которой нельзя заменить - короткое замыкание изменит результаты из-за побочных эффектов."

#: ../../__w/calibre/calibre/manual/template_lang.rst:579
msgid ""
"``print(a [, b]*)`` -- prints the arguments to standard output. Unless you "
"start calibre from the command line (``calibre-debug -g``), the output will "
"go into a black hole. The ``print`` function always returns its first "
"argument."
msgstr "``print(a [, b]*)`` --  выводит аргументы на стандартный вывод. Пока вы не запустите calibre из командной строки (``calibre-debug -g``), вывод идёт в чёрную дыру (black hole). Функция ``print`` всегда возвращает свой первый аргумент."

#: ../../__w/calibre/calibre/manual/template_lang.rst:583
msgid ""
"``range(start, stop, step, limit)`` -- returns a list of numbers generated "
"by looping over the range specified by the parameters start, stop, and step,"
" with a maximum length of limit. The first value produced is 'start'. "
"Subsequent values ``next_v = current_v + step``. The loop continues while "
"``next_v < stop`` assuming ``step`` is positive, otherwise while ``next_v > "
"stop``. An empty list is produced if ``start`` fails the test: ``start >= "
"stop`` if ``step`` is positive. The ``limit`` sets the maximum length of the"
" list and has a default of 1000. The parameters ``start``, ``step``, and "
"``limit`` are optional. Calling ``range()`` with one argument specifies "
"``stop``. Two arguments specify ``start`` and ``stop``. Three arguments "
"specify ``start``, ``stop``, and ``step``. Four arguments specify ``start``,"
" ``stop``, ``step`` and ``limit``. Examples::"
msgstr "``range(start, stop, step, limit)`` -- возвращает список чисел, сгенерированный циклом по диапазону, заданному параметрами start, stop и step, с максимальной длиной limit. Первое полученное значение — 'start'. Последующие значения ``next_v = current_v + step``. Цикл продолжается, пока ``next_v stop`` предполагает, что ``step`` положительный, в противном случае, пока ``next_v stop``. Пустой список создается, если ``start`` не проходит тест: ``start = stop``, если ``step`` положительный. ``limit`` устанавливает максимальную длину списка и имеет значение по умолчанию 1000. Параметры ``start``, ``step`` и ``limit`` являются необязательными. Вызов ``range()`` с одним аргументом указывает ``stop``. Два аргумента определяют ``start`` и ``stop``. Три аргумента определяют ``start``, ``stop``, and ``step``. Четыре аргумента определяют ``start``, ``stop``, ``step`` и ``limit``. Примеры::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:593
msgid ""
"``raw_field(lookup_name [, optional_default])`` -- returns the metadata "
"field named by ``lookup_name`` without applying any formatting. It evaluates"
" and returns the optional second argument ``optional_default`` if the "
"field's value is undefined (``None``)."
msgstr "``raw_field(lookup_name [, optional_default])`` -- возвращает поле метаданных с именем ``lookup_name`` без применения форматирования. Он оценивает и возвращает необязательный второй аргумент ``optional_default``, если поле не определено (``None``)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:594
msgid ""
"``raw_list(lookup_name, separator)`` -- returns the metadata list named by "
"``lookup_name`` without applying any formatting or sorting, with the items "
"separated by separator."
msgstr "``raw_list(lookup_name, separator)`` -- возвращает список метаданных с именем ``lookup_name`` без применения какого-либо форматирования или сортировки и с элементами, разделенными разделителем ``separator``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:595
msgid ""
"``re_group(value, pattern [, template_for_group]*)`` --  return a string "
"made by applying the regular expression pattern to ``value`` and replacing "
"each matched instance with the the value returned by the corresponding "
"template. In :ref:`Template Program Mode <template_mode>`, like for the "
"``template`` and the ``eval`` functions, you use ``[[`` for ``{`` and ``]]``"
" for ``}``."
msgstr "``re_group(value, pattern [, template_for_group]*)`` -- вернуть строку, полученную путем применения шаблона регулярного выражения к ``value`` и замены каждого сопоставленного экземпляра строкой, вычисленной путем замены каждой сопоставленной группы значением, возвращаемым соответствующим шаблоном. В :ref:`Template Program Mode <template_mode>`, как и в случае с шаблоном ``template`` и функциями ``eval``, вы используете ``[[`` для ``{`` и ``]]`` для ``}``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:597
msgid ""
"The following example looks for a series with more than one word and "
"uppercases the first word::"
msgstr "В следующем примере выполняется поиск серии из более чем одного слова с заглавными буквами в первом слове::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:601
msgid ""
"``round(x)`` -- returns the nearest integer to ``x``. Throws an exception if"
" ``x`` is not a number."
msgstr "``round(x)`` -- возвращает ближайшее к ``x`` целое число. Выдает исключение, если ``x`` не является числом."

#: ../../__w/calibre/calibre/manual/template_lang.rst:602
msgid "``series_sort()`` -- returns the series sort value."
msgstr "``series_sort()`` -- возвращает сортировочное значение серии"

#: ../../__w/calibre/calibre/manual/template_lang.rst:603
msgid ""
"``strcat(a [, b]*)`` -- can take any number of arguments. Returns a string "
"formed by concatenating all the arguments."
msgstr "``strcat(a [, b]*)`` -- может принимать любое количество аргументов. Возвращает строку, образованную объединением всех аргументов."

#: ../../__w/calibre/calibre/manual/template_lang.rst:604
msgid ""
"``strcat_max(max, string1 [, prefix2, string2]*)`` -- Returns a string "
"formed by concatenating the arguments. The returned value is initialized to "
"``string1``. Strings made from ``prefix, string`` pairs are added to the end"
" of the value as long as the resulting string length is less than ``max``. "
"Prefixes can be empty. Returns ``string1`` even if ``string1`` is longer "
"than ``max``. You can pass as many ``prefix, string`` pairs as you wish."
msgstr "``strcat_max(max, string1 [, prefix2, string2]*)`` -- Возвращает строку, образованную объединением аргументов. Возвращаемое значение инициализируется ``string1``. Пары ``prefix, string`` добавляются в конец значения, если результирующая длина строки меньше, чем ``max``. ``string1`` возвращается, даже если ``string1`` длиннее ``max``. Вы можете передать сколько угодно пар ``prefix, string``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:605
msgid ""
"``strcmp(x, y, lt, eq, gt)`` -- does a case-insensitive lexical comparison "
"of ``x`` and ``y``. Returns ``lt`` if ``x < y``, ``eq`` if ``x == y``, "
"otherwise ``gt``. This function can often be replaced by one of the lexical "
"comparison operators (``==``, ``>``, ``<``, etc.)"
msgstr "``strcmp(x, y, lt, eq, gt)`` -- выполняет сравнение ``x`` и ``y`` как строк без учета регистра. Возвращает ``lt``, если ``x < y``. Возвращает ``eq``, если ``x == y``, иначе возвращает ``gt``. Во многих случаях эту функцию могут заменить операторы лексического сравнения (`==``, ``>``, ``<`` и т. п.)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:606
msgid ""
"``strcmpcase(x, y, lt, eq, gt)`` -- does a case-sensitive lexical comparison"
" of ``x`` and ``y``. Returns ``lt`` if ``x < y``, ``eq`` if ``x == y``, "
"otherwise ``gt``."
msgstr "``strcmpcase(x, y, lt, eq, gt)`` -- выполняет лексическое сравнение ``x`` и ``y`` с учетом регистра. Возвращает ``lt`` если ``x < y``, ``eq`` если ``x == y``, иначе ``gt``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:608
msgid ""
"Note: This is NOT the default behavior used by calibre, for example, in the "
"lexical comparison operators (``==``, ``>``, ``<``, etc.). This function "
"could cause unexpected results, preferably use ``strcmp()`` whenever "
"possible."
msgstr "Примечание. Это НЕ поведение по умолчанию, используемое calibre, например, в операторах лексического сравнения (``==``, ``>``, ``<`` и т. д.). Эта функция может привести к неожиданным результатам, желательно использовать ``strcmp()``, когда это возможно."

#: ../../__w/calibre/calibre/manual/template_lang.rst:610
msgid "``strlen(value)`` -- Returns the length of the string ``value``."
msgstr "``strlen(value)`` -- Возвращает длину строки ``value``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:611
msgid ""
"``substr(str, start, end)`` -- returns the ``start``'th through the "
"``end``'th characters of ``str``. The first character in ``str`` is the "
"zero'th character. If ``end`` is negative, then it indicates that many "
"characters counting from the right. If ``end`` is zero, then it indicates "
"the last character. For example, ``substr('12345', 1, 0)`` returns "
"``'2345'``, and ``substr('12345', 1, -1)`` returns ``'234'``."
msgstr "``substr(str, start, end)`` -- возвращает подстроку - символы строки ``str`` от ``start`` до ``end``. Первый символ строки ``str`` имеет номер ноль. ``end`` отрицательный - это сколько символов будет отсчитываться с конца строки (справа). Если ``end`` равен 0 (ноль), то это - последний символ строки. Например, ``substr('12345', 1, 0)`` вернёт ``'2345'``, и ``substr('12345', 1, -1)`` вернёт ``'234'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:612
msgid ""
"``subtract(x, y)`` -- returns ``x - y``. Throws an exception if either ``x``"
" or ``y`` are not numbers. This function can usually be replaced by the "
"``-`` operator."
msgstr "``subtract(x, y)`` -- возвращает ``x - y``. Выдает исключение, если ``x`` или ``y`` не являются числами. Эту функцию часто можно заменить оператором ``-``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:613
msgid ""
"``today()`` -- return a date+time string for today (now). This value is "
"designed for use in `format_date` or `days_between`, but can be manipulated "
"like any other string. The date is in `ISO "
"<https://en.wikipedia.org/wiki/ISO_8601>`_ date/time format."
msgstr "``today()`` -- возвращает текущий день в виде строки. Это значение предназначено для использования в ``format_date`` или ``days_between``, но можно использовать как и любую другую строку. Дата в формате `ISO <https://en.wikipedia.org/wiki/ISO_8601>`_."

#: ../../__w/calibre/calibre/manual/template_lang.rst:614
msgid ""
"``template(x)`` -- evaluates ``x`` as a template. The evaluation is done in "
"its own context, meaning that variables are not shared between the caller "
"and the template evaluation."
msgstr "``template(x)`` -- оценивает ``x`` как шаблон ``template``. Оценка выполняется в собственном контексте, что означает, что переменные не используются совместно между вызывающей стороной и оценкой шаблона."

#: ../../__w/calibre/calibre/manual/template_lang.rst:615
msgid ""
"``to_hex(val)`` -- returns the string ``val`` encoded in hex. This is useful"
" when constructing calibre URLs."
msgstr "``to_hex(val)`` -- возвращает строку ``val``, закодированную в шестнадцатеричном формате. Это полезно при создании URL-ов calibre."

#: ../../__w/calibre/calibre/manual/template_lang.rst:616
msgid ""
"``urls_from_identifiers(identifiers, sort_results)`` -- given a comma-"
"separated list of ``identifiers``, where an `identifier` is a colon-"
"separated pair of values (``id_name:id_value``), returns a comma-separated "
"list of HTML URLs generated from the identifiers. The list not sorted if "
"sort_results is ``0`` (character or number), otherwise it is sorted "
"alphabetically by the identifier name. The URLs are generated in the same "
"way as the built-in identifiers column when shown in :guilabel:`Book "
"details`."
msgstr "urls_from_identifiers(identifiers, sort_results) -- задан список идентификаторов, разделённых запятыми, где идентификатор представляет собой пару значений, разделённых двоеточиями (``id_name:id_value``), возвращает список URL-адресов HTML, разделённых запятыми, сгенерированных из идентификаторов. Список не отсортирован, если sort_results равен ``0`` (символ или число), в противном случае он сортируется в алфавитном порядке по имени идентификатора. URL-адреса генерируются так же, как столбец встроенных идентификаторов, когда они отображаются в :guilabel:`Подробности книги`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:621
msgid "More complex programs in template expressions - Template Program Mode"
msgstr "Более сложные программы в шаблонных выражениях - Template Program Mode"

#: ../../__w/calibre/calibre/manual/template_lang.rst:623
msgid ""
"`Template Program Mode` (`TPM`) is a blend of :ref:`General Program Mode "
"<general_mode>` and :ref:`Single Function Mode <single_mode>`. `TPM` differs"
" from Single Function Mode in that it permits writing template expressions "
"that refer to other metadata fields, use nested functions, modify variables,"
" and do arithmetic. It differs from `General Program Mode` in that the "
"template is contained between ``{`` and ``}`` characters and doesn't begin "
"with the word ``program:``. The program portion of the template is a General"
" Program Mode expression list."
msgstr "`Template Program Mode` (`TPM`) - смесь :ref:`General Program Mode` и :ref:` Single Function Mode`. TPM отличается от режима одиночной функции тем, что он позволяет писать шаблонные выражения, которые ссылаются на другие поля метаданных, используют вложенные функции, изменяют переменные и выполняют арифметические операции. Он отличается от `General Program Mode` тем, что шаблон заключен между символами``{`` и``}``и не начинается со слова ``program:``. Программная часть шаблона - это список выражений General Program Mode."

#: ../../__w/calibre/calibre/manual/template_lang.rst:626
msgid ""
"Example: assume you want a template to show the series for a book if it has "
"one, otherwise show the value of a custom field #genre. You cannot do this "
"in the :ref:`Single Function Mode <single_mode>` because you cannot make "
"reference to another metadata field within a template expression. In `TPM` "
"you can, as the following expression demonstrates::"
msgstr "Пример: предположим, что вы хотите, чтобы шаблон отображал серию книги, если она есть, в противном случае показывала бы значение настраиваемого поля #genre. Вы не можете сделать это в :ref:`Single Function Mode <single_mode>`, потому что вы не можете ссылаться на другое поле метаданных в выражении шаблона. В `TPM` это можно сделать, как демонстрирует следующее выражение::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:631
msgid "The example shows several things:"
msgstr "Пример показывает несколько вещей:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:633
msgid ""
"`TPM` is used if the expression begins with ``:'`` and ends with ``'}``. "
"Anything else is assumed to be in :ref:`Single Function Mode <single_mode>`."
msgstr "`TPM` используется, если выражение начинается с ``:'`` и заканчивается ``'}``. Предполагается, что все остальное находится в :ref:`Single Function Mode<single_mode>`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:634
msgid ""
"the variable ``$`` stands for the field named in the template: the "
"expression is operating upon, ``#series`` in this case."
msgstr "переменная ``$`` обозначает поле, указанное в шаблоне: в данном случае используется выражение ``#series``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:635
msgid ""
"functions must be given all their arguments. There is no default value. For "
"example, the standard built-in functions must be given an additional initial"
" parameter indicating the source field."
msgstr "функциям должны быть даны все их аргументы. Нет значения по умолчанию. Например, стандартные встроенные функции должны иметь дополнительный начальный параметр, указывающий исходное поле."

#: ../../__w/calibre/calibre/manual/template_lang.rst:636
msgid "white space is ignored and can be used anywhere within the expression."
msgstr "пробелы игнорируются и могут использоваться в любом месте выражения."

#: ../../__w/calibre/calibre/manual/template_lang.rst:637
msgid ""
"constant strings are enclosed in matching quotes, either ``'`` or ``\"``."
msgstr "константные строки заключаются в соответствующие кавычки, либо ``'``, либо ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:639
msgid ""
"All the functions listed under `Single Function Mode` and `General Program "
"Mode` can be used in `TPM`."
msgstr "В TPM могут использоваться все функции, перечисленные в разделах `Single Function Mode` и `General Program Mode`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:641
msgid ""
"In `TPM`, using ``{`` and ``}`` characters in string literals can lead to "
"errors or unexpected results because they confuse the template processor. It"
" tries to treat them as template expression boundaries, not characters. In "
"some but not all cases you can replace a ``{`` with ``[[`` and a ``}`` with "
"`]]`. Generally, if your program contains ``{`` and ``}`` characters then "
"you should use `General Program Mode`."
msgstr "В TPM использование символов ``{`` и ``}`` в строковых литералах может привести к ошибкам или неожиданным результатам, поскольку они сбивают с толку обработчик шаблонов. Он пытается рассматривать их как границы выражения шаблона, а не как символы. В некоторых, но не во всех случаях, вы можете заменить ``{`` на ``[[`` и ``}`` на ``]]``. Как правило, если ваша программа содержит символы ``{`` и ​​``}``, вам следует использовать `General Program Mode`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:643
msgid ""
"As with `General Program Mode`, for functions documented under :ref:`Single "
"Function Mode <single_mode>` you must supply the value the function is to "
"act upon as the first parameter in addition to the documented parameters. In"
" `TPM` you can use ``$`` to access the value specified by the ``lookup "
"name`` for the template expression."
msgstr "Как и в ``General Program Mode``, для функций, описанных в :ref:`Single Function Mode <single_mode>`, вы должны указать значение, которое функция должна использовать в качестве первого параметра в дополнение к документированным параметрам. В TPM вы можете использовать ``$`` для доступа к значению, указанному в ``lookup name`` имени поиска для шаблонного выражения."

#: ../../__w/calibre/calibre/manual/template_lang.rst:648
msgid "Python Template Mode"
msgstr "Режим шаблона Python"

#: ../../__w/calibre/calibre/manual/template_lang.rst:650
msgid ""
"Python Template Mode (PTM) lets you write templates using native python and "
"the `calibre API <https://manual.calibre-ebook.com/develop.html#api-"
"documentation-for-various-parts-of-calibre>`_. The database API will be of "
"most use; further discussion is beyond the scope of this manual. PTM "
"templates are faster and can do more complicated operations but you must "
"know how to write code in python using the calibre API."
msgstr "Режим шаблонов Python (PTM) позволяет создавать шаблоны с использованием родного Python и  `calibre API <https://manual.calibre-ebook.com/develop.html#api-documentation-for-various-parts-of-calibre>`_. API базы данных будет наиболее полезным; дальнейшее обсуждение выходит за рамки данного руководства. Шаблоны PTM быстрее и могут выполнять более сложные операции, но вы должны знать, как писать код на python, используя calibre API."

#: ../../__w/calibre/calibre/manual/template_lang.rst:652
msgid "A PTM template begins with:"
msgstr "Шаблон PTM начинается с:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:670
msgid ""
"You can add the above text to your template using the context menu, usually "
"accessed with a right click. The comments are not significant and can be "
"removed. You must use python indenting."
msgstr "Вы можете добавить приведенный выше текст в свой шаблон с помощью контекстного меню, доступ к которому обычно осуществляется с помощью щелчка правой кнопкой мыши. Комментарии несущественны и могут быть удалены. Вы должны использовать отступы Python."

#: ../../__w/calibre/calibre/manual/template_lang.rst:672
msgid ""
"The context object supports ``str(context)`` that returns a string of the "
"context's contents, and ``context.attributes`` that returns a list of the "
"attribute names in the context."
msgstr "Объект контекста поддерживает ``str(context)``, который возвращает строку содержимого контекста, и ``context.attributes``, который возвращает список имён атрибутов в контексте."

#: ../../__w/calibre/calibre/manual/template_lang.rst:674
msgid ""
"The ``context.funcs`` attribute allows calling Built-in and User template "
"functions, and Stored GPM/Python templates, so that you can execute them "
"directly in your code. The functions are retrieved using their names. If the"
" name conflicts with a Python keyword, add an underscore to the end of the "
"name. Examples:"
msgstr "Атрибут ``context.funcs`` позволяет вызывать встроенные и пользовательские функции шаблонов, а также Сохранённые шаблоны GPM/Python, чтобы вы могли выполнять их непосредственно в своем коде. Функции извлекаются по их именам. Если имя конфликтует с ключевым словом Python, добавьте в конце имени символ подчеркивания. Примеры:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:681
msgid ""
"Here is an example of a PTM template that produces a list of all the authors"
" for a series. The list is stored in a `Column built from other columns, "
"behaves like tags`. It shows in :guilabel:`Book details` and has the "
":guilabel:`on separate lines` checked (in :guilabel:`Preferences->Look & "
"feel->Book details`). That option requires the list to be comma-separated. "
"To satisfy that requirement the template converts commas in author names to "
"semicolons then builds a comma-separated list of authors. The authors are "
"then sorted, which is why the template uses author_sort."
msgstr "Вот пример шаблона PTM, который создает список всех авторов серии. Список хранится как  `Столбец, состоящий из других столбцов, ведущих себя как теги`. Он отображается в :guilabel:`Описание книги` и отмечен как :guilabel:`Категории в отдельных строках` (в :guilabel:`Настройки->Оформление->Описание книги`). Этот параметр требует, чтобы список был разделён запятыми. Чтобы удовлетворить это требование, шаблон преобразует запятые в именах авторов в точки с запятой, а затем создаёт список авторов, разделённых запятыми. Затем авторы сортируются, поэтому в шаблоне используется author_sort."

#: ../../__w/calibre/calibre/manual/template_lang.rst:702
msgid "The output in :guilabel:`Book details` looks like this:"
msgstr "Вывод в :guilabel:`Описание книги` выглядит так:"

#: ../../__w/calibre/calibre/manual/template_lang.rst-1
msgid "E-book conversion dialog"
msgstr "Диалог конвертации электронной книги"

#: ../../__w/calibre/calibre/manual/template_lang.rst:710
msgid "Stored templates"
msgstr "Сохранённые шаблоны"

#: ../../__w/calibre/calibre/manual/template_lang.rst:712
msgid ""
"Both :ref:`General Program Mode <general_mode>` and :ref:`Python Template "
"Mode <python_mode>` support saving templates and calling those templates "
"from another template, much like calling stored functions. You save "
"templates using :guilabel:`Preferences->Advanced->Template functions`. More "
"information is provided in that dialog. You call a template the same way you"
" call a function, passing positional arguments if desired. An argument can "
"be any expression. Examples of calling a template, assuming the stored "
"template is named ``foo``:"
msgstr "И :ref:`Общий программный режим <general_mode>`, и :ref:`Режим шаблона Python <python_mode>` поддерживают сохранение шаблонов и вызов этих шаблонов из другого шаблона, во многом аналогично вызову хранимых функций. Вы сохраняете шаблоны, используя :guilabel:`Настройки->Расширенные->Шаблонные функции`. В этом диалоговом окне - ​​дополнительная информация. Вы вызываете шаблон так же, как вызываете функцию, передавая позиционные аргументы, если необходимо. Аргументом может быть любое выражение. Примеры вызова шаблона, предполагая, что сохраненный шаблон называется ``foo``:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:714
msgid "``foo()`` -- call the template passing no arguments."
msgstr "``foo()`` -- вызов шаблона без аргументов."

#: ../../__w/calibre/calibre/manual/template_lang.rst:715
msgid ""
"``foo(a, b)`` call the template passing the values of the two variables "
"``a`` and ``b``."
msgstr "``foo(a, b)`` вызывает шаблон, передавая значения переменных ``a`` и ``b``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:716
msgid ""
"``foo(if field('series') then field('series_index') else 0 fi)`` -- if the "
"book has a ``series`` then pass the ``series_index``, otherwise pass the "
"value ``0``."
msgstr "``foo(if field('series') then field('series_index') else 0 fi)`` -- если в книге есть ``series``, то передать ``series_index``, в противном случае - значение ``0``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:718
msgid ""
"In GPM you retrieve the arguments passed in the call to the stored template "
"using the ``arguments`` function. It both declares and initializes local "
"variables, effectively parameters. The variables are positional; they get "
"the value of the parameter given in the call in the same position. If the "
"corresponding parameter is not provided in the call then ``arguments`` "
"assigns that variable the provided default value. If there is no default "
"value then the variable is set to the empty string. For example, the "
"following ``arguments`` function declares 2 variables, ``key``, "
"``alternate``::"
msgstr "В GPM вы извлекаете аргументы, переданные при вызове сохраненного шаблона, с помощью функции ``arguments``. Она и объявляет, и инициализирует локальные переменные, фактически параметры. Переменные являются позиционными; они получают значение параметра, заданного при вызове, в той же позиции. Если соответствующий параметр не указан в вызове, тогда ``arguments`` присваивает этой переменной предоставленное значение по умолчанию. Если значение по умолчанию отсутствует, переменной присваивается пустая строка. Например, следующая функция ``arguments`` объявляет 2 переменные, ``key``, ``alternate``::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:722
msgid "Examples, again assuming the stored template is named ``foo``:"
msgstr "Примеры, снова предполагаем, что сохраненный шаблон назван ``foo``:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:724
msgid ""
"``foo('#myseries')`` -- argument ``key`` is assigned the value "
"``'myseries'`` and the argument ``alternate`` is assigned the default value "
"``'series'``."
msgstr "``foo('#myseries')`` -- аргументу ``key`` присваивается значение ``'myseries'``, а аргументу ``alternate`` присваивается значение по умолчанию ``'series'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:725
msgid ""
"``foo('series', '#genre')`` the variable ``key`` is assigned the value "
"``'series'`` and the variable ``alternate`` is assigned the value "
"``'#genre'``."
msgstr "``foo('series', '#genre') переменной ``key`` присваивается значение ``'series'``, а переменной ``alternate`` присваивается значение ``'#genre'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:726
msgid ""
"``foo()`` -- the variable ``key`` is assigned the empty string and the "
"variable ``alternate`` is assigned the value ``'series'``."
msgstr "``foo()`` - переменной ``key`` присваивается пустая строка, а переменной ``alternate`` присваивается значение ``'series'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:728
msgid ""
"In PTM the arguments are passed in the ``arguments`` parameter, which is a "
"list of strings. There isn't any way to specify default values. You must "
"check the length of the ``arguments`` list to be sure that the number of "
"arguments is what you expect."
msgstr "В PTM аргументы передаются в параметре ``arguments``, который представляет собой список строк. Невозможно указать значения по умолчанию. Вы должны проверить длину списка ``аргументов``, чтобы убедиться, что количество аргументов соответствует ожидаемому."

#: ../../__w/calibre/calibre/manual/template_lang.rst:730
msgid ""
"An easy way to test stored templates is using the ``Template tester`` "
"dialog. For ease of access give it a keyboard shortcut in "
":guilabel:`Preferences->Advanced->Keyboard shortcuts->Template tester`. "
"Giving the ``Stored templates`` dialog a shortcut will help switching more "
"rapidly between the tester and editing the stored template's source code."
msgstr "Простой способ проверить сохраненные шаблоны - использовать диалоговое окно ``Тестер шаблонов``. Для облегчения доступа используйте сочетание клавиш в :guilabel:`Preferences-Advanced-Keyboard shortcuts-Template tester`. Ярлык для диалогового окна ``Сохраненные шаблоны``' поможет быстрее переключаться между тестером и редактированием исходного кода сохраненного шаблона."

#: ../../__w/calibre/calibre/manual/template_lang.rst:733
msgid "Providing additional information to templates"
msgstr "Передача шаблонам дополнительной информации"

#: ../../__w/calibre/calibre/manual/template_lang.rst:735
msgid ""
"A developer can choose to pass additional information to the template "
"processor, such as application-specific book metadata or information about "
"what the processor is being asked to do. A template can access this "
"information and use it during the evaluation."
msgstr "Разработчик может выбрать передачу дополнительной информации процессору шаблонов, например метаданные книги для конкретного приложения или информацию о том, что процессору предлагается сделать. Шаблон может получить доступ к этой информации и использовать ее во время оценки."

#: ../../__w/calibre/calibre/manual/template_lang.rst:737
msgid "**Developer: how to pass additional information**"
msgstr "** Разработчик: как передать дополнительную информацию **"

#: ../../__w/calibre/calibre/manual/template_lang.rst:739
msgid ""
"The additional information is a Python dictionary containing pairs "
"``variable_name: variable_value`` where the values must be strings. The "
"template can access the dict, creating template local variables named "
"``variable_name`` containing the value ``variable_value``. The user cannot "
"change the name so it is best to use names that won't collide with other "
"template local variables, for example by prefixing the name with an "
"underscore."
msgstr "Дополнительная информация - это словарь ``dict`` Python, содержащий пары ``имя_переменной: значение_переменной``, где значения должны быть строками. Шаблон может получить доступ к ``dict``, создавая локальные переменные шаблона с именем ``variable_name``, содержащие значение ``variable_value``. Пользователь не может изменить имя, поэтому лучше использовать имена, которые не будут конфликтовать с другими локальными переменными шаблона, например, добавив к имени префикс подчеркивания _."

#: ../../__w/calibre/calibre/manual/template_lang.rst:741
msgid ""
"This dict is passed to the template processor (the ``formatter``) using the "
"named parameter ``global_vars=your_dict``. The full method signature is::"
msgstr "Этот dict передается процессору шаблонов (``formatter``) с использованием именованного параметра ``global_vars=your_dict``. Полная сигнатура метода::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:749
msgid "**Template writer: how to access the additional information**"
msgstr "** Автор шаблона: как получить доступ к дополнительной информации **"

#: ../../__w/calibre/calibre/manual/template_lang.rst:751
msgid ""
"You access the additional information (the ``globals`` dict) in a template "
"using the template function::"
msgstr "Вы получаете доступ к дополнительной информации (словарю globals) в шаблоне с помощью шаблонной функции::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:755
msgid ""
"where ``id`` is any legal variable name. This function checks whether the "
"additional information provided by the developer contains the name. If it "
"does then the function assigns the provided value to a template local "
"variable with that name. If the name is not in the additional information "
"and if an ``expression`` is provided, the ``expression`` is evaluated and "
"the result is assigned to the local variable. If neither a value nor an "
"expression is provided, the function assigns the empty string (``''``) to "
"the local variable."
msgstr "где ``id`` - любое допустимое имя переменной. Эта функция проверяет, содержит ли дополнительная информация, предоставленная разработчиком, имя. Если это так, функция присваивает предоставленное значение локальной переменной шаблона с этим именем. Если имя отсутствует в дополнительной информации и если предоставлено ``expression``, то ``expression`` оценивается, и результат присваивается локальной переменной. Если ни значение, ни выражение не предоставлены, функция присваивает пустую строку  (``''``) локальной переменной."

#: ../../__w/calibre/calibre/manual/template_lang.rst:757
msgid ""
"A template can set a value in the ``globals`` dict using the template "
"function::"
msgstr "Шаблон может установить значение в слове ``globals`` с помощью шаблонной функции::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:761
msgid ""
"This function sets the ``globals`` dict key:value pair ``id:value`` where "
"``value`` is the value of the template local variable ``id``. If that local "
"variable doesn't exist then ``value`` is set to the result of evaluating "
"``expression``."
msgstr "Эта функция устанавливает ``globals`` dict key:value пару ``id:value``, где value - значение шаблонной локальной переменной ``id``. Если эта локальная переменная не существует, тогда ``value`` устанавливается равным результату вычисления выражения ``expression``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:764
msgid "Notes on the difference between modes"
msgstr "Замечания о разнице между режимами"

#: ../../__w/calibre/calibre/manual/template_lang.rst:766
msgid ""
"The three program modes, :ref:`Single Function Mode <single_mode>` (SFM), "
":ref:`Template Program Mode <template_mode>` (`TPM`), and :ref:`General "
"Program Mode <general_mode>` (`GPM`), work differently. SFM is intended to "
"be 'simple' so it hides a lot of programming language bits."
msgstr "Три программных режима :ref:`Single Function Mode <single_mode>` (SFM), :ref:`Template Program Mode <template_mode>` (`TPM`) и :ref:`General Program Mode <general_mode>` (`GPM`) работают по-разному. SFM задуман как 'простой', поэтому он скрывает много тонкостей в языке программирования."

#: ../../__w/calibre/calibre/manual/template_lang.rst:768
msgid "Differences:"
msgstr "Различия:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:770
msgid ""
"In SFM the value of the column is always passed as an 'invisible' first "
"argument to a function included in the template."
msgstr "В SFM значение столбца всегда передается как 'invisible' «невидимый» первый аргумент функции, включенной в шаблон."

#: ../../__w/calibre/calibre/manual/template_lang.rst:771
msgid ""
"SFM doesn't support the difference between variables and strings; all values"
" are strings."
msgstr "SFM не поддерживает разницу между переменными и строками; все значения являются строками."

#: ../../__w/calibre/calibre/manual/template_lang.rst:772
msgid ""
"The following SFM template returns either the series name or the string \"no"
" series\"::"
msgstr "Следующий шаблон SFM возвращает либо название серии, либо строку \"no series\"::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:776
msgid "The equivalent template in `TPM` is ::"
msgstr "Эквивалентный шаблон в `TPM` ::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:780
msgid "The equivalent template in `GPM` is::"
msgstr "Эквивалентный шаблон в `GPM` ::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:784
msgid ""
"The first argument to ``ifempty`` is the value of the field ``series``. The "
"second argument is the string ``no series``. In SFM the first argument, the "
"value of the field, is automatically passed (the invisible argument)."
msgstr "Первый аргумент ``ifempty`` - это значение поля ``series``. Второй аргумент - это строка ``no series``. В SFM автоматически передается первый аргумент, значение поля (невидимый аргумент)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:785
msgid ""
"Several template functions, for example ``booksize()`` and "
"``current_library_name()``, take no arguments. Because of the 'invisible "
"argument' you cannot use these functions in SFM."
msgstr "Некоторые функции-шаблоны, например, ``booksize()`` и ``current_library_name()``, не принимают аргументов. Из-за 'невидимого аргумента' вы не можете использовать эти функции в SFM."

#: ../../__w/calibre/calibre/manual/template_lang.rst:786
msgid ""
"Nested functions, where a function calls another function to compute an "
"argument, cannot be used in SFM. For example this template, intended to "
"return the first 5 characters of the series value uppercased, won't work in "
"SFM::"
msgstr "Вложенные функции, когда функция вызывает другую функцию для вычисления аргумента, не могут использоваться в SFM. Например, этот шаблон, предназначенный для возврата первых 5 символов значения серии в верхнем регистре, не будет работать в SFM::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:790
msgid ""
"`TPM` and `GPM` support nested functions. The above template in `TPM` would "
"be::"
msgstr "`TPM` и `GPM` поддерживают вложенные функции. Вышеупомянутый шаблон в `TPM` будет::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:794
msgid "In `GPM` it would be::"
msgstr "В GPM это было бы::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:798
msgid ""
"As noted in the above :ref:`Template Program Mode <template_mode>` section, "
"using ``{`` and ``}`` characters in `TPM` string literals can lead to errors"
" or unexpected results because they confuse the template processor. It tries"
" to treat them as template boundaries, not characters. In some but not all "
"cases you can replace a ``{`` with ``[[`` and a ``}`` with `]]`. Generally, "
"if your program contains ``{`` and ``}`` characters then you should use "
"`General Program Mode`."
msgstr "Как отмечалось выше в разделе :ref:`Template Program Mode`, использование символов ``{`` и``}`` в строковых литералах `TPM` может привести к ошибкам или неожиданным результатам, поскольку они сбивают с толку обработчик шаблонов. Он пытается рассматривать их как границы шаблона, а не как символы. В некоторых, но не во всех случаях, вы можете заменить ``{`` на ``[[`` и ``}`` на `]]`. Как правило, если ваша программа содержит символы ``{`` и ​​``}``, вам следует использовать `General Program Mode`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:802
msgid "User-defined Python template functions"
msgstr "Пользовательские шаблонные функции Python"

#: ../../__w/calibre/calibre/manual/template_lang.rst:804
msgid ""
"You can add your own Python functions to the template processor. Such "
"functions can be used in any of the three template programming modes. The "
"functions are added by going to :guilabel:`Preferences -> Advanced -> "
"Template functions`. Instructions are shown in that dialog."
msgstr "Вы можете добавить свои собственные функции Python в обработчик шаблонов. Такие функции можно использовать в любом из трех режимов программирования шаблона. Функции добавляются в :guilabel:`Preferences - Advanced - Template functions`. Инструкции отображаются в этом диалоговом окне."

#: ../../__w/calibre/calibre/manual/template_lang.rst:807
msgid "Special notes for save/send templates"
msgstr "Особые примечания для шаблонов сохранения/отправки"

#: ../../__w/calibre/calibre/manual/template_lang.rst:809
msgid ""
"Special processing is applied when a template is used in a `save to disk` or"
" `send to device` template. The values of the fields are cleaned, replacing "
"characters that are special to file systems with underscores, including "
"slashes. This means that field text cannot be used to create folders. "
"However, slashes are not changed in prefix or suffix strings, so slashes in "
"these strings will cause folders to be created. Because of this, you can "
"create variable-depth folder structure."
msgstr "Специальная обработка применяется, когда шаблон используется в шаблоне `save to disk` или `send to device`. Значения полей очищаются, заменяя символы, специальные для файловых систем, подчеркиванием, включая косую черту. Это означает, что текст поля нельзя использовать для создания папок. Однако косые черты не изменяются в строках префиксов или суффиксов, поэтому косые черты в этих строках вызовут создание папок. Благодаря этому вы можете создать структуру папок переменной глубины."

#: ../../__w/calibre/calibre/manual/template_lang.rst:811
msgid ""
"For example, assume we want the folder structure `series/series_index - "
"title`, with the caveat that if series does not exist, then the title should"
" be in the top folder. The template to do this is::"
msgstr "Например, предположим, что нам нужна структура папок `series/series_index - title`, с оговоркой, что если серия не существует, то заголовок должен находиться в верхней папке. Шаблон для этого::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:815
msgid "The slash and the hyphen appear only if series is not empty."
msgstr "Косая черта и дефис появляются только в том случае, если серия не пуста."

#: ../../__w/calibre/calibre/manual/template_lang.rst:817
msgid ""
"The lookup function lets us do even fancier processing. For example, assume "
"that if a book has a series, then we want the folder structure "
"`series/series index - title.fmt`. If the book does not have a series then "
"we want the folder structure `genre/author_sort/title.fmt`. If the book has "
"no genre then we want to use 'Unknown'. We want two completely different "
"paths, depending on the value of series."
msgstr "Функция поиска позволяет нам выполнять еще более интересную обработку. Например, предположим, что если в книге есть серия, то нам нужна структура папок `series/series index - title.fmt`. Если в книге нет серии, нам нужна структура папок `genre/author_sort/title.fmt`. Если у книги нет жанра, мы хотим использовать 'Unknown'. Нам нужны два совершенно разных пути, в зависимости от значения серии."

#: ../../__w/calibre/calibre/manual/template_lang.rst:819
msgid "To accomplish this, we:"
msgstr "Чтобы этого добиться, мы:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:821
msgid ""
"Create a composite field (give it lookup name #aa) containing "
"``{series}/{series_index} - {title}``. If the series is not empty, then this"
" template will produce `series/series_index - title`."
msgstr "Создать составное поле (дать ему имя для поиска #aa), содержащее ``{series}/{series_index} - {title}``. Если серия не пуста, тогда этот шаблон создаст `series/series_index - title`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:822
msgid ""
"Create a composite field (give it lookup name #bb) containing "
"``{#genre:ifempty(Unknown)}/{author_sort}/{title}``. This template produces "
"`genre/author_sort/title`, where an empty genre is replaced with `Unknown`."
msgstr "Создать составное поле (дать ему имя для поиска #bb), содержащее ``{#genre: ifempty (Unknown)}/{author_sort}/{title}``. Этот шаблон создаст `genre /author_sort/title`, где пустой жанр заменяется на `Unknown`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:823
msgid ""
"Set the save template to ``{series:lookup(.,#aa,#bb}``. This template "
"chooses composite field ``#aa`` if series is not empty and composite field "
"``#bb`` if series is empty. We therefore have two completely different save "
"paths, depending on whether or not `series` is empty."
msgstr "Установить для шаблона сохранения значение ``{series:lookup(.,#aa,#bb}``. Этот шаблон выбирает составное поле ``#aa``, если серия не пуста, и составное поле ``#bb``, если серия пуста, поэтому у нас есть два совершенно разных пути сохранения, в зависимости от того, пуста ли `series`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:826
msgid "Templates and plugboards"
msgstr "Шаблоны и коммутации"

#: ../../__w/calibre/calibre/manual/template_lang.rst:828
msgid ""
"Plugboards are used for changing the metadata written into books during "
"send-to-device and save-to-disk operations. A plugboard permits you to "
"specify a template to provide the data to write into the book's metadata. "
"You can use plugboards to modify the following fields: authors, author_sort,"
" language, publisher, tags, title, title_sort. This feature helps people who"
" want to use different metadata in books on devices to solve sorting or "
"display issues."
msgstr "Коммутационные панели используются для изменения метаданных, записанных в книги, во время операций отправки на устройство и сохранения на диск. Коммутационная панель позволяет указать шаблон предоставления данных для записи в метаданные книги. Вы можете использовать коммутационные панели для изменения следующих полей: authors, author_sort, language, publisher, tags, title, title_sort. Эта функция помогает в использовании разных метаданных в книгах на устройствах, решении проблем сортировки или отображения."

#: ../../__w/calibre/calibre/manual/template_lang.rst:830
msgid ""
"When you create a plugboard, you specify the format and device for which the"
" plugboard is to be used. A special device is provided, ``save_to_disk``, "
"that is used when saving formats (as opposed to sending them to a device). "
"Once you have chosen the format and device, you choose the metadata fields "
"to change, providing templates to supply the new values. These templates are"
" `connected` to their destination fields, hence the name `plugboards`. You "
"can of course use composite columns in these templates."
msgstr "При создании коммутационной панели вы указываете формат и устройство, для которых она будет использоваться. Предоставляется специальное устройство ``save_to_disk``, которое используется при сохранении форматов (в отличие от их отправки на устройство). После того, как вы выбрали формат и устройство, вы выбираете поля метаданных, которые нужно изменить, предоставляя шаблоны для предоставления новых значений. Эти шаблоны `присоединены` к своим полям назначения, отсюда и название `plugboards`. Конечно, в этих шаблонах можно использовать составные столбцы."

#: ../../__w/calibre/calibre/manual/template_lang.rst:832
msgid ""
"When a plugboard might apply (Content server, save to disk, or send to "
"device), calibre searches the defined plugboards to choose the correct one "
"for the given format and device. For example, to find the appropriate "
"plugboard for an EPUB book being sent to an ANDROID device, calibre searches"
" the plugboards using the following search order:"
msgstr "Когда может применяться коммутационная панель (контент-сервер, сохранение на диск или отправка на устройство), calibre выполняет поиск определенных подключаемых модулей, чтобы выбрать правильный вариант для данного формата и устройства. Например, чтобы найти подходящую коммутационную панель для книги EPUB, отправляемой на устройство ANDROID, calibre выполняет поиск в коммутационных панелях, используя следующий порядок поиска:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:836
msgid ""
"a plugboard with an exact match on format and device, e.g., ``EPUB`` and "
"``ANDROID``"
msgstr "коммутационная панель с точным соответствием по формату и устройству, например, ``EPUB`` и ``ANDROID``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:837
msgid ""
"a plugboard with an exact match on format and the special ``any device`` "
"choice, e.g., ``EPUB`` and ``any device``"
msgstr "коммутационная панель с точным соответствием по формату и специальным выбором ``any device``, например, ``EPUB`` и ``any device``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:838
msgid ""
"a plugboard with the special ``any format`` choice and an exact match on "
"device, e.g., ``any format`` and ``ANDROID``"
msgstr "коммутационная панель со специальным выбором ``any format`` и точным соответствием на устройстве, например, ``any format`` и ``ANDROID``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:839
msgid "a plugboard with ``any format`` and ``any device``"
msgstr "коммутационная панель с ``any format`` и ``any device``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:841
msgid ""
"The tags and authors fields have special treatment, because both of these "
"fields can hold more than one item. A book can have many tags and many "
"authors. When you specify that one of these two fields is to be changed, the"
" template's result is examined to see if more than one item is there. For "
"tags, the result is cut apart wherever calibre finds a comma. For example, "
"if the template produces the value ``Thriller, Horror``, then the result "
"will be two tags, ``Thriller`` and ``Horror``. There is no way to put a "
"comma in the middle of a tag."
msgstr "Поля тегов и авторов обрабатываются по-особому, потому что оба эти поля могут содержать более одного элемента. У книги может быть много тегов и много авторов. Когда вы указываете, что одно из этих двух полей должно быть изменено, результат шаблона проверяется, чтобы увидеть, есть ли там более одного элемента. Для тегов результат будет разделен на части, если calibre найдет запятую. Например, если в шаблоне выдается значение ``Thriller, Horror``, результатом будут два тега: ``Thriller`` и ``Horror``. Невозможно поставить запятую в середине тега."

#: ../../__w/calibre/calibre/manual/template_lang.rst:844
msgid ""
"The same thing happens for authors, but using a different character for the "
"cut, a `&` (ampersand) instead of a comma. For example, if the template "
"produces the value ``Blogs, Joe&Posts, Susan``, then the book will end up "
"with two authors, ``Blogs, Joe`` and ``Posts, Susan``. If the template "
"produces the value ``Blogs, Joe;Posts, Susan``, then the book will have one "
"author with a rather strange name."
msgstr "То же самое происходит с авторами, но с использованием другого символа для сокращения, `&` (амперсанд) вместо запятой. Например, если в шаблоне указано значение ``Blogs, Joe&Posts, Susan``, тогда в книге будет два автора: ``Blogs, Joe`` и ``Posts, Susan``. Если шаблон выдает значение ``Blogs, Joe;Posts, Susan``, то у книги будет один автор с довольно странным именем."

#: ../../__w/calibre/calibre/manual/template_lang.rst:846
msgid ""
"Plugboards affect the metadata written into the book when it is saved to "
"disk or written to the device. Plugboards do not affect the metadata used by"
" ``save to disk`` and ``send to device`` to create the file names. Instead, "
"file names are constructed using the templates entered on the appropriate "
"preferences window."
msgstr "Плагины влияют на метаданные, записанные в книгу, когда они сохраняются на диск или записываются на устройство. Плагины не влияют на метаданные, используемые командами «сохранить на диск» и «отправить на устройство» для создания имен файлов. Вместо этого имена файлов создаются с использованием шаблонов, введенных в соответствующем окне настроек."

#: ../../__w/calibre/calibre/manual/template_lang.rst:849
msgid "Tips"
msgstr "Советы"

#: ../../__w/calibre/calibre/manual/template_lang.rst:851
msgid ""
"Use the Template Tester to test templates. Add the tester to the context "
"menu for books in the library and/or give it a keyboard shortcut."
msgstr "Используйте тестер шаблонов для тестирования шаблонов. Добавьте тестер в контекстное меню для книг в библиотеке и/или назначьте ему сочетание клавиш."

#: ../../__w/calibre/calibre/manual/template_lang.rst:852
msgid ""
"Templates can use other templates by referencing composite columns built "
"with the desired template. Alternatively, you can use Stored Templates."
msgstr "Шаблоны могут использовать другие шаблоны, ссылаясь на составные столбцы, построенные с помощью желаемого шаблона. В качестве альтернативы вы можете использовать сохраненные шаблоны."

#: ../../__w/calibre/calibre/manual/template_lang.rst:853
msgid ""
"In a plugboard, you can set a field to empty (or whatever is equivalent to "
"empty) by using the special template ``{}``. This template will always "
"evaluate to an empty string."
msgstr "В коммутации полю можно назначить соответствующее его типу пустое значение при помощи специального шаблона ``{}``. Он всегда соответствует пустой строке."

#: ../../__w/calibre/calibre/manual/template_lang.rst:854
msgid ""
"The technique described above to show numbers even if they have a zero value"
" works with the standard field series_index."
msgstr "Описанный выше метод отображения чисел, даже если они имеют нулевое значение, работает со стандартным полем series_index."

#: ../../__w/calibre/calibre/manual/template_lang.rst:859
msgid "Function reference"
msgstr "Справочник по функциям"
