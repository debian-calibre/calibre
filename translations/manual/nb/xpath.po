# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# Kurt-H책kon Eilertsen <kurt@kheds.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-26 14:20+0530\n"
"PO-Revision-Date: 2014-11-24 19:31+0000\n"
"Last-Translator: Kurt-H책kon Eilertsen <kurt@kheds.com>\n"
"Language-Team: Norwegian Bokm책l (http://www.transifex.com/projects/p/calibre/language/nb/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: nb\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 01ea83298e2a4a8aa8eeef59c6810236
#: ../../home/kovid/work/calibre/manual/xpath.rst:4
msgid "XPath Tutorial"
msgstr ""

# f20979092e4741889feb2e18f44c5bd5
#: ../../home/kovid/work/calibre/manual/xpath.rst:6
msgid ""
"In this tutorial, you will be given a gentle introduction to `XPath "
"<http://en.wikipedia.org/wiki/XPath>`_, a query language that can be used to"
" select arbitrary parts of `HTML <http://en.wikipedia.org/wiki/HTML>`_ "
"documents in calibre. XPath is a widely used standard, and googling it will "
"yield a ton of information. This tutorial, however, focuses on using XPath "
"for ebook related tasks like finding chapter headings in an unstructured "
"HTML document."
msgstr ""

# 38f9285bcb834f0d94f0c6d5c1ae345e
#: ../../home/kovid/work/calibre/manual/xpath.rst:0
msgid "Contents"
msgstr "Innhold"

# a451a3db1455449a99286a040a78a5e2
#: ../../home/kovid/work/calibre/manual/xpath.rst:19
msgid "Selecting by tagname"
msgstr ""

# e0876028356a4cb6a0ff83d767a636fd
#: ../../home/kovid/work/calibre/manual/xpath.rst:21
msgid ""
"The simplest form of selection is to select tags by name. For example, "
"suppose you want to select all the ``<h2>`` tags in a document. The XPath "
"query for this is simply::"
msgstr ""

# 2abadfac1c3645f0af6bded995e1d67e
#: ../../home/kovid/work/calibre/manual/xpath.rst:27
msgid ""
"The prefix `//` means *search at any level of the document*. Now suppose you"
" want to search for ``<span>`` tags that are inside ``<a>`` tags. That can "
"be achieved with::"
msgstr ""

# 331d85cdd0244a21adae658f03679224
#: ../../home/kovid/work/calibre/manual/xpath.rst:33
msgid ""
"If you want to search for tags at a particular level in the document, change"
" the prefix::"
msgstr ""

# bdc3f06a5ca84e98b2cfd284bec48224
#: ../../home/kovid/work/calibre/manual/xpath.rst:39
msgid ""
"This will match only ``<p>A very short ebook to demonstrate the use of "
"XPath.</p>`` in the :ref:`sample_ebook` but not any of the other ``<p>`` "
"tags. The ``h:`` prefix in the above examples is needed to match XHTML tags."
" This is because internally, calibre represents all content as XHTML. In "
"XHTML tags have a *namespace*, and ``h:`` is the namespace prefix for HTML "
"tags."
msgstr ""

# c9c9b8817fa24703be9a77c4b12e0083
#: ../../home/kovid/work/calibre/manual/xpath.rst:45
msgid ""
"Now suppose you want to select both ``<h1>`` and ``<h2>`` tags. To do that, "
"we need a XPath construct called *predicate*. A :dfn:`predicate` is simply a"
" test that is used to select tags. Tests can be arbitrarily powerful and as "
"this tutorial progresses, you will see more powerful examples. A predicate "
"is created by enclosing the test expression in square brackets::"
msgstr ""

# 94cb0d793b9c4759aaf6aa9bbc799024
#: ../../home/kovid/work/calibre/manual/xpath.rst:53
msgid ""
"There are several new features in this XPath expression. The first is the "
"use of the wildcard ``*``. It means *match any tag*. Now look at the test "
"expression ``name()='h1' or name()='h2'``. :term:`name()` is an example of a"
" *built-in function*. It simply evaluates to the name of the tag. So by "
"using it, we can select tags whose names are either `h1` or `h2`. Note that "
"the :term:`name()` function ignores namespaces so that there is no need for "
"the ``h:`` prefix. XPath has several useful built-in functions. A few more "
"will be introduced in this tutorial."
msgstr ""

# 649f51f634b1421d9dd9d9742a99d80a
#: ../../home/kovid/work/calibre/manual/xpath.rst:62
msgid "Selecting by attributes"
msgstr ""

# b960bd34a1bd474fab60960b405e5ff8
#: ../../home/kovid/work/calibre/manual/xpath.rst:64
msgid ""
"To select tags based on their attributes, the use of predicates is "
"required::"
msgstr ""

# a8fcf71117fb44638e12c674c3420546
#: ../../home/kovid/work/calibre/manual/xpath.rst:70
msgid ""
"Here, the ``@`` operator refers to the attributes of the tag. You can use "
"some of the `XPath built-in functions`_ to perform more sophisticated "
"matching on attribute values."
msgstr ""

# ca619008d6a045188092ad2adb01e0e5
#: ../../home/kovid/work/calibre/manual/xpath.rst:76
msgid "Selecting by tag content"
msgstr "Velges blandt tagg innhold"

# be4ab7bd439a41f4a508f5e7a59837d1
#: ../../home/kovid/work/calibre/manual/xpath.rst:78
msgid ""
"Using XPath, you can even select tags based on the text they contain. The "
"best way to do this is to use the power of *regular expressions* via the "
"built-in function :term:`re:test()`::"
msgstr ""

# eb2fd96129db4e55ae7ac64df7e37abe
#: ../../home/kovid/work/calibre/manual/xpath.rst:84
msgid ""
"Here the ``.`` operator refers to the contents of the tag, just as the ``@``"
" operator referred to its attributes."
msgstr ""

# e2a3e5bb9bba4ce782535b8c179cdabf
#: ../../home/kovid/work/calibre/manual/xpath.rst:90
msgid "Sample ebook"
msgstr "E-bok eksempel"

# adfe338eaa5e4045bda39e9ac8ed665f
#: ../../home/kovid/work/calibre/manual/xpath.rst:96
msgid "XPath built-in functions"
msgstr ""

# cf80f282e4ad464d9483e26cfee95bd4
#: ../../home/kovid/work/calibre/manual/xpath.rst:99
msgid "name()"
msgstr "navn()"

# 6add54c1ca7340b194f01ce092ad1a15
#: ../../home/kovid/work/calibre/manual/xpath.rst:101
msgid "The name of the current tag."
msgstr "Navnet p책 gjeldende tagg."

# 5228e314defa436a99e0705272c2a792
#: ../../home/kovid/work/calibre/manual/xpath.rst:102
msgid "contains()"
msgstr "inneholder()"

# 6fd9a7d91ecd417e9de308f682cde974
#: ../../home/kovid/work/calibre/manual/xpath.rst:104
msgid "``contains(s1, s2)`` returns `true` if s1 contains s2."
msgstr ""

# 04b38d21a07749d59e8a9f1a1f7fea79
#: ../../home/kovid/work/calibre/manual/xpath.rst:105
msgid "re:test()"
msgstr ""

# 9f815f3240b2497d898e43674226ee11
#: ../../home/kovid/work/calibre/manual/xpath.rst:107
msgid ""
"``re:test(src, pattern, flags)`` returns `true` if the string `src` matches "
"the regular expression `pattern`. A particularly useful flag is ``i``, it "
"makes matching case insensitive. A good primer on the syntax for regular "
"expressions can be found at `regexp syntax "
"<https://docs.python.org/2.7/library/re.html>`_"
msgstr ""
