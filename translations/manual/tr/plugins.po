# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# tarakbumba <tarakbumba@gmail.com>, 2015
# Emre Deniz, 2014
# Emre Deniz, 2014
# İşbaran Akçayır <isbaran@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-23 08:43+0530\n"
"PO-Revision-Date: 2018-02-23 03:14+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Turkish (http://www.transifex.com/calibre/calibre/language/tr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../home/kovid/work/calibre/manual/plugins.rst:4
msgid "API documentation for plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:9
msgid ""
"Defines various abstract base classes that can be subclassed to create "
"powerful plugins. The useful classes are:"
msgstr "Güçlü eklentiler oluşturmak için alt sınıf yapılabilir çeşitli soyut temel sınıfları tanımlar. Kullanışlı sınıflar şunlardır:"

#: ../../home/kovid/work/calibre/manual/plugins.rst:19
msgid "Plugin"
msgstr "Eklenti"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:1
msgid "A calibre plugin. Useful members include:"
msgstr "Bir calibre eklentisi. Kullanışlı üyeleri şunları içerir:"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:4
msgid "``self.plugin_path``: Stores path to the ZIP file that contains"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:4
msgid "this plugin or None if it is a builtin plugin"
msgstr "içeren zip dosyasına yolu tutar"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:7
msgid "``self.site_customization``: Stores a customization string entered"
msgstr "``self.site_customization``: Kullanıcı tarafından girilen bir özelleştirme"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:7
msgid "by the user."
msgstr "karakter dizisini tutar."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:9
msgid "Methods that should be overridden in sub classes:"
msgstr "Alt sınıflarda ezilmesi gereken metodlar:"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:11
msgid ":meth:`initialize`"
msgstr ":meth:`initialize`"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:12
msgid ":meth:`customization_help`"
msgstr ":meth:`customization_help`"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:14
msgid "Useful methods:"
msgstr "Kullanışlı metodlar:"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:16
msgid ":meth:`temporary_file`"
msgstr ":meth:`temporary_file`"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:17
msgid ":meth:`__enter__`"
msgstr ":meth:`__enter__`"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:18
msgid ":meth:`load_resources`"
msgstr ":meth:`load_resources`"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.supported_platforms:1
msgid ""
"List of platforms this plugin works on. For example: ``['windows', 'osx', "
"'linux']``"
msgstr "Bu eklentinin çalıştığı platformların listesi. Örneğin: ``['windows', 'osx', 'linux']``"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.name:1
msgid ""
"The name of this plugin. You must set it something other than Trivial Plugin"
" for it to work."
msgstr "Bu eklentinin adı. Çalışması için Trivial Plugin dışında bir şeye ayarlamalısınız."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.version:1
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr "Eklentinin 3-lü demet şeklinde sürümü (majör, minör, düzeltme)"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.description:1
msgid "A short string describing what this plugin does"
msgstr "Bu eklentinin ne yaptığını anlatan kısa karakter dizisi"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.author:1
msgid "The author of this plugin"
msgstr "Eklentinin yazarı"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.priority:1
msgid ""
"When more than one plugin exists for a filetype, the plugins are run in "
"order of decreasing priority. Plugins with higher priority will be run "
"first. The highest possible priority is ``sys.maxint``. Default priority is "
"1."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.minimum_calibre_version:1
msgid "The earliest version of calibre this plugin requires"
msgstr "Bu eklentinin gerektirdiği en eski calibre sürümü"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.can_be_disabled:1
msgid ""
"If False, the user will not be able to disable this plugin. Use with care."
msgstr "False ise, kullanıcının bu eklentiyi kapatma şansı olmayacaktır. Dikkatli kullanın."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.type:1
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr "Eklenti türü. Eklentileri GUI'de kategorize etmek için kullanılır"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:1
msgid ""
"Called once when calibre plugins are initialized.  Plugins are re-"
"initialized every time a new plugin is added. Also note that if the plugin "
"is run in a worker process, such as for adding books, then the plugin will "
"be initialized for every new worker process."
msgstr "Calibre eklentileri ilklendirildiğinde bir defa çağrılır.  Eklentiler yeni bir eklenti eklendiğinde her defasında yeniden ilklendirilirler. Ayrıca eklenti bir çalışan süreç içinde çalıştırılırsa, kitap ekleme süreci gibi, eklenti her yeni çalışma süreciyle ilklendirilecektir."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:6
msgid ""
"Perform any plugin specific initialization here, such as extracting "
"resources from the plugin ZIP file. The path to the ZIP file is available as"
" ``self.plugin_path``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:10
msgid ""
"Note that ``self.site_customization`` is **not** available at this point."
msgstr "``self.site_customization`` bu noktada kullanılabilir **değildir**."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:1
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:1
msgid ""
"Implement this method and :meth:`save_settings` in your plugin to use a "
"custom configuration dialog, rather then relying on the simple string based "
"default customization."
msgstr "Basit karakter dizisi temelli varsayılan özelleştirmeye güvenmek yerine bu metodu ve :meth:`save_settings` metodunu eklentinizde uygulayarak özel bir yapılandırma iletişim penceresi kullanın."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:5
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:5
msgid ""
"This method, if implemented, must return a QWidget. The widget can have an "
"optional method validate() that takes no arguments and is called immediately"
" after the user clicks OK. Changes are applied if and only if the method "
"returns True."
msgstr "Bu metod, eğer uygulanırsa, bir QWidget döndürmelidir. Parçacık isteğe bağlı olarak bağımsız değişken almayan bir validate() metoduna sahip olabilir ve kullanıcı Tamama tıklayınca anında çağrılır. Değişiklikler yalnızca metod True döndürürse uygulanır."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:10
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:10
msgid ""
"If for some reason you cannot perform the configuration at this time, return"
" a tuple of two strings (message, details), these will be displayed as a "
"warning dialog to the user and the process will be aborted."
msgstr "Bir sebepten bu aşamada yapılandırma yapamazsanız, iki karakter dizisi içeren bir demet döndürün (ileti, detaylar), bunlar kullanıcıya uyarı penceresi olarak gösterilir ve süreç iptal edilir."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:1
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:1
msgid "Save the settings specified by the user with config_widget."
msgstr "Kullanıcı tarafından config_widget ile belirtilen ayarları kaydet."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:0
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:0
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:0
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:0
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:0
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:0
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:0
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:0
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:0
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:0
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:0
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:0
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:0
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.convert:0
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin.convert:0
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.reset:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.set_progress_reporter:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.can_handle_windows:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.open:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.books:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_books:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_cover:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.add_books_to_metadata:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.sync_booklists:0
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.create_menu_action:0
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.load_resources:0
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.library_changed:0
#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:0
#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:0
msgid "Parameters"
msgstr "Parametreler"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:3
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:3
msgid "The widget returned by :meth:`config_widget`."
msgstr ":meth:`config_widget` tarafından döndürülen parçacık."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.do_user_config:1
msgid ""
"This method shows a configuration dialog for this plugin. It returns True if"
" the user clicks OK, False otherwise. The changes are automatically applied."
msgstr "Bu metod bu eklenti için bir yapılandırma iletişim penceresi gösterir. Kullanıcı Tamama tıklarsa True, yoksa False döndürür. Değişiklikler otomatik olarak uygulanır."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.load_resources:1
msgid ""
"If this plugin comes in a ZIP file (user added plugin), this method will "
"allow you to load resources from the ZIP file."
msgstr "Bu eklenti bir ZIP dosyasıyla gelirse (kullanıcı tarafından eklenmiş eklenti), bu metod ZIP dosyasından kaynakları yüklemenizi sağlar."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:4
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.load_resources:4
msgid "For example to load an image::"
msgstr "Örneğin bir resmi  yüklemek için::"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:10
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.load_resources:10
msgid "List of paths to resources in the ZIP file using / as separator"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:0
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:0
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:0
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:0
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.total_space:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.free_space:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.get_device_information:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.books:0
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_books:0
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.load_resources:0
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.shutting_down:0
msgid "Returns"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:12
msgid ""
"A dictionary of the form ``{name: file_contents}``. Any names that were not "
"found in the ZIP file will not be present in the dictionary."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:1
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:1
msgid ""
"Return a string giving help on how to customize this plugin. By default "
"raise a :class:`NotImplementedError`, which indicates that the plugin does "
"not require customization."
msgstr "Bu eklentinin nasıl özelleştirileceği konusunda yardım veren bir metin. Varsayılan olarak :class:`NotImplementedError` yükseltilir, bu da eklentinin özelleştirmeye ihtiyaç duymadığı anlamına gelir."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:5
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:5
msgid ""
"If you re-implement this method in your subclass, the user will be asked to "
"enter a string as customization for this plugin. The customization string "
"will be available as ``self.site_customization``."
msgstr "Bu metodu alt sınıflarınızda yeniden uyguluyorsanız, kullanıcıdan bu eklenti için özelleştirme olarak kullanılacak bir karakter dizisi girmesi istenir. Özelleştirme karakter dizisi ``self.site_customization`` olarak kullanılabilir olacaktır."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:10
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:10
msgid ""
"Site customization could be anything, for example, the path to a needed "
"binary on the user's computer."
msgstr "Site özelleştirmesi herşey olabilir, örneğin kullanıcının bilgisayarındaki bir ikiliğin yolu."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:13
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:13
msgid "If True return HTML help, otherwise return plain text help."
msgstr "True ise HTML yardımı döndür, yoksa düz metin yardımı."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:1
msgid ""
"Return a file-like object that is a temporary file on the file system. This "
"file will remain available even after being closed and will only be removed "
"on interpreter shutdown. Use the ``name`` member of the returned object to "
"access the full path to the created temporary file."
msgstr "Sistemde geçici bir dosya olan dosya-benzeri nesneyi döndür. Bu dosya kapandıktan sonra bile kullanılabilir olur ve yalnızca yorumlayıcı kapandığında silinir. Oluşturulan geçici dosyanın tam yoluna erişmek için dönen nesnenin ``name`` metodunu kullanın."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:6
msgid "The suffix that the temporary file will have."
msgstr "Geçici dosyanın son eki."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.cli_main:1
msgid ""
"This method is the main entry point for your plugins command line interface."
" It is called when the user does: calibre-debug -r \"Plugin Name\". Any "
"arguments passed are present in the args variable."
msgstr "Bu metod eklentinizin komut satırı arayüzü için ana giriş noktasıdır. Kullanıcı calibre-debug -r \"Eklenti İsmi\" girdiğinde çağrılır. Bağımsız değişkenler args değişkenine mevcuttur."

#: ../../home/kovid/work/calibre/manual/plugins.rst:28
msgid "FileTypePlugin"
msgstr "FileTypePlugin"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin:1
#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin:1
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.InterfaceActionBase:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin:1
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr "Bases: :class:`calibre.customize.Plugin`"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin:1
msgid "A plugin that is associated with a particular set of file types."
msgstr "Belirli bir dosya türü kümesiyle ilişkili eklenti."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run. Use '*' for all file "
"types. For example: ``{'lit', 'mobi', 'prc'}``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_import:1
msgid "If True, this plugin is run when books are added to the database"
msgstr "True ise, bu eklenti kitaplar veri tabanına eklendiğinde çalışır"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_postimport:1
msgid ""
"If True, this plugin is run after books are added to the database. In this "
"case the postimport and postadd methods of the plugin are called."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_preprocess:1
msgid "If True, this plugin is run just before a conversion"
msgstr "True ise, bu eklenti dönüştürme öncesi çalışır"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_postprocess:1
msgid ""
"If True, this plugin is run after conversion on the final file produced by "
"the conversion output plugin."
msgstr "True ise, bu eklenti dönüştürme çıktı eklentisi tarafından üretilen son dosyanın dönüştürmesi sonrası çalışır."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should perform "
"whatever modifications are required on the e-book and return the absolute "
"path to the modified e-book. If no modifications are needed, it should "
"return the path to the original e-book. If an error is encountered it should"
" raise an Exception. The default implementation simply return the path to "
"the original e-book. Note that the path to the original file (before any "
"file type plugins are run, is available as self.original_path_to_file)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:11
msgid ""
"The modified e-book file should be created with the :meth:`temporary_file` "
"method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:14
msgid "Absolute path to the e-book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:16
msgid "Absolute path to the modified e-book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:1
msgid ""
"Called post import, i.e., after the book file has been added to the "
"database. Note that this is different from :meth:`postadd` which is called "
"when the book record is created for the first time. This method is called "
"whenever a new file is added to a book record. It is useful for modifying "
"the book record based on the contents of the newly added file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:6
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:8
msgid "Database id of the added book."
msgstr "Eklenen kitabın veri tabanı kimliği."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:7
msgid "The file type of the book that was added."
msgstr "Eklenen kitabın dosya türü."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:8
msgid "Library database."
msgstr "Kitaplık veri tabanı."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:1
msgid ""
"Called post add, i.e. after a book has been added to the db. Note that this "
"is different from :meth:`postimport`, which is called after a single book "
"file has been added to a book. postadd() is called only when an entire book "
"record with possibly more than one book file has been created for the first "
"time. This is useful if you wish to modify the book record in the database "
"when the book is first added to calibre."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:9
msgid ""
"Map of file format to path from which the file format was added. Note that "
"this might or might not point to an actual existing file, as sometimes files"
" are added as streams. In which case it might be a dummy value or a non-"
"existent path."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:13
msgid "Library database"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:39
msgid "Metadata plugins"
msgstr "Metadata eklentileri"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin:1
msgid "A plugin that implements reading metadata from a set of file types."
msgstr "Bir dosya türü kümesinden metadata okumayı uygulayan bir eklenti."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run. For example: "
"``set(['lit', 'mobi', 'prc'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:1
msgid ""
"Return metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:5
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:5
msgid ""
"The type of file. Guaranteed to be one of the entries in :attr:`file_types`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:7
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:7
msgid "A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:1
msgid ""
"Set metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:54
msgid "Catalog plugins"
msgstr "Katalog eklentileri"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin:1
msgid "A plugin that implements a catalog generator."
msgstr "Bir katalog üreteci uygulayan eklenti."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.file_types:1
msgid ""
"Output file type for which this plugin should be run. For example: 'epub' or"
" 'xml'"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.cli_options:1
msgid ""
"CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr "Bu eklentiye özel CLI ayrıştırıcı seçenekleri, namedtuple Option ile belirtilir::"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.cli_options:3
msgid ""
"from collections import namedtuple Option = namedtuple('Option', 'option, "
"default, dest, help') cli_options = [Option('--catalog-title',"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.cli_options:6
msgid ""
"default = 'My Catalog', dest = 'catalog_title', help = (_('Title of "
"generated catalog. \\nDefault:') + \" '\" + '%default' + \"'\"))]"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.cli_options:10
msgid "cli_options parsed in calibre.db.cli.cmd_catalog:option_parser()"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.initialize:1
msgid ""
"If plugin is not a built-in, copy the plugin's .ui and .py files from the "
"ZIP file to $TMPDIR. Tab will be dynamically generated and added to the "
"Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should generate the "
"catalog in the format specified in file_types, returning the absolute path "
"to the generated catalog file. If an error is encountered it should raise an"
" Exception."
msgstr "Eklentiyi çalıştır. Alt sınıflarda uygulanmalıdır. file_types'da belirtilen biçimde kataloğu üretmelidir, ve üretilen katalog dosyasına mutlak yolu döndürmelidir. Bir hataya rastlanırsa bir Exception yükseltmelidir."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:7
msgid ""
"The generated catalog file should be created with the :meth:`temporary_file`"
" method."
msgstr "Üretilen katalog dosyası :meth:`temporary_file` metoduyla oluşturulmalıdır."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:10
msgid "Absolute path to the generated catalog file."
msgstr "Üretilen katalog dosyasına mutlak yol."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:11
msgid "A dictionary of keyword arguments"
msgstr "Anahtar kelime değişkenlerinden oluşan bir sözlük"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:12
msgid "A LibraryDatabase2 object"
msgstr "Bir LibraryDatabase2 nesnesi"

#: ../../home/kovid/work/calibre/manual/plugins.rst:64
msgid "Metadata download plugins"
msgstr "Metadata indirme eklentileri"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.capabilities:1
msgid ""
"Set of capabilities supported by this plugin. Useful capabilities are: "
"'identify', 'cover'"
msgstr "Bu eklenti tarafından desteklenen yetenek kümesi. Kullanışlı yetenekler: 'identify', 'cover'"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.touched_fields:1
msgid ""
"List of metadata fields that can potentially be download by this plugin "
"during the identify phase"
msgstr "Bu eklenti tarafından tanımlama aşamasında indirilebilme potansiyeline sahip metadata alanları listesi"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr "Eklentiniz HTML biçimli yorumlar döndürüyorsa bunu True olarak ayarlayın"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of
#: calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
msgid ""
"Setting this to True means that the browser object will indicate that it "
"supports gzip transfer encoding. This can speedup downloads but make sure "
"that the source actually supports gzip transfer encoding correctly first"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.ignore_ssl_errors:1
msgid ""
"Set this to True to ignore HTTPS certificate errors when connecting to this "
"source."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of
#: calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
msgid ""
"Cached cover URLs can sometimes be unreliable (i.e. the download could fail "
"or the returned image could be bogus. If that is often the case with this "
"source set to False"
msgstr "Zulalanan kapak URL'leri bazen güvenilmez olabilir (örn. indirme başarısız olabilir veya döndürülen resim sahte olabilir). Bu kaynak için durum genellikle buysa False olarak ayarlayın"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.options:1
msgid ""
"A list of :class:`Option` objects. They will be used to automatically "
"construct the configuration widget for this plugin"
msgstr ":class:`Option` nesneleri listesi. Bu eklenti için otomatik olarak yapılandırma parçacığı inşa etmek için kullanılacaklar"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_help_message:1
msgid ""
"A string that is displayed at the top of the config widget for this plugin"
msgstr "Bu eklenti için ayar penceresinin üstünde gösterilecek bir karakter dizisi"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
msgid "If True this source can return multiple covers for a given query"
msgstr "True ise bu kaynak verilen sorgu için birden çok kapak döndürebilir"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
msgid ""
"If set to True covers downloaded by this plugin are automatically trimmed."
msgstr "True olarak ayarlıysa bu eklenti tarafından indirilen kapaklar otomatik olarak düzeltilir."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.prefer_results_with_isbn:1
msgid ""
"If set to True, and this source returns multiple results for a query, some "
"of which have ISBNs and some of which do not, the results without ISBNs will"
" be ignored"
msgstr "True olarak ayarlanırsa, ve bu kaynak bir sorgu için bazılarında ISBN'ler olan bazılarında olmayan birden çok sonuç döndürüyorsa, ISBN olmayan sonuçlar göz ardı edilir"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.is_configured:1
msgid ""
"Return False if your plugin needs to be configured before it can be used. "
"For example, it might need a username/password/API key."
msgstr "Eklentinizin kullanılmadan önce yapılandırılması gerekiyorsa False döndür. Örneğin bir kullanıcı adı/parola/API anahtarına ihtiyaç duyuyor olabilir."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
msgid ""
"Take a list of authors and return a list of tokens useful for an AND search "
"query. This function tries to return tokens in first name middle names last "
"name order, by assuming that if a comma is in the author name, the name is "
"in lastname, other names form."
msgstr "Bir yazar listesi al ve bir AND arama sorgusu için kulanışlı olacak jeton listesi döndür. Bu fonksiyon ilk ad göbek adı soyad sırasında jeton döndürmeye çalışır, yazar isminde bir virgül varsa, ismin soyad, diğer ad biçiminde olduğunu farz eder."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
msgid ""
"Take a title and return a list of tokens useful for an AND search query. "
"Excludes connectives(optionally) and punctuation."
msgstr "Bir başlık al ve bir AND arama sorgusu için kullanışlı jeton listesi döndür. Bağlaç(isteğe bağlı) ve noktalama işaretleri hariç."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr "Bir iş listesini olabildiğince eşit şekilde en fazla num gruba ayır"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.test_fields:1
msgid ""
"Return the first field from self.touched_fields that is null on the mi "
"object"
msgstr "self.touched_files'dan mi nesnesinde null olan ilk alanı döndür"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
msgid ""
"Call this method in your plugin's identify method to normalize metadata "
"before putting the Metadata object into result_queue. You can of course, use"
" a custom algorithm suited to your metadata source."
msgstr "Bu metodu eklentinizin tanımlama metodunda Metadata nesnesini result_queue'ye koymadan önce metadata'yı normalleştirmek için çağırın. Tabi ki metadata kaynağınıza uygun özel bir algoritma da kullanabilirsiniz."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
msgid ""
"Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, "
"identifier_value, URL). The URL is the URL for the book identified by "
"identifiers at this source. identifier_type, identifier_value specify the "
"identifier corresponding to the URL. This URL must be browseable to by a "
"human using a browser. It is meant to provide a clickable link for the user "
"to easily visit the books page at this source. If no URL is found, return "
"None. This method must be quick, and consistent, so only implement it if it "
"is possible to construct the URL from a known scheme given identifiers."
msgstr "Bir 3-demet veya None döndür. 3-demet şu biçimdedir: (tanımlayıcı_türü, tanımlayıcı_değeri, URL). URL bu kaynaktaki tanımlayıcılar tarafından tanımlanan kitabın URL'sidir. tanımlayıcı_türü, tanımlayıcı_değeri URL ile ilişkili tanımlayıcıya karşılık gelir. Bu URL bir insanın tarayıcıyla gezebileceği bir URL olmalıdır. Kullanıcı için bu kaynaktaki kitapların sayfalarını kolayca gezebileceği bir bağlantı olması amacını taşır. URL bulunamazsa, None döndürür. Bu metod hızlı, tutarlı olmalıdır, yani yalnızca URL'yi tanımlayıcıları verilen bilinen bir plandan oluşturulacaksa uygulayın."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
msgid "Return a human readable name from the return value of get_book_url()."
msgstr "get_book_url()'nin döndürdüğü değerden okunabilir bir isim döndür."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_urls:1
msgid ""
"Override this method if you would like to return multiple urls for this "
"book. Return a list of 3-tuples. By default this method simply calls "
":func:`get_book_url`."
msgstr "Bu kitap için birden fazla url döndürmek isterseniz bu metodun üzerine yazın. 3'lü demet listesi döndürür. Varsayılan olarak bu metod basitçe :func:`get_book_url` çağırır."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
msgid ""
"Return cached cover URL for the book identified by the identifiers dict or "
"None if no such URL exists."
msgstr "Tanımlayıcılar sözlüğünce tanımlanan kitap için zulalanmış kapak URL'sini veya böyle bir URL yoksa None döndür."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
msgid ""
"Note that this method must only return validated URLs, i.e. not URLS that "
"could result in a generic cover image or a not found error."
msgstr "Bu metodun yalnızca doğrulanmış URL'ler döndürmesi gerektiğine dikkat edin, örn. genel kapak resmi veya bulunamadı hatasına yol açacak URL'ler olmamalı."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
msgid ""
"Return a function that is used to generate a key that can sort Metadata "
"objects by their relevance given a search query (title, authors, "
"identifiers)."
msgstr "Bir arama sorgusu (başlık, yazarlar, tanımlayıcılar) alarak Metadata nesnelerini sıralamaya yarayacak bir anahtar üretmeye yarayan bir fonksiyon döndür."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr "Bu anahtarlar :meth:`identify` çağrısı sonucunu sıralamaya yarar."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
msgid ""
"For details on the default algorithm see "
":class:`InternalMetadataCompareKeyGen`. Re-implement this function in your "
"plugin if the default algorithm is not suitable."
msgstr "Varsayılan algoritma detayları için bknz :class:`InternalMetadataCompareKeyGen`. Varsayılan algoritma uygun değilse bu fonksiyonu tekrar uygulayın."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:1
msgid "Identify a book by its title/author/isbn/etc."
msgstr "Bir kitabı başlık/yazar/isbn/vs. özelliğine göre tanımla"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:3
msgid ""
"If identifiers(s) are specified and no match is found and this metadata "
"source does not store all related identifiers (for example, all ISBNs of a "
"book), this method should retry with just the title and author (assuming "
"they were specified)."
msgstr "Tanımlayıcı(lar) belirtilmiş ve bir eşleşme bulunamamışsa ve bu metadata kaynağı ilgili tüm tanımlayıcılar kaydetmemişse (örneğin, bir kitabın tüm ISBN'leri), bu metod sadece başlık ve yazar (belirtildiklerini farz ederek) ile tekrar denemelidir."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:8
msgid ""
"If this metadata source also provides covers, the URL to the cover should be"
" cached so that a subsequent call to the get covers API with the same "
"ISBN/special identifier does not need to get the cover URL again. Use the "
"caching API for this."
msgstr "Bu metadata kaynağı kapak da sağlıyorsa, kapağın URL'si kapak getirme API'si ile tekrar tekrar aynı ISBN/özel tanımlayıcı çağrısı yapıldığında getirilmek zorunda kalınmasın diye zulalanmalıdır. Zulalama API'sini bunun için kullanın."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:13
msgid ""
"Every Metadata object put into result_queue by this method must have a "
"`source_relevance` attribute that is an integer indicating the order in "
"which the results were returned by the metadata source for this query. This "
"integer will be used by :meth:`compare_identify_results`. If the order is "
"unimportant, set it to zero for every result."
msgstr "Bu metod tarafından result_queue'ya konan her Metadata nesnesinin bu sorgu için metadata kaynağınca döndürülen sonuçların sırasını belirten bir tamsayı olan `source_relevance` özniteliği olmalıdır. Bu tam sayı :meth:`compare_identify_results` tarafından kullanılacaktır. Sıra önemli değilse, tüm sonuçlar için sıfır olarak ayarlayın."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:19
msgid ""
"Make sure that any cover/isbn mapping information is cached before the "
"Metadata object is put into result_queue."
msgstr "Metadata nesnesi result_queue'ya konmadan önce tüm kapak/isbn haritalama bilgisinin zulalandığından emin ol."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:22
msgid "A log object, use it to output debugging information/errors"
msgstr "Bir sistem günlüğü nesnesi, hata ayıklama bilgisi/hatası çıktılamak için kullanın"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:23
msgid ""
"A result Queue, results should be put into it. Each result is a Metadata "
"object"
msgstr "Bir sonuç Kuyruğu, sonuçlar buna koyulmalı. Her sonuç bir Metadata nesnesidir"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:25
msgid ""
"If abort.is_set() returns True, abort further processing and return as soon "
"as possible"
msgstr "Eğer abort.is_set() True döndürürse, işlemeyi durdur ve en kısa sürede dön"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:27
msgid "The title of the book, can be None"
msgstr "Kitabın başlığı, None olabilir"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:28
msgid "A list of authors of the book, can be None"
msgstr "Kitap için yazarlar listesi, None olabilir"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:29
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr "Diğer tanımlayıcıları içeren bir sözlük, en yaygın şekliyle {'isbn':'1234...'}"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:31
msgid ""
"Timeout in seconds, no network request should hang for longer than timeout."
msgstr "Saniye cinsinden zaman aşımı, hiçbir ağ isteği zaman aşımından uzun sürmemeli."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:33
msgid ""
"None if no errors occurred, otherwise a unicode representation of the error "
"suitable for showing to the user"
msgstr "Hataya rastlanmadıysa None, aksi halde hatanın kullanıcıya gösterilebilecek evrensel kodda temsili"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:1
msgid ""
"Download a cover and put it into result_queue. The parameters all have the "
"same meaning as for :meth:`identify`. Put (self, cover_data) into "
"result_queue."
msgstr "Bir kapak indir ve result_queue'ya koy. Parametreler :meth:`identify` metodundakiyle aynı anlamdadırlar. (self, cover_data)'yı result_queue'ya koy."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:5
msgid ""
"This method should use cached cover URLs for efficiency whenever possible. "
"When cached data is not present, most plugins simply call identify and use "
"its results."
msgstr "Bu metod verimlilik için uygun olan her durumda zulalanmış kapak URL'lerini kullanmalıdır. Zulalı veri olmadığında, çoğu eklenti identify'ı çağırır ve onun sonuçlarını kullanır."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:9
msgid ""
"If the parameter get_best_cover is True and this plugin can get multiple "
"covers, it should only get the \"best\" one."
msgstr "get_best_cover parametresi True ise ve bu eklenti birden çok kapak alabiliyorsa, yalnızca \"en iyi\" olanı almalı."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
msgid ""
"Generate a sort key for comparison of the relevance of Metadata objects, "
"given a search query. This is used only to compare results from the same "
"metadata source, not across different sources."
msgstr "Bir arama sorgusu verildiğinde, Metadata nesnelerinin uygunluğunun karşılaştırması için bir sıralama anahtarı üret. Bu yalnızca aynı metadata kaynağından gelen sonuçları karşılaştırmak için kullanılır, farklı kaynaklar arasında değil."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
msgid ""
"The sort key ensures that an ascending order sort is a sort by order of "
"decreasing relevance."
msgstr "Arama anahtarı artan sırada sıralamanın azalan uygunluk sırasında sıralama olduğundan emin olur."

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
msgid "The algorithm is:"
msgstr "Algoritma:"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
msgid ""
"Prefer results that have at least one identifier the same as for the query"
msgstr "Sorguda olduğu gibi en az bir tanımlayıcısı olan sonuçları tercih et"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
msgid "Prefer results with a cached cover URL"
msgstr "Zulalanmış kapak URL'si olan sonuçları tercih et"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
msgid "Prefer results with all available fields filled in"
msgstr "Kullanılabilir alanların hepsi dolu olan sonuçları tercih et"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
msgid ""
"Prefer results with the same language as the current user interface language"
msgstr "Mevcut kullanıcı arayüzüyle aynı dilde olan sonuçları tercih et"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
msgid "Prefer results that are an exact title match to the query"
msgstr "Sorguyla başlığı birebir eşleşen sonuçları tercih et"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr "Daha uzun yorumlu sonuçları tercih et (%10 uzunluktan fazlası)"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
msgid ""
"Use the relevance of the result as reported by the metadata source's search"
msgstr "Sonucun uygunluğunu metadata kaynağının aramasından gelen rapor olarak kullan"

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:17
msgid "engine"
msgstr "motor"

#: ../../home/kovid/work/calibre/manual/plugins.rst:76
msgid "Conversion plugins"
msgstr "Dönüştürme eklentileri"

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin:1
msgid ""
"InputFormatPlugins are responsible for converting a document into "
"HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. "
"The main action happens in :meth:`convert`."
msgstr "InputFormatPlugins bir belgeyi HTML+OPF+CSS+vs. ye dönüştürmekle sorumludurlar. Dönüştürmenin sonuçları UTF-8 ile kodlanmış *olmak zorundadır*. Esas olay :meth:`convert` içinde gerçekleşir."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run For example: "
"``set(['azw', 'mobi', 'prc'])``"
msgstr "Bu eklentinin çalışacağı dosya türü kümesi. Örneğin: ``set(['azw', 'mobi', 'prc'])``"

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
msgid ""
"If True, this input plugin generates a collection of images, one per HTML "
"file. This can be set dynamically, in the convert method if the input files "
"can be both image collections and non-image collections. If you set this to "
"True, you must implement the get_images() method that returns a list of "
"images."
msgstr "True ise, bu girdi eklentisi HTML dosyası başına bir resim koleksiyonu üretir. Bu, dönüştürme metodunda, girdi dosyaları hem resim koleksiyonları hem resim olmayan koleksiyonlar olabiliyorsa dinamik olarak ayarlanabilir. True olarak ayarlarsanız, resim listesi döndüren get_images() metodunu uygulamalısınız."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.core_usage:1
msgid ""
"Number of CPU cores used by this plugin. A value of -1 means that it uses "
"all available cores"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.for_viewer:1
msgid ""
"If set to True, the input plugin will perform special processing to make its"
" output suitable for viewing"
msgstr "True olarak ayarlanırsa, girdi eklentisi çıktısını görüntülemeye uygun hale getirmek için özel işlemden geçirir"

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.output_encoding:1
msgid ""
"The encoding that this input plugin creates files in. A value of None means "
"that the encoding is undefined and must be detected individually"
msgstr "Bu girdi eklentisinin dosyaları içinde oluşturduğu kodlama. None değeri kodlamanın belirtilmemiş olduğunu ve bağımsız şekilde algılanması gerektiğini belirtir"

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin.common_options:1
msgid ""
"Options shared by all Input format plugins. Do not override in sub-classes. "
"Use :attr:`options` instead. Every option must be an instance of "
":class:`OptionRecommendation`."
msgstr "Tüm girdi biçim eklentilerince paylaşılan seçenekler. Alt sınıflarda ezmeyin. Bunun yerine :attr:`options` kullanın. Her seçenek bir :class:`OptionRecommendation` örneği olmalıdır."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin.options:1
msgid ""
"Options to customize the behavior of this plugin. Every option must be an "
"instance of :class:`OptionRecommendation`."
msgstr "Bu eklentinin davranışını özelleştirecek seçenekler. Tüm seçenekler :class:`OptionRecommendation` örneği olmalıdırlar."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin.recommendations:1
msgid ""
"A set of 3-tuples of the form (option_name, recommended_value, "
"recommendation_level)"
msgstr "(seçenek_ismi, önerilen_değer, önerilen_seviye) biçiminde 3'lü demet kümesi"

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.get_images:1
msgid ""
"Return a list of absolute paths to the images, if this input plugin "
"represents an image collection. The list of images is in the same order as "
"the spine and the TOC."
msgstr "Bu eklenti bir resim koleksiyonunu destekliyorsa, resimlere mutlak yol listesini döndür. Resim listesi omurga ve İçindekiler ile aynı sıradadır."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.convert:1
msgid ""
"This method must be implemented in sub-classes. It must return the path to "
"the created OPF file or an :class:`OEBBook` instance. All output should be "
"contained in the current directory. If this plugin creates files outside the"
" current directory they must be deleted/marked for deletion before this "
"method returns."
msgstr "Bu metod alt sınıflarda uygulanmalıdır. Oluşturulan OPF dosyasına yolu veya bir :class:`OEBBook` örneği döndürmelidir. Tüm çıktı mevcut dizinde içerilmelidir. Bu eklenti mevcut dizin dışında bir yerde dosya oluşturuyorsa bunların metod dönmeden önce silinmesi/silme için işaretlenmesi gerekir."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.convert:8
msgid "A file like object that contains the input file."
msgstr "Girdi dosyasını içeren dosya benzeri nesne."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.convert:9
msgid ""
"Options to customize the conversion process. Guaranteed to have attributes "
"corresponding to all the options declared by this plugin. In addition, it "
"will have a verbose attribute that takes integral values from zero upwards. "
"Higher numbers mean be more verbose. Another useful attribute is "
"``input_profile`` that is an instance of "
":class:`calibre.customize.profiles.InputProfile`."
msgstr "Dönüştürme sürecini özelleştirecek seçenekler. Bu eklentice bildirilen tüm seçeneklere karşılık gelen özniteliklere sahip olacağı garantidir. Ek olarak, tamamlayıcı değerleri sıfırdan yukarı doğru alan ayrıntılı bir özniteliği olacaktır. Yüksek sayılar daha ayrıntılı demektir. Kullanışlı başka bir öznitelik de :class:`calibre.customize.profiles.InputProfile` örneği olan ``input_profile`` özniteliğidir."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.convert:17
msgid ""
"The extension (without the .) of the input file. It is guaranteed to be one "
"of the `file_types` supported by this plugin."
msgstr "Girdinin uzantısı (. olmadan). Bu eklentice desteklenen `dosya_türlerinden` biri olması garantidir."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.convert:20
msgid ""
"A :class:`calibre.utils.logging.Log` object. All output should use this "
"object."
msgstr ":class:`calibre.utils.logging.Log` nesnesi. Tüm çıktı bu nesneyi kullanmalı."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.convert:22
msgid ""
"A dictionary of various information that the input plugin can get easily "
"that would speed up the subsequent stages of the conversion."
msgstr "Girdi eklentisinin kolayca alabileceği, dönüştürmenin sonraki aşamalarını hızlandıracak olan çeşitli bilgileri içeren sözlük."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
msgid ""
"Called to allow the input plugin to perform postprocessing after the book "
"has been parsed."
msgstr "Girdi eklentisinin kitap ayrıştırıldıktan sonra işlem yapmasına izin vermek için çağrılır."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.InputFormatPlugin.specialize:1
msgid ""
"Called to allow the input plugin to specialize the parsed book for a "
"particular output format. Called after postprocess_book and before any "
"transforms are performed on the parsed book."
msgstr "Girdi eklentisinin ayrıştırılan kitabı belli çıktı biçimine özelleştirmesine izin vermek için çağrılır. Ayrıştırılan kitaba herhangi dönüştürme yapılmadan önce postprocess_book'dan sonra çağrılır."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of
#: calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builtin input plugins for examples."
msgstr "Bu eklentiyi calibre grafik arayüzünde yapılandırmaya yarayan pencereyi oluşturmak için çağrılır. Pencere PluginWidget sınıfından olmalıdır. Örnekler için dahili girdi eklentilerine göz atın."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin:1
msgid ""
"OutputFormatPlugins are responsible for converting an OEB document "
"(OPF+HTML) into an output e-book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin:4
msgid ""
"The OEB document can be assumed to be encoded in UTF-8. The main action "
"happens in :meth:`convert`."
msgstr "OEB belgesinin UTF-8 ile kodlanmış olduğu varsayılabilir. Ana olay :meth:`convert` içinde gerçekleşir."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin.file_type:1
msgid ""
"The file type (extension without leading period) that this plugin outputs"
msgstr "Bu eklentinin çıktıladığı dosya türü (noktasız son ek)"

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin.convert:1
msgid ""
"Render the contents of `oeb_book` (which is an instance of "
":class:`calibre.ebooks.oeb.OEBBook`) to the file specified by output."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin.convert:4
msgid ""
"Either a file like object or a string. If it is a string it is the path to a"
" directory that may or may not exist. The output plugin should write its "
"output into that directory. If it is a file like object, the output plugin "
"should write its output into the file."
msgstr "Dosya benzeri bir nesne veya karakter dizisi. Karakter dizisi ise var olan veya olmayan bir dizine yoldur. Çıktı eklentisi çıktıyı bu dizine yazmalıdır. Dosya benzeri nesne ise, çıktı eklentisi çıktısını dosyaya yazmalıdır."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin.convert:8
msgid ""
"The input plugin that was used at the beginning of the conversion pipeline."
msgstr "Dönüştürme boru hattının başında kullanılan girdi eklentisi."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin.convert:10
msgid ""
"Conversion options. Guaranteed to have attributes corresponding to the "
"OptionRecommendations of this plugin."
msgstr "Dönüştürme seçenekleri. Bu eklentinin SeçenekÖnerilerine karşılık gelen öznitelikleri içermesi garantidir."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of calibre.customize.conversion.OutputFormatPlugin.convert:12
msgid "The logger. Print debug/info messages etc. using this."
msgstr "Günlük kaydedici. Hata ayıklama/bilgi vs. iletilerini bunu kullanarak yazdırın."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
msgid ""
"Can be used to make changes to the css during the CSS flattening process."
msgstr "CSS düzleme işleminden sonra css'e değişiklik yapmak için kullanılabilir."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
msgid "The item (HTML file) being processed"
msgstr "İşlenen öğe (HTML dosyası)"

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
msgid ""
"A Stylizer object containing the flattened styles for item. You can get the "
"style for any element by stylizer.style(element)."
msgstr "Öğe için düzleştirilmiş biçemleri içeren Stylizer nesnesi. Herhangi bir öğenin biçemini stylizer.style(öğe) ile alabilirsiniz."

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.pydocstring
#: of
#: calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builtin output plugins for examples."
msgstr "Bu eklentiyi calibre GUI'sinde yapılandırmak için kullanılan parçacığı oluşturmak için çağrılır. Parçacık bir PluginWidget sınıfı örneği olmalıdır. Örnekler için dahili çıktı eklentilerine göz atın."

#: ../../home/kovid/work/calibre/manual/plugins.rst:91
msgid "Device drivers"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:95
msgid ""
"The base class for all device drivers is :class:`DevicePlugin`. However, if "
"your device exposes itself as a USBMS drive to the operating system, you "
"should use the USBMS class instead as it implements all the logic needed to "
"support these kinds of devices."
msgstr "Tüm aygıt sürücüleri için taban sınıf :class:`DevicePlugin` dir. Ancak aygıtınız kendisini işletim sistemine USBMS sürücüsü olarak gösteriyorsa bu tür cihazları destekeleyecek her türlü mantığı uyguladığından USBMS sınıfını kullanmalısınız."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin:1
msgid ""
"Defines the interface that should be implemented by backends that "
"communicate with an e-book reader."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.FORMATS:1
msgid "Ordered list of supported formats"
msgstr "Desteklenen biçimlerin sıralı listesi"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.VENDOR_ID:1
msgid ""
"VENDOR_ID can be either an integer, a list of integers or a dictionary If it"
" is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr "VENDOR_ID bir tam sayı, tamsayı listesi veya sözlük olabilir. Bir sözlükse, sözlüklerin sözlüğü olmalıdır, şu şekilde::"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
msgid "An integer or a list of integers"
msgstr "Bir tam sayı veya tam sayı listesi"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.BCD:1
msgid ""
"BCD can be either None to not distinguish between devices based on BCD, or "
"it can be a list of the BCD numbers of all devices supported by this driver."
msgstr "BCD BCD tabanlı aygıtlar arasında ayrı kalmaması için None olabilir, veya bu sürücü tarafından desteklenen tüm aygıtların BCD numaralarından oluşan liste olabilir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
msgid "Height for thumbnails on the device"
msgstr "Küçük resimlerin aygıttaki yüksekliği"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
msgid ""
"Compression quality for thumbnails. Set this closer to 100 to have better "
"quality thumbnails with fewer compression artifacts. Of course, the "
"thumbnails get larger as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
msgid ""
"Set this to True if the device supports updating cover thumbnails during "
"sync_booklists. Setting it to true will ask device.py to refresh the cover "
"thumbnails during book matching"
msgstr "Aygıt sync_booklists sırasında kapak küçük resimlerini güncellemeye izin veriyorsa bunu True olarak ayarlayın. True olarak ayarlamak kitap eşleştirme sırasında device.py'ye kapak küçük resimlerini güncellemesini söyler"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
msgid "Whether the metadata on books can be set via the GUI."
msgstr "Kitaplardaki metadata'nın GUI ile ayarlanıp ayarlanamayacağı."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
msgid "Whether the device can handle device_db metadata plugboards"
msgstr "Aygıtın device_db metadata santralini ele alıp alamayacağı"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.path_sep:1
msgid "Path separator for paths to books on device"
msgstr "Bu aygıttaki kitaplara olan yollar için yol ayracı"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.icon:1
msgid "Icon for this device"
msgstr "Bu aygıt için simge"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
msgid ""
"GUI displays this as a message if not None. Useful if opening can take a "
"long time"
msgstr "GUI bunu None değilse bir ileti olarak gösterir. Açma uzun sürüyorsa kullanışlıdır"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
msgid ""
"Set of extensions that are \"virtual books\" on the device and therefore "
"cannot be viewed/saved/added to library. For example: "
"``frozenset(['kobo'])``"
msgstr "Aygıtta \"sanal kitap\" olan ve bu yüzden kitaplıkta görüntülenemeyen/kaydedilemeyen/eklenemeyen eklentiler kümesi. Örneğin: ``frozenset(['kobo'])``"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSION_MESSAGE:1
msgid "Message to display to user for virtual book extensions."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
msgid ""
"Whether to nuke comments in the copy of the book sent to the device. If not "
"None this should be short string that the comments will be replaced by."
msgstr "Kitabın aygıta yollanan kopyasında yorumlar tamamen silinsin mi. None değilse bunun yorumların değiştirileceği kısa bir metin olması gerekir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
msgid ""
"If True indicates that  this driver completely manages device detection, "
"ejecting and so forth. If you set this to True, you *must* implement the "
"detect_managed_devices and debug_managed_device_detection methods. A driver "
"with this set to true is responsible for detection of devices, managing a "
"blacklist of devices, a list of ejected devices and so forth. calibre will "
"periodically call the detect_managed_devices() method and if it returns a "
"detected device, calibre will call open(). open() will be called every time "
"a device is returned even if previous calls to open() failed, therefore the "
"driver must maintain its own blacklist of failed devices. Similarly, when "
"ejecting, calibre will call eject() and then assuming the next call to "
"detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
msgid ""
"If set the True, calibre will call the :meth:`get_driveinfo()` method after "
"the books lists have been loaded to get the driveinfo."
msgstr "True olarak ayarlandıysa, calibre kitap listeleri yüklendikten sonra sürücü bilgisi almak için :meth:`get_driveinfo()` çağıracaktır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
msgid ""
"If set to True, calibre will ask the user if they want to manage the device "
"with calibre, the first time it is detected. If you set this to True you "
"must implement :meth:`get_device_uid()` and "
":meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` "
"and :meth:`set_user_blacklisted_devices`"
msgstr "True olarak ayarlandıysa, calibre kullanıcıya aygıt ilk kez algılandığında aygıtı calibre ile yönetip isteyip istemediğini sorar. Bunu True olarak ayarlarsanız :meth:`get_device_uid()` ve :meth:`ignore_connected_device()` ve :meth:`get_user_blacklisted_devices` ve :meth:`set_user_blacklisted_devices` uygulamalısınız"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
msgid ""
"Set this to a dictionary of the form {'title':title, 'msg':msg, "
"'det_msg':detailed_msg} to have calibre popup a message to the user after "
"some callbacks are run (currently only upload_books). Be careful to not spam"
" the user with too many messages. This variable is checked after *every* "
"callback, so only set it when you really need to."
msgstr "Bazı geri çağrılar çalıştırıldıktan sonra (şu an yalnızca upload_books) calibre'nin bir ileti penceresi açmasını sağlamak için bunu {'title':başlık, 'msg':ileti, 'det_msg':detaylı_ileti} biçiminde bir sözlük olarak ayarlayın. Kullanıcıyı bir sürü ileti ile sıkmamaya dikkat edin. Bu değişken *her* geri çağrıdan sonra kontrol edilir, yalnızca gerçekten ihtiyacınız olduğunda ayarlayın."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:1
msgid ""
"Return True, device_info if a device handled by this plugin is currently "
"connected."
msgstr "Bu eklenti ile ele alınan bir aygıt hali hazırda bağlıysa True, device_info döndür."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:3
msgid "List of devices currently connected"
msgstr "Hali hazırda bağlı olan aygıtlar"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr "Yalnızca MANAGES_DEVICE_PRESENCE True ise çağrılır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:3
msgid ""
"Scan for devices that this driver can handle. Should return a device object "
"if a device is found. This object will be passed to the open() method as the"
" connected_device. If no device is found, return None. The returned object "
"can be anything, calibre does not use it, it is only passed to open()."
msgstr "Bu sürücünün ele alabileceği aygıtları tara. Bir aygıt bulunursa aygıt nesnesi döndürmelidir. Bu nesne open() metoduna connected_device olarak geçirilir. Aygıt bulunamazsa, None döndürür. Döndürülen nesne herşey olabilir, calibre bu nesneyi kullanmaz, sadece open()'a geçirilir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:9
msgid ""
"This method is called periodically by the GUI, so make sure it is not too "
"resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr "Bu metod GUI tarafından aralıklarla çağrılır, fazla kaynak tüketmediğinden emin olun. Sistemi tekrar tekrar taramaktan kaçınmak için bir zula kullanın."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:13
msgid "Set of USB devices found on the system."
msgstr "Sistemde bulunan USB aygıtları kümesi."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:15
msgid ""
"If True and the driver uses a cache to prevent repeated scanning, the cache "
"must be flushed."
msgstr "True ise ve sürücü tekrar taramalardan kaçınmak için zula kullanıyorsa, zula temizlenmelidir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
msgid ""
"Should write information about the devices detected on the system to output,"
" which is a file like object."
msgstr "Sistemde algılanan sürücüler hakkında bilgiyi dosya benzeri bir nesne olan çıktıya yazmalıdır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
msgid ""
"Should return True if a device was detected and successfully opened, "
"otherwise False."
msgstr "Bir aygıt algılanmış ve başarıyla açılmışsa True, aksi halde False döndürmelidir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.reset:1
msgid "The key to unlock the device"
msgstr "Aygıtın kilidini açacak tuş"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:2
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.reset:2
msgid "If true the packet stream to/from the device is logged"
msgstr "True ise aygıta giden/aygıttan gelen paket akışı kaydedilir"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:3
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:3
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.reset:3
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.set_progress_reporter:3
msgid ""
"Function that is called with a % progress (number between 0 and 100) for "
"various tasks If it is called with -1 that means that the task does not have"
" any progress information"
msgstr "% süreciyle çeşitli işler için çağrılan fonksiyon (sayı 0 ve 100 arasında)  -1 ile çağrılırsa işin süreç bilgisi olmadığı anlamına gelir"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:7
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.reset:7
msgid "Device information from the device scanner"
msgstr "Aygıt tarayıcıdan gelen aygıt bilgisi"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.can_handle_windows:1
msgid ""
"Optional method to perform further checks on a device to see if this driver "
"is capable of handling it. If it is not it should return False. This method "
"is only called after the vendor, product ids and the bcd have matched, so it"
" can do some relatively time intensive checks. The default implementation "
"returns True. This method is called only on Windows. See also "
":meth:`can_handle`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:8
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.can_handle_windows:8
msgid ""
"Note that for devices based on USBMS this method by default delegates to "
":meth:`can_handle`.  So you only need to override :meth:`can_handle` in your"
" subclass of USBMS."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:12
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.can_handle_windows:12
msgid ""
"A usbdevice as returned by :func:`calibre.devices.winusb.scan_usb_devices`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:1
msgid "Unix version of :meth:`can_handle_windows`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:3
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr "(vid, pid, bcd, imalatçı, ürün, seri numarası) demeti"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.open:1
msgid ""
"Perform any device specific initialization. Called after the device is "
"detected but before any other functions that communicate with the device. "
"For example: For devices that present themselves as USB Mass storage "
"devices, this method would be responsible for mounting the device or if the "
"device has been automounted, for finding out where it has been mounted. The "
"method :meth:`calibre.devices.usbms.device.Device.open` has an "
"implementation of this function that should serve as a good example for USB "
"Mass storage devices."
msgstr "Tüm aygıta özel ilklendirmeleri yap. Aygıt algılandıktan sonra ama aygıtla iletişim kuran diğer fonksiyonlardan önce çağrılır. Örneğin: Kendilerini USB depolama aygıtı olarak tanıtan aygıtlarda, bu metod aygıtı bağlamakla veya aygıt otomatik bağlandıysa, nereye bağlandığını öğrenmekle sorumlu olur. :meth:`calibre.devices.usbms.device.Device.open` metodunun bu fonksiyonun USB depolama aygıtlarıyla ilgili iyi bir örnek olacak uygulaması vardır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:11
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.open:11
msgid ""
"This method can raise an OpenFeedback exception to display a message to the "
"user."
msgstr "Bu metod kullanıcıya bir ileti göstermek için bir OpenFeedback istisnası yükseltebilir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:14
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.open:14
msgid ""
"The device that we are trying to open. It is a tuple of (vendor id, product "
"id, bcd, manufacturer name, product name, device serial number). However, "
"some devices have no serial number and on windows only the first three "
"fields are present, the rest are None."
msgstr "Açmaya çalıştığımız aygıt. (satıcı kimliği, ürün kimliği, bcd, üretici ismi, ürün ismi, aygıt seri numarası) demeti. Ancak bazı aygıtların seri numarası yoktur ve windows üstünde yalnızca ilk üç alan mevcuttur, geri kalanı None'dir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:20
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.open:20
msgid ""
"The UUID of the current calibre library. Can be None if there is no library "
"(for example when used from the command line)."
msgstr "Mevcut calibre kitaplığının UUID'si. Bir kitaplık yoksa None olabilir (örneğin komut satırından kullanıldığında)."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.eject:1
msgid ""
"Un-mount / eject the device from the OS. This does not check if there are "
"pending GUI jobs that need to communicate with the device."
msgstr "Aygıtın işletim sisteminden bağını ayır/çıkart. Bu aygıtla iletişim kurmaya çalışan GUI işlerinin olup olmadığını kontrol etmez."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:4
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.eject:4
msgid ""
"NOTE: That this method may not be called on the same thread as the rest of "
"the device methods."
msgstr "NOT: Bu metod diğer aygıt metodlarıyla aynı iş ipliğinde çağrılamayabilir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.post_yank_cleanup:1
msgid "Called if the user yanks the device without ejecting it first."
msgstr "Kullanıcı aygıtı çıkarmadan birden çektiyse çağrılır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.set_progress_reporter:1
msgid "Set a function to report progress information."
msgstr "Süreç bilgisini raporlaması için bir fonksiyon ayarla."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.get_device_information:1
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr "Aygıtı aygıt bilgisi için sorgula. Bknz L{DeviceInfoQuery}."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:3
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.get_device_information:3
msgid ""
"(device name, device version, software version on device, mime type) The "
"tuple can optionally have a fifth element, which is a drive information "
"dictionary. See usbms.driver for an example."
msgstr "(aygıt ismi, aygıt sürümü, aygıttaki yazılım sürümü, mime türü) Demet isteğe bağlı olarak beşinci bir sürücü bilgisi demeti alabilir. Örnek için usbms.driver'a göz atın."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_driveinfo:1
msgid ""
"Return the driveinfo dictionary. Usually called from "
"get_device_information(), but if loading the driveinfo is slow for this "
"driver, then it should set SLOW_DRIVEINFO. In this case, this method will be"
" called by calibre after the book lists have been loaded. Note that it is "
"not called on the device thread, so the driver should cache the drive info "
"in the books() method and this function should return the cached data."
msgstr "driveinfo sözlüğünü döndür. Genellikle get_device_information() içinden çağrılır, ama bu sürücü için driveinfo yüklenmesi yavaşsa, SLOW_DRIVEINFO'yu ayarlamalıdır. Bu durumda, bu metod calibre tarafından kitap listeleri yüklendikten sonra çağrılır. Bunun aygıt iş ipliğinde çağrılmadığına dikkat edin, yani sürücü books() metodundaki aygıt bilgisini zulalamalı ve bu fonksiyon zulalanmış veriyi döndürmelidir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.card_prefix:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.card_prefix:1
msgid ""
"Return a 2 element list of the prefix to paths on the cards. If no card is "
"present None is set for the card's prefix. E.G. ('/place', '/place2') (None,"
" 'place2') ('place', None) (None, None)"
msgstr "Kartlar üstündeki yollara 2 elemanlı ön ek listesi döndür. Herhangi bir kart yoksa kart ön eki olarak None ayarlanır. ÖRN. ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.total_space:4
msgid "Get total space available on the mountpoints:"
msgstr "2 öğeli bir kartlar üstündeki yollara ön ekler listesi döndür. Herhangi bir kart mevcut değilse kart ön eki olarak None ayarlanır. ÖRN. ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:2
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:2
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.total_space:2
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.free_space:2
msgid "Main memory"
msgstr "Cihaz hafızası"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:3
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.total_space:3
msgid "Memory Card A"
msgstr "Hafıza Kartı A"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.total_space:4
msgid "Memory Card B"
msgstr "Hafıza Kartı B"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:6
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.total_space:6
msgid ""
"A 3 element list with total space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return 0."
msgstr "(1, 2, 3) bayt toplam alanlı 3 elemanlı liste. Eğer herhangi bir aygıt bu konumlardan birine sahip değilse 0 döndürmelidir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.free_space:4
msgid "Get free space available on the mountpoints:"
msgstr "Bağlantı noktalarında kullanılabilir olan boş alanı al:"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:3
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.free_space:3
msgid "Card A"
msgstr "Kart A"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.free_space:4
msgid "Card B"
msgstr "Kart B"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:6
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.free_space:6
msgid ""
"A 3 element list with free space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return -1."
msgstr "(1, 2, 3) bayt boş alanlı 3 elemanlı liste. Herhangi bir aygıt bu konumlardan birine sahip değilse -1 döndürmelidir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.books:1
msgid "Return a list of e-books on the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:3
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.books:3
msgid ""
"If 'carda' or 'cardb' return a list of e-books on the specific storage card,"
" otherwise return list of e-books in main memory of device. If a card is "
"specified and no books are on the card return empty list."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:8
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.books:8
msgid "A BookList."
msgstr "Bir KitapListesi."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_books:1
msgid ""
"Upload a list of books to the device. If a file already exists on the "
"device, it should be replaced. This method should raise a "
":class:`FreeSpaceError` if there is not enough free space on the device. The"
" text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is"
" not None otherwise it must contain the word \"memory\"."
msgstr "Bir kitap listesini aygıta yükle. Aygıtta bir dosya zaten varsa, değiştirilmelidir. Bu metod aygıtta yeterli yer yoksa :class:`FreeSpaceError` yükseltmelidir. FreeSpaceError'un metni ``on_card`` None değilse \"card\" kelimesini içermelidir, aksi durumda \"memory\" kelimesini içermelidir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:7
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_books:7
msgid "A list of paths"
msgstr "Bir yol listesi"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:8
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_books:8
msgid ""
"A list of file names that the books should have once uploaded to the device."
" len(names) == len(files)"
msgstr "Kitapların aygıta yüklendikten sonra sahip olması gereken isimlerin listesi. len(isimler) == len(dosyalar)"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:10
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_books:10
msgid ""
"If not None, it is a list of :class:`Metadata` objects. The idea is to use "
"the metadata to determine where on the device to put the book. len(metadata)"
" == len(files). Apart from the regular cover (path to cover), there may also"
" be a thumbnail attribute, which should be used in preference. The thumbnail"
" attribute is of the form (width, height, cover_data as jpeg)."
msgstr "None değilse, :class:`Metadata` nesneleri listesidir. Ana fikir kitabı aygıtta nereye koyacağını metadata kullanarak belirlemektir. len(metadata) == len(dosyalar). Sıradan kapaktan ayrı olarak (kapağa yol), ayrıca isteğe bağlı kullanılabilecek küçük resim özniteliği olabilir. Küçük resim özniteliği (genişlik, yükseklik, jpeg olarak kapak verisi) biçimindedir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:17
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_books:17
msgid ""
"A list of 3-element tuples. The list is meant to be passed to "
":meth:`add_books_to_metadata`."
msgstr "3 elemanlı demetler listesi. Liste :meth:`add_books_to_metadata` ya geçirilmek üzere düşünülmüştür."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.add_books_to_metadata:1
msgid ""
"Add locations to the booklists. This function must not communicate with the "
"device."
msgstr "Kitaplistelerine konumlar ekle. Bu fonksiyon aygıtla iletişime geçmemelidir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.add_books_to_metadata:4
msgid "Result of a call to L{upload_books}"
msgstr "L{upload_books} çağrısı sonucu"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.add_books_to_metadata:5
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ":class:`Metadata` nesneleri listesi, :meth:`upload_books` için olanın aynısı."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:3
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.add_books_to_metadata:7
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:5
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.sync_booklists:3
msgid ""
"A tuple containing the result of calls to (:meth:`books(oncard=None)`, "
":meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr "(:meth:`books(oncard=None)`, :meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`) çağrıları sonucunu içeren bir demet."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.delete_books:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.delete_books:1
msgid "Delete books at paths on device."
msgstr "Aygıtta yollardeki kitapları sil."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:1
msgid ""
"Remove books from the metadata list. This function must not communicate with"
" the device."
msgstr "Kitapları metadata listesinden çıkar. Bu fonksiyon aygıtla iletişime geçmemelidir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:4
msgid "paths to books on the device."
msgstr "aygıttaki kitaplara yollar."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.sync_booklists:1
msgid "Update metadata on device."
msgstr "Aygıttaki metadata'yı güncelle."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:1
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr "Aygıtta ``path`` yolundaki dosyayı oku ve çıktı dosyasına yaz."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:3
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr "``sys.stdout`` benzeri bir dosya nesnesi veya bir :func:`open` çağrısı sonucu."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.config_widget:1
msgid ""
"Should return a QWidget. The QWidget contains the settings for the device "
"interface"
msgstr "Bir QWidget döndürmelidir. QWidget aygıt arayüzü için ayarları içerir"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.save_settings:1
msgid ""
"Should save settings to disk. Takes the widget created in "
":meth:`config_widget` and saves all settings to disk."
msgstr "Ayarları diske kaydetmelidir. :meth:`config_widget` içinde oluşturulan parçacığı alır ve tüm ayarları diske kaydeder."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.settings:1
msgid ""
"Should return an opts object. The opts object should have at least one "
"attribute `format_map` which is an ordered list of formats for the device."
msgstr "Bir opts nesnesi döndürmelidir. opts nesnesinin aygıt için biçimlerin sıralı listesi olan en az bir `format_map` özniteliği olmalıdır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:1
msgid ""
"provide the driver the current set of plugboards and a function to select a "
"specific plugboard. This method is called immediately before add_books and "
"sync_booklists."
msgstr "sürücüye mevcut santral kümesini ve belirli bir santrali seçmek için fonksiyonu sağla. Bu metod add_books ve sync_booklists'den hemen önce çağrılır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "pb_func is a callable with the following signature::"
msgstr "pb_func şu imzaya sahip bir çağrılabilirdir::"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "def pb_func(device_name, format, plugboards)"
msgstr "def pb_func(aygıt_ismi, biçim, santraller)"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:8
msgid ""
"You give it the current device name (either the class name or "
"DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or"
" 'device_db'), and the plugboards (you were given those by set_plugboards, "
"the same place you got this method)."
msgstr "Mevcut aygıt ismini (sınıf ismi veya DEVICE_PLUGBOARD_NAME), ilgilendiğiniz biçimi ('gerçek' bir biçim veya 'device_db'), ve santralleri (bu metodu aldığınız yer de olan set_plugboards ile almıştınız) verirsiniz."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:13
msgid "None or a single plugboard instance."
msgstr "None veya tekli bir santral örneği."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.set_driveinfo_name:1
msgid ""
"Set the device name in the driveinfo file to 'name'. This setting will "
"persist until the file is re-created or the name is changed again."
msgstr "Driveinfo dosyasındaki aygıt adını 'isim' olarak ayarla. Bu ayar dosya tekrar oluşturulana veya ismi tekrar değiştirilene kadar kalacaktır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.set_driveinfo_name:4
msgid ""
"Non-disk devices should implement this method based on the location codes "
"returned by the get_device_information() method."
msgstr "Disk olmayan aygıtlar bu metodu get_device_information() metodundan dönen konum kodlarını temel alarak uygulamalıdırlar."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:1
msgid ""
"Given a list of paths, returns another list of paths. These paths point to "
"addable versions of the books."
msgstr "Bir yol listesi verildiğinde, başka bir yol listesi döndürür. Bu yollar kitapların eklenebilir sürümlerini gösterir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:4
msgid ""
"If there is an error preparing a book, then instead of a path, the position "
"in the returned list for that book should be a three tuple: (original_path, "
"the exception instance, traceback)"
msgstr "Bir kitap hazırlanırken hata olursa, bir yol yerine, bu kitap için döndürülen liste içindeki konum üçlü demet olmalıdır: (asıl_yol, istisna örneği, geri izleme)"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.startup:1
msgid ""
"Called when calibre is starting the device. Do any initialization required. "
"Note that multiple instances of the class can be instantiated, and thus "
"__init__ can be called multiple times, but only one instance will have this "
"method called. This method is called on the device thread, not the GUI "
"thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.shutdown:1
msgid ""
"Called when calibre is shutting down, either for good or in preparation to "
"restart. Do any cleanup required. This method is called on the device "
"thread, not the GUI thread."
msgstr "Calibre kapanırken çağrılır, tam kapanırken ya da yeniden başlatılırken. Gerekli temizliği yapın. Bu metod GUI iş ipliğinde değil aygıt sürecinde çağrılır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_uid:1
msgid ""
"Must return a unique id for the currently connected device (this is called "
"immediately after a successful call to open()). You must implement this "
"method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr "Hazırda bağlı olan aygıt için benzersiz bir kimlik döndürmelidir (başarılı open() çağrısından hemen sonra çağrılır). ASK_TO_ALLOW_CONNECT = True ayarladıysanız bu metodu uygulamalısınız"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.ignore_connected_device:1
msgid ""
"Should ignore the device identified by uid (the result of a call to "
"get_device_uid()) in the future. You must implement this method if you set "
"ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately "
"after open(), so if open() caches some state, the driver should reset that "
"state."
msgstr "Gelecekte uid (get_device_uid() çağrısı sonucu) ile tanımlanan aygıtı göz ardı etmeli. ASK_TO_ALLOW_CONNECT = True ayarladıysanız bu metodu uygulamalısınız. Bu fonksiyon open() metodunun hemen ardından çağrılır, yani open() bir durumu zulalarsa, sürücü bu bu durumu sıfırlamalıdır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
msgid ""
"Return map of device uid to friendly name for all devices that the user has "
"asked to be ignored."
msgstr "Kullanıcının göz ardı edilmesini istediği tüm aygıtlar için aygıt uid'inden okunabilir isme haritayı döndür."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
msgid "Set the list of device uids that should be ignored by this driver."
msgstr "Bu sürücü tarafından göz ardı edilmesi gereken aygıt uid listesini ayarla."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
msgid ""
"Implement this method if your device wants to override a particular "
"preference. You must ensure that all call sites that want a preference that "
"can be overridden use device_prefs['something'] instead of "
"prefs['something']. Your method should call "
"device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: "
"metadata management (prefs['manage_device_metadata'])"
msgstr "Aygıtınız belirli bir tercihi ezmek istiyorsa bu metodu uygulayın. Ezilebilir tercih isteyen tüm çağrı sitelerinin prefs['bir şeyler'] yerine device_prefs['bir şeyler'] kullandığından emin olmalısınız. Metodunuz device_prefs.set_overrides(pref=val, pref=val, ...) çağırlmalıdır. Mevcut durumda şunun için kullanılır: metadata yönetimi (prefs['manage_device_metadata'])"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_library_info:1
msgid ""
"Implement this method if you want information about the current calibre "
"library. This method is called at startup and when the calibre library "
"changes while connected."
msgstr "Mevcut calibre kitaplığıyla ilgili bilgi istiyorsanız bu metodu uygulayın. Bu metod açılışta ve bağlıyken calibre kitaplığı değiştiğinde çağrılır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
msgid ""
"Called by the device manager when starting plugins. If this method returns a"
" string, then a) it supports the device manager's dynamic control interface,"
" and b) that name is to be used when talking to the plugin."
msgstr "Eklentiler başlatılırken aygıt yöneticisi tarafından çağrılır. Bu metod karakter dizisi döndürürse, a) aygıt yöneticisinin dinamik kontrol ara yüzünü destekler, ve b) bu isim eklentiyle konuşurken kullanılır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:4
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:3
msgid ""
"This method can be called on the GUI thread. A driver that implements this "
"method must be thread safe."
msgstr "Bu metod GUI sürecinde çağrılabilir. Bu metodu uygulayan bir sürücü iş ipliği güvenliği sağlamalıdır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:1
msgid ""
"This method is called to start the plugin. The plugin should begin to accept"
" device connections however it does that. If the plugin is already accepting"
" connections, then do nothing."
msgstr "Bu metod eklentiyi başlatmak için çağrılır. Eklenti aygıt bağlantılarını her nasıl yapıyorsa öyle kabul etmeye başlamalıdır. Eklenti zaten bağlantı kabul ediyorsa, bir şey yapma."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:1
msgid ""
"This method is called to stop the plugin. The plugin should no longer accept"
" connections, and should cleanup behind itself. It is likely that this "
"method should call shutdown. If the plugin is already not accepting "
"connections, then do nothing."
msgstr "Bu metod eklentiyi durdurmak için çağrılır. Eklenti artık bağlantı kabul etmemeli, ve arkasını temizlemelidir. shutdown'u bu metodun çağırması beklenebilir. Eklenti zaten bağlantı kabul etmiyorsa, bir şey yapma."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:1
msgid ""
"Return the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started. Return None if the option does not "
"exist."
msgstr "opt_string tarafından gösterilen seçeneğin değerini döndür. Bu metod eklenti başlatılmadığında çağrılabilir. Seçenek mevcut değilse None döndür."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:1
msgid ""
"Set the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started."
msgstr "opt_string tarafından gösterilen seçeneğin değerini ayarla. Bu metod eklenti başlatılmadan çağrılabilir."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:1
msgid "Return True if the plugin is started, otherwise false"
msgstr "Eklenti başlatıldıysa True döndür, yoksa false"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:1
msgid ""
"Called during book matching when a book on the device is matched with a book"
" in calibre's db. The method is responsible for syncronizing data from the "
"device to calibre's db (if needed)."
msgstr "Aygıttaki bir kitap calibre veri tabanındaki bir kitapla eşleşince kitap eşleştirme sırasında çağrılır. Bu metod aygıttan calibre veri tabanına (gerekliyse) veri eşzamanlamakla yükümlüdür."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:5
msgid ""
"The method must return a two-value tuple. The first value is a set of "
"calibre book ids changed if calibre's database was changed or None if the "
"database was not changed. If the first value is an empty set then the "
"metadata for the book on the device is updated with calibre's metadata and "
"given back to the device, but no GUI refresh of that book is done. This is "
"useful when the calibre data is correct but must be sent to the device."
msgstr "Metod iki değerli bir demet döndürmelidir. İlk değer calibre veri tabanı değiştiyse değişen kitap kimliklerinin kümesi veya değişmediyse None'dir. İlk değer boş bir kümeyse aygıttaki kitap metadata'sı calibre'nin metadata'sıyla güncellenir ve aygıta geri verilir, ama bu kitabın GUI tazelemesi yapılmaz. Calibre verisi doğruyken ve aygıta gönderilmesi gerekiyorken faydalıdır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:13
msgid ""
"The second value is itself a 2-value tuple. The first value in the tuple "
"specifies whether a book format should be sent to the device. The intent is "
"to permit verifying that the book on the device is the same as the book in "
"calibre. This value must be None if no book is to be sent, otherwise return "
"the base file name on the device (a string like foobar.epub). Be sure to "
"include the extension in the name. The device subsystem will construct a "
"send_books job for all books with not- None returned values. Note: other "
"than to later retrieve the extension, the name is ignored in cases where the"
" device uses a template to generate the file name, which most do. The second"
" value in the returned tuple indicated whether the format is future-dated. "
"Return True if it is, otherwise return False. calibre will display a dialog "
"to the user listing all future dated books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:27
msgid ""
"Extremely important: this method is called on the GUI thread. It must be "
"threadsafe with respect to the device manager's thread."
msgstr "Çok önemli: bu metod GUI sürecinde çalışır. Aygıt yöneticisinin iş ipliğine dikkat ederek iş ipliği güvenli olmalıdır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:30
msgid ""
"book_id: the calibre id for the book in the database. book_metadata: the "
"Metadata object for the book coming from the device. first_call: True if "
"this is the first call during a sync, False otherwise"
msgstr "book_id: kitap için veri tabanındaki calibre kimliği. book_metadata: aygıttan gelen kitap için Metadata nesnesi. first_call: Bir eşzamanlama sırasında bu ilk çağrıysa True, aksi halde False"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:1
msgid "Bases: :class:`list`"
msgstr "Tabanlar: :class:`list`"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:1
msgid "A list of books. Each Book object must have the fields"
msgstr "Kitap listesi. Her bir Book nesnesinin alanları olmalıdır"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:3
msgid "title"
msgstr "başlık"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:4
msgid "authors"
msgstr "yazarlar"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:5
msgid "size (file size of the book)"
msgstr "boyut (kitabın dosya boyutu)"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:6
msgid "datetime (a UTC time tuple)"
msgstr "datetime (UTC tarih demeti)"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:7
msgid "path (path on the device to the book)"
msgstr "yol (aygıtta kitaba olan yol)"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:8
msgid ""
"thumbnail (can be None) thumbnail is either a str/bytes object with the "
"image data or it should have an attribute image_path that stores an absolute"
" (platform native) path to the image"
msgstr "küçük resim (None olabilir) küçük resim ya resim verisini tutan bir karakter dizisi/bayt nesnesi olmalı ya da resme mutlak yolu (platforma göre) içeren bir image_path özniteliği olmalıdır"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:11
msgid "tags (a list of strings, can be empty)."
msgstr "etiketler (bir karakter dizisi listesi, boş olabilir)."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.supports_collections:1
msgid "Return True if the device supports collections for this book list."
msgstr "Aygıt bu kitap listesi için koleksiyonları destekliyorsa True döndür."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.add_book:1
msgid ""
"Add the book to the booklist. Intent is to maintain any device-internal "
"metadata. Return True if booklists must be sync'ed"
msgstr "Kitabı kitap listesine ekle. Amaç tüm aygıt-dahili metadatayı yönetmektir. Kitaplisteleri eşzamanlanmalıysa True döndür"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.remove_book:1
msgid ""
"Remove a book from the booklist. Correct any device metadata at the same "
"time"
msgstr "Bir kitabı kitap listesinden çıkar. Aynı zamanda tüm aygıt metadata'sını düzelt"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:1
msgid ""
"Return a dictionary of collections created from collection_attributes. Each "
"entry in the dictionary is of the form collection name:[list of books]"
msgstr "collection_attributes'dan oluşturulan koleksiyon sözlüğü döndür. Sözlükteki her girdi koleksiyon_ismi:[kitap listesi] biçimindedir"

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:5
msgid ""
"The list of books is sorted by book title, except for collections created "
"from series, in which case series_index is used."
msgstr "Kitap listesi, serilerden oluşturulan koleksiyonlar dışında - bu durumda series_index kullanılır - kitap başlığına göre sıralanır."

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:8
msgid "A list of attributes of the Book object"
msgstr "Kitap nesnesinin öznitelik listesi"

#: ../../home/kovid/work/calibre/manual/plugins.rst:109
msgid "USB Mass Storage based devices"
msgstr "USB Depolama temelli aygıtlar"

#: ../../home/kovid/work/calibre/manual/plugins.rst:111
msgid ""
"The base class for such devices is "
":class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits "
"some of its functionality from its bases, documented below. A typical basic "
"USBMS based driver looks like this:"
msgstr "Bu tarz aygıtlar için temel sınıf :class:`calibre.devices.usbms.driver.USBMS`dir. Bu sınıf bazı işlevlerini aşağıda belgelendiği gibi temel aldıkları sınıflardan alırlar. Genel basit bir USBMS tabanlı sürücü şuna benzer:"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device:1
msgid ""
"Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, "
":class:`calibre.devices.interface.DevicePlugin`"
msgstr "Tabanları: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, :class:`calibre.devices.interface.DevicePlugin`"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device:1
msgid ""
"This class provides logic common to all drivers for devices that export "
"themselves as USB Mass Storage devices. Provides implementations for "
"mounting/ejecting of USBMS devices on all platforms."
msgstr "Bu sınıf kendini USB Depolama aygıtı olarak aktaran aygıtların tüm sürücüleri için genel mantığı sağlar. Tüm platformlarda geçerli USBMS bağlama/çıkarma uygulamalarını sağlar."

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
msgid ""
"String identifying the main memory of the device in the windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "Windows PnP kimlik karakter dizilerinde aygıtın ana belleğini tanımlayan karakter dizisi. Bu None, karakter dizisi, karakter dizisi listesi veya derlenmiş düzenli ifade olabilir"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
msgid ""
"String identifying the first card of the device in the windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "Windows PnP kimlik karakter dizisinde aygıtın ilk kartını tanımlayan karakter dizisi. Bu None, karakter dizisi, karakter dizisi listesi veya derlenmiş düzenli ifade olabilir"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
msgid ""
"String identifying the second card of the device in the windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "Windows PnP kimlik karakter dizisinde aygıtın ikinci kartını tanımlayan karakter dizisi. Bu None, karakter dizisi, karakter dizisi listesi veya derlenmiş düzenli ifade olabilir"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
msgid ""
"Used by the new driver detection to disambiguate main memory from storage "
"cards. Should be a regular expression that matches the main memory mount "
"point assigned by macOS"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
msgid "The maximum length of paths created on the device"
msgstr "Aygıtta oluşturulan azami yol uzunluğu"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
msgid "Put news in its own folder"
msgstr "Haberleri kendi dizinine koy"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.windows_sort_drives:1
msgid ""
"Called to disambiguate main memory and storage card for devices that do not "
"distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The "
"EB600"
msgstr "`WINDOWS_CARD_NAME` temelinde ayrım yapamayan aygıtlar için ana bellek ve hafıza kartı ayrımı yapmak için çağrılır. Örn.: EB600"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.sanitize_callback:1
msgid ""
"Callback to allow individual device drivers to override the path "
"sanitization used by :meth:`create_upload_path`."
msgstr "Bağımsız aygıt sürücülerin :meth:`create_upload_path` tarafından kullanılan yol düzenlemesini ezmesine izin veren geri çağrı."

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.filename_callback:1
msgid ""
"Callback to allow drivers to change the default file name set by "
":meth:`create_upload_path`."
msgstr "Sürücülerin :meth:`create_upload_path` tarafından ayarlanan varsayılan dosya ismini değiştirmesine izin veren geri çağrı."

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.sanitize_path_components:1
msgid ""
"Perform any device specific sanitization on the path components for files to"
" be uploaded to the device"
msgstr "Aygıta yüklenecek dosyalar için yol bileşenlerinde aygıta özel tüm düzenlemeleri yap"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.get_annotations:1
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr "path_map'i aygıtta bulunan dosyaların annotation_map'ine çöz"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.pydocstring
#: of calibre.devices.usbms.device.Device.add_annotation_to_library:1
msgid "Add an annotation to the calibre library"
msgstr "Calibre kitaplığına bir dipnot ekle"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS:1
msgid ""
"Bases: :class:`calibre.devices.usbms.cli.CLI`, "
":class:`calibre.devices.usbms.device.Device`"
msgstr "Tabanlar: :class:`calibre.devices.usbms.cli.CLI`, :class:`calibre.devices.usbms.device.Device`"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS:1
msgid ""
"The base class for all USBMS devices. Implements the logic for "
"sending/getting/updating metadata/caching metadata/etc."
msgstr "Tüm USBMS aygıtlar için temel sınıf. Gönderme/alma/metadata güncelleme/metadata zulalama/vs. için mantığı uygular"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_cover:1
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr "Kitap kapağını aygıta yükle. Varsayılan uygulama hiçbir şey yapmaz."

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_cover:3
msgid "The full path to the directory where the associated book is located."
msgstr "İlişkili kitabın bulunduğu dizinin tam yolu."

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_cover:4
msgid "The name of the book file without the extension."
msgstr "Kitap dosyasının uzantısız ismi."

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_cover:5
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr "kitaba ait metadata. Kapak için metadata.thumbnail kullanın"

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.upload_cover:7
msgid "The full path to the e-book file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.pydocstring
#: of calibre.devices.usbms.driver.USBMS.normalize_path:1
msgid "Return path with platform native path separators"
msgstr "Yolu platforma özel yol ayraçlarıyla döndür"

#: ../../home/kovid/work/calibre/manual/plugins.rst:155
msgid "User Interface Actions"
msgstr "Kullanıcı Arayüzü Eylemleri"

#: ../../home/kovid/work/calibre/manual/plugins.rst:157
msgid ""
"If you are adding your own plugin in a ZIP file, you should subclass both "
"InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` "
"method of your InterfaceActionBase subclass must return an instantiated "
"object of your InterfaceBase subclass."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction:1
msgid "Bases: :class:`PyQt5.QtCore.QObject`"
msgstr "Tabanlar: :class:`PyQt5.QtCore.QObject`"

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction:1
msgid ""
"A plugin representing an \"action\" that can be taken in the graphical user "
"interface. All the items in the toolbar and context menus are implemented by"
" these plugins."
msgstr "Grafik kullanıcı arayüzüne alınabilecek bir \"eylemi\" temsil eden bir eklenti. Araç çubuğundaki tüm öğeler ve içerik menüsü bu eklentilerce uygulanır."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction:5
msgid ""
"Note that this class is the base class for these plugins, however, to "
"integrate the plugin with calibre's plugin system, you have to make a "
"wrapper class that references the actual plugin. See the "
":mod:`calibre.customize.builtins` module for examples."
msgstr "Bu sınıfın bu eklentiler için taban sınıf olduğunu unutmayın, ancak, eklentiyi calibre'nin eklenti sistemiyle birleştirmek için, asıl eklentiye referans eden bir kapsayıcı sınıf yapmalısınız. Örnekler için :mod:`calibre.customize.builtins` modülüne göz atın."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction:10
msgid ""
"If two :class:`InterfaceAction` objects have the same name, the one with "
"higher priority takes precedence."
msgstr "İki :class:`InterfaceAction` nesnesi aynı isme sahipse, yüksek öncelikli olan önce gelir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction:13
msgid ""
"Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, "
":meth:`location_selected` :meth:`shutting_down` and "
":meth:`initialization_complete` methods."
msgstr "Alt-sınıflar :meth:`genesis`, :meth:`library_changed`, :meth:`location_selected` :meth:`shutting_down` ve :meth:`initialization_complete` metodlarını uygulamalıdırlar."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction:17
msgid ""
"Once initialized, this plugin has access to the main calibre GUI via the "
":attr:`gui` member. You can access other plugins by name, for example::"
msgstr "İlklendirildikten sonra, bu eklentinin :attr:`gui` üyesi ile ana calibre GUI'sine erişimi vardır. Diğer eklentilere isimle erişebilirsiniz, örneğin::"

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction:22
msgid ""
"To access the actual plugin, use the :attr:`interface_action_base_plugin` "
"attribute, this attribute only becomes available after the plugin has been "
"initialized. Useful if you want to use methods from the plugin class like "
"do_user_config()."
msgstr "Asıl eklentiye erişmek için, :attr:`interface_action_base_plugin` özniteliğini kullanın, bu öznitelik yalnızca eklenti kendisi ilklendirildiğinde kullanılabilir olur. do_user_config() gibi eklenti sınıfından metodlar kullanmak istediğinizde faydalıdır."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction:27
msgid ""
"The QAction specified by :attr:`action_spec` is automatically create and "
"made available as ``self.qaction``."
msgstr ":attr:`action_spec` tarafından belirtilen QAction ``self.qaction`` olarak otomatik olarak oluşturulur ve kullanılabilir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.name:1
msgid ""
"The plugin name. If two plugins with the same name are present, the one with"
" higher priority takes precedence."
msgstr "Eklenti adı. Aynı isme sahip iki eklenti varsa, yüksek öncelikli olan seçilir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.priority:1
msgid ""
"The plugin priority. If two plugins with the same name are present, the one "
"with higher priority takes precedence."
msgstr "Eklenti önceliği. Aynı isme sahip iki eklenti varsa, yüksek öncelikli olan seçilir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.popup_type:1
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr "Bu eklentinin araç çubuğuna eklenmesi durumu için menü açılır pencere türü"

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.auto_repeat:1
msgid ""
"Whether this action should be auto repeated when its shortcut key is held "
"down."
msgstr "Bu eylemin kısayol tuşu basılı tutulduğunda otomatik olarak yinelenip yinelenmeyeceği."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.action_spec:1
msgid ""
"Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and"
" keyboard shortcut can be None shortcut must be a string, None or tuple of "
"shortcuts. If None, a keyboard shortcut corresponding to the action is not "
"registered. If you pass an empty tuple, then the shortcut is registered with"
" no default key binding."
msgstr "Şu biçimde: (metin, simge_yolu, araç ipucu, klavye kısayolu) simge, araç ipucu ve klavye kısayolu None olabilir, kısayol karakter dizisi, None veya kısa yollar demeti olmalı. None ise, bu eylemle ilişkili bir klavye kısayolu kaydedilmez. Boş bir demet yollarsanız, kısayol varsayılan bir tuş bağı olmadan kaydedilir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.action_add_menu:1
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr "True ise, bir menü self.qaction'a otomatik olarak oluşturulur ve eklenir"

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
msgid ""
"If True, a clone of self.qaction is added to the menu of self.qaction If you"
" want the text of this action to be different from that of self.qaction, set"
" this variable to the new text"
msgstr "True ise, self.qaction'un bir kopyası self.qaction'un menüsüne eklenir. Bu eylemin metninin self.qaction'dakinden farklı olmasını isterseniz, bu değişkeni yeni metne ayarlayın"

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.dont_add_to:1
msgid ""
"Set of locations to which this action must not be added. See "
":attr:`all_locations` for a list of possible locations"
msgstr "Bu eylemin eklenmemesi gereken konumlar kümesi. Muhtemel konumlar listesi için :attr:`all_locations`a göz atın"

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.dont_remove_from:1
msgid ""
"Set of locations from which this action must not be removed. See "
":attr:`all_locations` for a list of possible locations"
msgstr "Bu eylemin çıkarılmaması gereken konumlar kümesi. Muhtemel konumlar listesi için :attr:`all_locations`a göz atın"

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.action_type:1
msgid ""
"Type of action 'current' means acts on the current view 'global' means an "
"action that does not act on the current view, but rather on calibre as a "
"whole"
msgstr "'current' türünden bir eylem mevcut görünüm üzerinde hareket, 'global' ise mevcut görnüm değil bir bütün olarak calibre üzerinde hareket anlamına gelir"

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.accepts_drops:1
msgid ""
"If True, then this InterfaceAction will have the opportunity to interact "
"with drag and drop events. See the methods, :meth:`accept_enter_event`, "
":meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr "True ise, bu interfaceAction sürükle bırak eylemleriyle etkileşme şansına sahip olacaktır. Detaylar için :meth:`accept_enter_event`, :meth`:accept_drag_move_event`, :meth:`drop_event` metodlarına göz atın."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
msgid ""
"This method should return True iff this interface action is capable of "
"handling the drag event. Do not call accept/ignore on the event, that will "
"be taken care of by the calibre UI."
msgstr "Bu metod bu arayüz eylemi sürükleme olayını yapabilme becerisine sahipse True döndürmeli. Olayda kabul et/göz ardı et çağırmayın, bu calibre UI'si tarafından halledilir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.drop_event:1
msgid ""
"This method should perform some useful action and return True iff this "
"interface action is capable of handling the drop event. Do not call "
"accept/ignore on the event, that will be taken care of by the calibre UI. "
"You should not perform blocking/long operations in this function. Instead "
"emit a signal or use QTimer.singleShot and return quickly. See the builtin "
"actions for examples."
msgstr "Bu metod bazı kullanışlı eylemler gerçekleştirmeli ve bu arayüz bırak eylemini yapabilme becerisine sahipse True döndürmeli. Olayda kabul et/göz ardı et çağırmayın, bu calibre UI'si tarafından halledilir. Bu fonksiyonda engelleyici/uzun işlemler yapmayın. Bunun yerine bir sinyal yayın veeya bir QTimer.singleShot kullanın ve çabucak dönün. Örnekler için dahili eylemlere göz atabilirsiniz."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.create_menu_action:1
msgid ""
"Convenience method to easily add actions to a QMenu. Returns the created "
"QAction. This action has one extra attribute calibre_shortcut_unique_name "
"which if not None refers to the unique name under which this action is "
"registered with the keyboard manager."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.create_menu_action:6
msgid "The QMenu the newly created action will be added to"
msgstr "Yeni oluşturulan eylemin ekleneceği QMenu"

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.create_menu_action:7
msgid ""
"A unique name for this action, this must be globally unique, so make it as "
"descriptive as possible. If in doubt add a uuid to it."
msgstr "Bu eylem için benzersiz bir isim, bu program genelinde benzersiz olmalıdır, yani olabildiğince açıklayıcı. Kararsızsanız bir uuid ekleyebilirsiniz."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.create_menu_action:10
msgid "The text of the action."
msgstr "Eylem metni."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.create_menu_action:11
msgid ""
"Either a QIcon or a file name. The file name is passed to the I() builtin, "
"so you do not need to pass the full path to the images directory."
msgstr "Bir QIcon veya dosya adı. Dosya adı I() dahilisine geçirilir, yani resim dizininin tam yolunu girmenize gerek yoktur."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.create_menu_action:14
msgid ""
"A string, a list of strings, None or False. If False, no keyboard shortcut "
"is registered for this action. If None, a keyboard shortcut with no default "
"keybinding is registered. String and list of strings register a shortcut "
"with default keybinding as specified."
msgstr "Bir karakter dizisi, karakter dizisi listesi, None veya False. False ise, bu eylem için klavye kısayolu kaydedilmez. None ise, varsayılan bağlayıcısı olmayan bir klavye kısayolu kaydedilir. Karakter dizisi ve karakter dizisi listeleri belirtilen varsayılan tuş atamasını kaydeder."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.create_menu_action:18
msgid "A description for this action. Used to set tooltips."
msgstr "Bu eylem için tanım. Araç ipuçlarını ayarlamak için kullanılır."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.create_menu_action:20
msgid ""
"A callable which is connected to the triggered signal of the created action."
msgstr "Oluşturulan eylemin tetiklenen sinyaline bağlanmak üzere bir çağrılabilir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.create_menu_action:22
msgid ""
"The text displayed to the user when customizing the keyboard shortcuts for "
"this action. By default it is set to the value of ``text``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.load_resources:12
msgid ""
"A dictionary of the form ``{name : file_contents}``. Any names that were not"
" found in the ZIP file will not be present in the dictionary."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.genesis:1
msgid ""
"Setup this plugin. Only called once during initialization. self.gui is "
"available. The action specified by :attr:`action_spec` is available as "
"``self.qaction``."
msgstr "Bu eklentiyi kur. Yalnızca ilklendirme aşamasında bir kere çağrılır. self.gui kullanılabilirdir. :attr:`action_spec` tarafından belirtilen eylem ``self.qaction`` ile kullanılabilir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.location_selected:1
msgid ""
"Called whenever the book list being displayed in calibre changes. Currently "
"values for loc are: ``library, main, card and cardb``."
msgstr "Calibre'de gösterilen kitap listesi her değiştiğinde çağrılır. Şu an loc için değerler: ``kitaplık, ana, kart ve kartb``."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.location_selected:4
msgid ""
"This method should enable/disable this action and its sub actions as "
"appropriate for the location."
msgstr "Bu metod bu eylemi ve alt eylemlerini konuma uygun olarak açmalı/kapamalı."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.library_changed:1
msgid "Called whenever the current library is changed."
msgstr "Mevcut kitaplık değiştiğinde çağrılır."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.library_changed:3
msgid "The LibraryDatabase corresponding to the current library."
msgstr "Mevcut kitaplığa karşılık gelen LibraryDatabase."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
msgid ""
"Called once per action when the layout of the main GUI is completed. If your"
" action needs to make changes to the layout, they should be done here, "
"rather than in :meth:`initialization_complete`."
msgstr "Ana GUI'nin yerleşimi tamamlandığında her eylem için bir kere çağrılır. Eyleminiz yerleşimde değişiklik yapmalıysa, bu değişiklikler :meth:`initialization_complete` yerine burada olmalıdır."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.initialization_complete:1
msgid ""
"Called once per action when the initialization of the main GUI is completed."
msgstr "Ana GUI ilklendirmesi bittiğinde her eylem için bir kere çağrılır."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.shutting_down:1
msgid ""
"Called once per plugin when the main GUI is in the process of shutting down."
" Release any used resources, but try not to block the shutdown for long "
"periods of time."
msgstr "Ana GUI kapanma evresindeyken her eklenti için bir kere çağrılır. Kullanılan kaynakları bırakın, ama kapatmayı uzun süre engellememeye çalışın."

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.pydocstring
#: of calibre.gui2.actions.InterfaceAction.shutting_down:5
msgid ""
"False to halt the shutdown. You are responsible for telling the user why the"
" shutdown was halted."
msgstr "Kapatmayı durdurmak için False. Kapatmanın neden durdurulduğunu kullanıcıya söylemek sizin sorumluluğunuzda."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.InterfaceActionBase.load_actual_plugin:1
msgid "This method must return the actual interface action plugin object."
msgstr "Bu metod asıl arayüz eylem eklenti nesnesini döndürmeli."

#: ../../home/kovid/work/calibre/manual/plugins.rst:172
msgid "Preferences plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:1
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr "Tercihler iletişim penceresinde gösterilen bir parçacığı temsil eden eklenti."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:3
msgid ""
"This plugin has only one important method :meth:`create_widget`. The various"
" fields of the plugin control how it is categorized in the UI."
msgstr "Bu eklentinin sadece bir önemli metodu var :meth:`create_widget`. Eklentinin çeşitli alanları UI'de nasıl kategorilendiğini kontrol eder."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.config_widget:1
msgid ""
"Import path to module that contains a class named ConfigWidget which "
"implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr "ConfigWidget adında ConfigWidgetInterface'yi uygulayan sınıfı içeren modüle yolu içe aktar. :meth:`create_widget` tarafından kullanılır."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.category_order:1
msgid ""
"Where in the list of categories the :attr:`category` of this plugin should "
"be."
msgstr "Bu eklentinin :attr:`category`si kategori listesinden nerede bulunmalı."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.name_order:1
msgid ""
"Where in the list of names in a category, the :attr:`gui_name` of this "
"plugin should be"
msgstr "Bu eklentinin :attr:`gui_name`si bir kategorideki isimler listesinde nerede bulunmalı"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.category:1
msgid "The category this plugin should be in"
msgstr "Bu eklentinin bulunması gereken kategori"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.gui_category:1
msgid "The category name displayed to the user for this plugin"
msgstr "Bu eklenti için kullanıcıya gösterilecek kategori ismi"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.gui_name:1
msgid "The name displayed to the user for this plugin"
msgstr "Bu eklenti için kullanıcıya gösterilecek isim"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.icon:1
msgid "The icon for this plugin, should be an absolute path"
msgstr "Eklenti simgesi, mutlak yol olmalıdır"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.description:1
msgid "The description used for tooltips and the like"
msgstr "Araç ipuçları ve benzerleri için kullanılacak tanımlama"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:1
msgid ""
"Create and return the actual Qt widget used for setting this group of "
"preferences. The widget must implement the "
":class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr "Bu tercih grubunu ayarlamak için kullanılan asıl Qt parçacığını oluştur ve döndür. Parçacık :class:`calibre.gui2.preferences.ConfigWidgetInterface`yi uygulamalıdır."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:5
msgid ""
"The default implementation uses :attr:`config_widget` to instantiate the "
"widget."
msgstr "Varsayılan uygulama parçacığı ilklendirmek için :attr:`config_widget` kullanır."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface:1
msgid ""
"This class defines the interface that all widgets displayed in the "
"Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base "
"class that implements this interface and defines various convenience methods"
" as well."
msgstr "Bu sınıf Tercihler iletişim penceresinde gösterilen tüm parçacıkların uygulaması gereken arayüzü tanımlar. Bu arayüzü uygulayan ve çeşitli kolaylık sağlayıcı metod tanımlayan :class:`ConfigWidgetBase` taban sınıfına göz atın."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
msgid ""
"This signal must be emitted whenever the user changes a value in this widget"
msgstr "Bu sinyal kullanıcı bu parçacıkta her değişiklik yaptığında yayılmalıdır"

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of
#: calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ":meth:`restore_to_defaults` metodu uygulanmışsa True olarak ayarla."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
msgid "The tooltip for the \"Restore defaults\" button"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
msgid ""
"If True the Preferences dialog will not allow the user to set any more "
"preferences. Only has effect if :meth:`commit` returns True."
msgstr "True ise Tercihler iletişim penceresi kullanıcının daha fazla tercih ayarlamasına izin vermez. Yalnızca :meth:`commit` True döndürdüğünde etkilidir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
msgid ""
"Called once before the widget is displayed, should perform any necessary "
"setup."
msgstr "Parçacık görüntülenmeden önce bir kere çağrılır, gerekli tüm kurulumu gerçekleştirmelidir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
msgid "The main calibre graphical user interface"
msgstr "Ana calibre grafik kullanıcı arayüzü"

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.initialize:1
msgid ""
"Should set all config values to their initial values (the values stored in "
"the config files)."
msgstr "Tüm yapılandırma değerlerini başlangıç değerlerine ayarlamalıdır (yapılandırma dosyalarında saklı değerler)."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.restore_defaults:1
msgid "Should set all config values to their defaults."
msgstr "Tüm yapılandırma değerlerini varsayılan değerlerine ayarlamalıdır."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.commit:1
msgid ""
"Save any changed settings. Return True if the changes require a restart, "
"False otherwise. Raise an :class:`AbortCommit` exception to indicate that an"
" error occurred. You are responsible for giving the user feedback about what"
" the error is and how to correct it."
msgstr "Değişen ayarları kaydet. Değişiklikler yeniden başlatma gerektiriyorsa True döndür, aksi halde False. Bir hata olduğunu belirtmek için bir :class:`AbortCommit` istisnası yükselt. Hatanın ne olduğu ve nasıl düzeltileceğiyle ilgili kullanıcıya bilgi vermek sizin sorumluluğunuzdadır."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
msgid ""
"Called once after this widget is committed. Responsible for causing the gui "
"to reread any changed settings. Note that by default the GUI re-initializes "
"various elements anyway, so most widgets won't need to use this method."
msgstr "Bu parçacık işlendikten sonra bir kere çağrılır. Gui'nin değiştirilen ayarları tekrar okumasına yol açmakla sorumludur. Varsayılan olarak GUI çeşitli öğeleri zaten tekrar ilklendirir, yani çoğu parçacığın bu metodu kullanmasına gerek yoktur."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:1
msgid ""
"Base class that contains code to easily add standard config widgets like "
"checkboxes, combo boxes, text fields and so on. See the :meth:`register` "
"method."
msgstr "Kolayca standart kontrol kutuları, açılır kapanır kutular, metin alanları benzeri parçacıklar eklemek için kod içeren temel sınıf. :meth:`register` metoduna göz atın."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:5
msgid ""
"This class automatically handles change notification, resetting to default, "
"translation between gui objects and config objects, etc. for registered "
"settings."
msgstr "Bu sınıf kaydedilen ayarlar için bildirim değişikliği, varsayılana geri dönme, gui nesneleri ve ayar nesneleri arası geçişleri vs. otomatik yönetir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:9
msgid ""
"If your config widget inherits from this class but includes setting that are"
" not registered, you should override the :class:`ConfigWidgetInterface` "
"methods and call the base class methods inside the overrides."
msgstr "Eğer yapılandırma parçacığınız bu sınıftan türemiş fakat kaydedilmemiş ayarlar içeriyorsa, :class:`ConfigWidgetInterface` metodlarını ezmeli ve ezilen metodlar içinden taban sınıfın metodlarını çağırmalısınız."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:1
msgid "Register a setting."
msgstr "Bir ayar kaydet."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:3
msgid "The setting name"
msgstr "Ayar adı"

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:4
msgid "The config object that reads/writes the setting"
msgstr "Ayarı okuyan/yazan yapılandırma nesnesi"

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:5
msgid ""
"The name of the GUI object that presents an interface to change the setting."
" By default it is assumed to be ``'opt_' + name``."
msgstr "Ayarın değiştirilebilmesi için bir arayüz sunan GUI nesnesinin adı. Varsayılan olarak ``'opt_' + isim`` beklenir."

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:8
msgid ""
"If this setting is a multiple choice (combobox) based setting, the list of "
"choices. The list is a list of two element tuples of the form: ``[(gui name,"
" value), ...]``"
msgstr "Bu ayar çoklu seçim (açılır kutu) temelli bir ayarsa, seçimler listesi. Liste ``[(gui ismi, değer), ...]`` şeklinde ikili demetler listesidir"

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:11
msgid ""
"The class responsible for managing this setting. The default class handles "
"almost all cases, so this param is rarely used."
msgstr "Bu ayarı yönetmekle sorumlu sınıf. Varsayılan sınıf nerdeyse tüm durumları ele alır, yani bu parametre nadiren kullanılır."

#: ../../home/kovid/work/calibre/manual/plugins.rst:188
msgid "Viewer plugins"
msgstr "Görüntüleme eklentileri"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.type:1
msgid ""
"These plugins are used to add functionality to the calibre E-book viewer."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.load_fonts:1
msgid ""
"This method is called once at viewer startup. It should load any fonts it "
"wants to make available. For example::"
msgstr "Bu metod görüntüleyici açılışında bir kere çağrılır. Kullanılabilir olmasını istediği tüm yazı tiplerini yüklemelidir. Örneğin::"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.load_javascript:1
msgid ""
"This method is called every time a new HTML document is loaded in the "
"viewer. Use it to load javascript libraries into the viewer. For example::"
msgstr "Bu metod görüntüleyicide yeni bir HTML belgesi yüklendiğinde çağrılır. Javascript kitaplıklarını görüntüleyiciye yüklemek için kullanın. Örneğin::"

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.run_javascript:1
msgid ""
"This method is called every time a document has finished loading. Use it in "
"the same way as load_javascript()."
msgstr "Bu metod bir belgenin yüklenmesi her bittiğinde çağrılır. load_javascript() kullanımı şeklinde kullanabilirsiniz."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.customize_ui:1
msgid ""
"This method is called once when the viewer is created. Use it to make any "
"customizations you want to the viewer's user interface. For example, you can"
" modify the toolbars via ui.tool_bar and ui.tool_bar2."
msgstr "Bu metod görüntüleyici oluşturulduğunda bir kere çağrılır. Görüntüleyicinin kullanıcı arayüzünde yapmak istediğiniz özelleştirmeler için kullanın. Örneğin, araç çubuklarını ui.tool_bar ve ui.tool_bar2 ile değiştirebilirsiniz."

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.customize_context_menu:1
msgid ""
"This method is called every time the context (right-click) menu is shown. "
"You can use it to customize the context menu. ``event`` is the context menu "
"event and hit_test_result is the QWebHitTestResult for this event in the "
"currently loaded document."
msgstr "Bu metod içerik menüsü (sağ-tık) gösterildiğinde çağrılır. İçerik menüsünü özelleştirmek için kullanabilirsiniz. ``event`` içerik menüsü olayıdır ve hit_test_result yüklenmiş mevcut belgedeki bu olay için QWebHitTestResult'dur."
