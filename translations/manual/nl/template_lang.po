# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# Alex, 2016
# M. de Boer <de.boer.melle@gmail.com>, 2018-2019
# Meteor0id, 2019
# peter <luc@ditbenik.be>, 2021-2022
# math1985 <transifex@matthijsmelissen.nl>, 2016
# Volluta <volluta@tutanota.com>, 2016
# W.P.M.E. Hofland <wpme.hofland@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-13 12:47+0000\n"
"PO-Revision-Date: 2014-06-17 08:34+0000\n"
"Last-Translator: peter <luc@ditbenik.be>, 2021-2022\n"
"Language-Team: Dutch (http://www.transifex.com/calibre/calibre/language/nl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: nl\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../__w/calibre/calibre/manual/template_lang.rst:4
msgid "The calibre template language"
msgstr "De calibre sjabloontaal"

#: ../../__w/calibre/calibre/manual/template_lang.rst:6
msgid ""
"The calibre template language is a calibre-specific language used throughout"
" calibre for tasks such as specifying file paths, formatting values, and "
"computing the value for user-specified columns. Examples:"
msgstr "De calibre sjabloontaal is een calibre-eigen taal gebruikt doorheen calibre voor taken zoals specificeren van bestandspaden, opmaken van waarden en berekenen van de waarde voor gebruiker-gespecificeerde kolommen. Voorbeelden:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:8
msgid ""
"Specify the folder structure and file names when saving files from the "
"calibre library to the disk or e-book reader."
msgstr "Specificeer de mappenstructuur en bestandsnamen bij opslaan van bestanden van de calibre bibliotheek naar de schijf of e-boekreader."

#: ../../__w/calibre/calibre/manual/template_lang.rst:9
msgid "Define rules for adding icons and colors to the calibre book list."
msgstr "Definieer regels voor toevoegen van iconen en kleuren aan calibre's boekenlijst."

#: ../../__w/calibre/calibre/manual/template_lang.rst:10
msgid "Define `virtual columns` that contain data from other columns."
msgstr "Definieer `virtuele kolommen` die data bevatten van andere kolommen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:11
msgid "Advanced library searching."
msgstr "Geavanceerd bibliotheek zoeken."

#: ../../__w/calibre/calibre/manual/template_lang.rst:12
msgid "Advanced metadata search and replace."
msgstr "Geavanceerd metadata zoeken en vervangen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:14
msgid ""
"The language is built around the notion of a `template`, which specifies "
"which book metadata to use, computations on that metadata, and how it is to "
"be formatted."
msgstr "De taal is gebouwd rond het concept van een `sjabloon` die specificeert welke metadata te gebruiken, berekeningen op die metadata en hoe het opgemaakt moet worden."

#: ../../__w/calibre/calibre/manual/template_lang.rst:17
msgid "Basic templates"
msgstr "Basis sjablonen"

#: ../../__w/calibre/calibre/manual/template_lang.rst:19
msgid ""
"A basic template consists one or more ``template expressions``. A ``template"
" expression`` consists of text and names in curly brackets (``{}``) that is "
"replaced by the corresponding metadata from the book being processed. For "
"example, the default template in calibre used for saving books to device has"
" 4 ``template expressions``::"
msgstr "Een basissjabloon bestaat uit één of meer ``template expressions``. Een ``template expression`` bestaat uit tekst en namen tussen accolades (``{}``) die wordt vervangen door de overeenkomende metadata van het boek in verwerking. Bv. de standaard sjabloon in calibre gebruikt voor boeken naar toestel opslaan heeft vier ``template expressions``::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:23
msgid "For the book \"The Foundation\" by \"Isaac Asimov\" the  will become::"
msgstr "Voor het boek \"The Foundation\" door \"Isaac Asimov\" wordt dit::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:27
msgid ""
"The slashes are not ``template expressions`` because they are in between in "
"``{}``. Such text is left where it appears. For example, if the template "
"is::"
msgstr "De schuine strepen zijn geen ``template expressions`` omdat ze tussen ``{}`` staan. Zulke tekst blijft waar ie is. Bv., als de sjabloon is::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:31
msgid "then for \"The Foundation\" the template produces::"
msgstr "dan voor \"The Foundation\" produceert de sjabloon::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:35
msgid ""
"A ``template expression`` can access all the metadata available in calibre, "
"including custom columns (columns you create yourself), by using a column's "
"``lookup name``. To find the lookup name for a `column` (sometimes called "
"`fields`), hover your mouse over the column header in calibre's book list. "
"Lookup names for custom columns always begin with ``#``. For series type "
"columns there is an additional field named ``#lookup name_index`` that is "
"the series index for that book in the series. For example, if you have a "
"custom series column named ``#myseries``, there will also be a column named "
"``#myseries_index``. The standard series column's index is named "
"``series_index``."
msgstr "Een ``template expression`` heeft toegang tot alle metadata in calibre, inbegrepen aangepaste kolommen (kolommen die u zelf creëerde), door de kolom z'n ``lookup name`` te gebruiken. Om een `kolom` z'n lookup name te vinden (soms `velden` genaamd), zweef met uw muis over de kolom header in calibre's boekenlijst. Lookup names voor aangepaste kolommen beginnen altijd met ``#``. Voor reeks type kolommen is er een bijkomend veld genaamd ``#lookup name_index`` wat de serie index is voor dat boek in de serie. Bv., als u een aangepaste serie hebt genaamd ``#myseries`` dan zal er ook een kolom zijn genaamd ``#myseries_index``. De standaard serie kolom index heet ``series_index``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:37
msgid "In addition to the standard column based fields, you also can use:"
msgstr "Naast de kolom gebaseerde velden, kunt u gebruik maken van:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:39
msgid ""
"``{formats}`` - A list of formats available in the calibre library for a "
"book"
msgstr "``{formats}`` - Een lijst van formaten beschikbaar in de calibre bibliotheek voor een boek"

#: ../../__w/calibre/calibre/manual/template_lang.rst:40
msgid "``{identifiers:select(isbn)}`` - The ISBN of the book"
msgstr "``{identifiers:select(isbn)}`` - De ISBN van het boek"

#: ../../__w/calibre/calibre/manual/template_lang.rst:42
msgid ""
"If the metadata for the field for a given book is not defined then the field"
" in the template is replaced by the empty string (``''``). For example, "
"consider the following template::"
msgstr "Als de metadata voor het veld voor een bepaald boek niet gedefinieerd is wordt het veld in de sjabloon vervangen door de lege string (``''``). Bv. overweeg volgende sjabloon::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:46
msgid ""
"If Asimov's book \"Second Foundation\" is in the series \"Foundation\" then "
"the template produces::"
msgstr "Als Asimov's boek \"Second Foundation\" in de serie \"Foundation\" is dan geeft de sjabloon::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:50
msgid ""
"If a series has not been entered for the book then the template produces::"
msgstr "Als er voor een boek geen serie is ingevoerd geeft de sjabloon::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:54
msgid ""
"The template processor automatically removes multiple slashes and leading or"
" trailing spaces."
msgstr "De sjabloonverwerker verwijdert automatisch meerdere schuine strepen en voorloop en volg spaties."

#: ../../__w/calibre/calibre/manual/template_lang.rst:57
msgid "Advanced formatting"
msgstr "Geavanceerde opmaak"

#: ../../__w/calibre/calibre/manual/template_lang.rst:59
msgid ""
"In addition to metadata substitution, templates can conditionally include "
"additional text and control how substituted data is formatted."
msgstr "Bovenop metadatasubstitutie kunnen sjablonen voorwaardelijk extra tekst opnemen en de opmaak van gesubstitueerde gegevens controleren."

#: ../../__w/calibre/calibre/manual/template_lang.rst:61
msgid "**Conditionally including text**"
msgstr "**Voorwaardelijk tekst opnemen**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:63
msgid ""
"Sometimes you want text to appear in the output only if a field is not "
"empty. A common case is ``series`` and ``series_index`` where you want "
"either nothing or the two values separated by a hyphen. calibre handles this"
" case using a special ``template expression`` syntax."
msgstr "Soms wilt u dat tekst enkel in de uitvoer verschijnt als een veld niet leeg is. Een veel voorkomend geval is ``series`` en ``series_index`` waar u ofwel niets wil of de twee waarden gescheiden door een streepje. calibre doet dit via een speciale ``template expression`` syntaxis."

#: ../../__w/calibre/calibre/manual/template_lang.rst:65
msgid ""
"For example and using the above Foundation example, assume you want the "
"template to produce `Foundation - 3 - Second Foundation`. This template "
"produces that output:"
msgstr "Bv. met het Foundation voorbeeld van boven, veronderstel dat u wilt dat de sjabloon `Foundation - 3 - Second Foundation` geeft. Deze sjabloon geeft die uitvoer:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:67
msgid "``{series} - {series_index} - {title}``"
msgstr "``{series} - {series_index} - {title}``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:69
msgid ""
"However, if a book has no series the template will produce `- - the title`, "
"which is probably not what you want. Generally, people want the result be "
"the title without the extraneous hyphens. You can accomplish this using the "
"following template syntax:"
msgstr "Alhoewel, als een boek geen deel van een serie is, geeft de sjabloon  `- - de titel`, wat waarschijnlijk niet is wat u wilt. Gewoonlijk willen de mensen als resultaat de titel zonder extra streepjes. Dit kan met de volgende sjabloon syntaxis:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:71
msgid "``{field:|prefix_text|suffix_text}``"
msgstr "``{field:|prefix_text|suffix_text}``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:73
msgid ""
"This ``template expression`` says that if ``field`` has the value `XXXX` "
"then the result will be `prefix_textXXXXXsuffix_text`. If ``field`` is empty"
" (has no value) then the result will be the empty string (nothing) because "
"the prefix and suffix are ignored. The prefix and suffix can contain blanks."
msgstr "Deze ``template expression`` zegt dat als ``field`` de waarde `XXXX` heeft, het resultaat `prefix_textXXXXXsuffix_text` zal zijn. Als ``field`` leeg is (heeft geen waarde) dan zal het resultaat de lege string zijn (niets) omdat voor- en achtervoegsel genegeerd worden. Het voor- en achtervoegsel kunnen lege plekken hebben."

#: ../../__w/calibre/calibre/manual/template_lang.rst:75
msgid ""
"**Do not use subtemplates (`{ ... }`) or functions (see below) in the prefix"
" or the suffix.**"
msgstr "**Gebruik geen subsjablonen (`{ ... }`) of functies (zie onder) in het voor- of achtervoegsel.**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:77
msgid ""
"Using this syntax, we can solve the above no-series problem with the "
"template::"
msgstr "Met deze syntaxis kunnen we het geen-serie probleem boven oplossen met de sjabloon::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:81
msgid ""
"The hyphens will be included only if the book has a series index, which it "
"has only if it has a series. Continuing the Foundation example again, the "
"template will produce `Foundation - 1 - Second Foundation`."
msgstr "De streepjes komen er enkel bij als het boek een serie index heeft, die het enkel heeft als het deel van een serie is. Verder weer met het Foundation voorbeeld, de sjabloon geeft `Foundation - 1 - Second Foundation`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:83
#: ../../__w/calibre/calibre/manual/template_lang.rst:260
msgid "Notes:"
msgstr "Aantekeningen:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:85
msgid ""
"You must include the colon after the ``lookup name`` if you are using a "
"prefix or a suffix."
msgstr "U moet een dubbel punt zetten na de ``lookup name`` als u een voor- of achtervoegsel gebruikt."

#: ../../__w/calibre/calibre/manual/template_lang.rst:86
msgid ""
"You must either use either no or both ``|`` characters. Using one, as in "
"``{field:| - }``, is not allowed."
msgstr "U moet ofwel beide ofwel geen ``|`` karakters gebruiken. Eén gebruiken, zoals in ``{field:| - }``, is niet toegelaten."

#: ../../__w/calibre/calibre/manual/template_lang.rst:87
msgid ""
"It is OK to provide no text for either the prefix or the suffix, such as in "
"``{series:|| - }``. The template ``{title:||}`` is the same as ``{title}``."
msgstr "Het is oké om geen tekst te voorzien voor voor- of achtervoegsel, zoals in ``{series:|| - }``. De sjabloon ``{title:||}`` is hetzelfde als ``{title}``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:89
msgid "**Formatting**"
msgstr "**Opmaak**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:91
msgid ""
"Suppose you want the ``series_index`` to be formatted as three digits with "
"leading zeros. This does the trick:"
msgstr "Veronderstel dat u ``series_index`` opgemaakt wilt als drie cijfers met voorloopnullen. Dit doet de truc:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:93
msgid "``{series_index:0>3s}`` - Three digits with leading zeros"
msgstr "``{series_index:0>3s}`` - Drie cijfers met voorloopnullen"

#: ../../__w/calibre/calibre/manual/template_lang.rst:95
msgid "For trailing zeros, use:"
msgstr "Voor volgnullen, gebruik:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:97
msgid "``{series_index:0<3s}`` - Three digits with trailing zeros"
msgstr "``{series_index:0<3s}`` - Drie cijfers met volgnullen"

#: ../../__w/calibre/calibre/manual/template_lang.rst:99
msgid ""
"If you use series indices with fractional values, e.g., 1.1, you might want "
"the decimal points to line up. For example, you might want the indices 1 and"
" 2.5 to appear as 01.00 and 02.50 so that they will sort correctly on a "
"device that does lexical sorting. To do this, use:"
msgstr "Als u reeksindexen gebruikt met fractionele waarden, bv. 1,1, hebt u de komma's misschien graag uitgelijnd. Bv. u hebt misschien graag dat indexen 1 en 2,5 eruit zien als 01,00 en 02,50 zodat ze correct sorteren op een toestel dat lexicaal sorteert. Om dit te doen, gebruik:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:101
msgid ""
"``{series_index:0>5.2f}`` - Five characters consisting of two digits with "
"leading zeros, a decimal point, then 2 digits after the decimal point."
msgstr "``{series_index:0>5.2f}`` - Vijf karakters bestaande uit twee cijfers met voorloopnullen, een komma en twee cijfers na de komma."

#: ../../__w/calibre/calibre/manual/template_lang.rst:103
msgid "If you want only the first two letters of the data, use:"
msgstr "Als u enkel de twee eerste letters van de data wil, gebruik:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:105
msgid ""
"``{author_sort:.2}`` - Only the first two letters of the author sort name"
msgstr "``{author_sort:.2}`` - Enkel de eerste twee letters van de auteursorteernaam"

#: ../../__w/calibre/calibre/manual/template_lang.rst:107
msgid ""
"Much of the calibre template language formatting comes from Python. For more"
" details on the syntax of these advanced formatting operations see the "
"`Python documentation "
"<https://docs.python.org/3/library/string.html#formatstrings>`_."
msgstr "Veel van de calibre sjabloontaalvormgeving komt van Python. Voor meer details over de syntaxis van deze geavanceerde vormgevingsoperaties zie de `Python documentatie <https://docs.python.org/3/library/string.html#formatstrings>`_."

#: ../../__w/calibre/calibre/manual/template_lang.rst:111
msgid "Using templates to define custom columns"
msgstr "Sjablonen gebruiken om aangepaste kolommen te definiëren"

#: ../../__w/calibre/calibre/manual/template_lang.rst:113
msgid ""
"Templates can be used to display information that isn't in calibre metadata,"
" or to display metadata differently from calibre's normal format. For "
"example, you might want to show the ``ISBN``, a field that calibre does not "
"display. You can accomplish this creating a custom column with the type "
"`Column built from other columns` (hereafter called `composite columns`) and"
" providing a template to generate the displayed text. The column will "
"display the result of evaluating the template. For example, to display the "
"ISBN, create the column and enter ``{identifiers:select(isbn)}`` in the "
"template box. To display a column containing the values of two series custom"
" columns, separated by a comma, use ``{#series1:||,}{#series2}``."
msgstr "Sjablonen kunnen gebruikt worden om informatie weer te geven niet in calibre's metadata of metadata afwijkend van calibre's gewone formaat. Bv. u wilt misschien het ``ISBN`` tonen, een veld dat calibre niet weergeeft. Dit kan door een aangepaste kolom te creëren van het type `Kolom gemaakt van andere kolommen` (hierna `samengestelde kolommen`) en een sjabloon te voorzien om de weer te geven tekst te genereren. De kolom geeft het resultaat weer van het evalueren van de sjabloon. Bv. om het ISBN weer te geven, creëer de kolom en voer ``{identifiers:select(isbn)}`` in in het sjabloon vak. Om een kolom weer te geven met de waardes van twee series aangepaste kolommen, gescheiden door een komma, gebruik ``{#series1:||,}{#series2}``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:115
msgid "Composite columns can use any template option, including formatting."
msgstr "Samengestelde kolommen kunnen elke sjabloonoptie gebruiken, inclusief opmaak."

#: ../../__w/calibre/calibre/manual/template_lang.rst:117
msgid ""
"Note: You cannot edit the data displayed in a composite column. Instead you "
"edit the source columns. If you edit a composite column, for example by "
"double-clicking it, calibre will open the template for editing, not the "
"underlying data."
msgstr "Nota: U kan data getoond in een samengestelde kolom niet bewerken. U moet de bronkolommen bewerken. Als u een samengestelde kolom bewerkt, bv. door erop dubbel te klikken, zal calibre de bewerksjabloon openen, niet de onderliggende data."

#: ../../__w/calibre/calibre/manual/template_lang.rst:122
msgid "Using functions in templates - Single Function Mode"
msgstr "Functies gebruiken in sjablonen - Eén Functie Modus"

#: ../../__w/calibre/calibre/manual/template_lang.rst:124
msgid ""
"Suppose you want to display the value of a field in upper case when that "
"field is normally in title case. You can do this using `template functions`."
" For example, to display the title in upper case use the ``uppercase`` "
"function, as in ``{title:uppercase()}``. To display it in title case, use "
"``{title:titlecase()}``."
msgstr "Veronderstel dat u de waarde van een veld in hoofdletters wil tonen wanneer dat veld normaal elk woord met beginhoofdletter toont. Dit kan met `sjabloonfuncties`. Bv., om de titel in hoofdletters te tonen, gebruik de ``uppercase`` functie, zoals in ``{title:uppercase()}``. Om met beginhoofdletters te tonen, gebruik ``{title:titlecase()}``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:126
msgid ""
"Functions go into the format part of the template, after the ``:`` and "
"before the first ``|`` or the closing ``}`` if no prefix/suffix is used. If "
"you have both a format and a function reference, the function comes after a "
"second ``:``.  Functions return the value of the column specified in the "
"template, suitably modified."
msgstr "Functies gaan in het formaat deel van de sjabloon, na de ``:`` en voor de eerste ``|`` of de sluit ``}`` als geen voor- of achtervoegsel is gebruikt. Als u zowel een formaat als een functie referentie hebt, komt de functie na een tweede ``:``.  Functies geven de waarde terug van de kolom gespecificeerd in de sjabloon, gepast gewijzigd."

#: ../../__w/calibre/calibre/manual/template_lang.rst:128
msgid "The syntax for using functions is one of::"
msgstr "De syntaxis voor gebruik van functies is een van::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:135
msgid ""
"Function names must always be followed by opening and closing parentheses. "
"Some functions require extra values (arguments), and these go inside the "
"parentheses. Arguments are separated by commas. Literal commas (commas as "
"text, not argument separators) must be preceded by a backslash (``\\``) . "
"The last (or only) argument cannot contain a textual closing parenthesis."
msgstr "Functienamen moeten altijd gevolgd worden door open/sluithaakjes. Sommige functies hebben extra waarden (argumenten) nodig en deze staan tussen de haakjes. Argumenten worden gescheiden door komma's. Letterlijke komma's (als tekst, niet als argumenten scheiders) moeten vooraf gegaan worden door een achteroverhellend streepje (``\\``). Het laatste (of enige) argument kan geen tekstueel sluithaakje bevatten."

#: ../../__w/calibre/calibre/manual/template_lang.rst:137
msgid ""
"Functions are evaluated before format specifications and the prefix/suffix. "
"See further down for an example of using both a format and a function."
msgstr "Functies worden geëvalueerd voor formaat specificaties en het voor-/achtervoegsel. Kijk verder beneden voor een voorbeeld van gebruik van zowel een formaat als een functie."

#: ../../__w/calibre/calibre/manual/template_lang.rst:139
msgid ""
"**Important**: If you have programming experience, please note that the "
"syntax in `Single Function Mode` is not what you expect. Strings are not "
"quoted and spaces are significant. All arguments are considered to be "
"constants; there are no expressions."
msgstr "**Belangrijk**: Als u programmeerervaring hebt, hou er a.u.b. rekening mee dat de syntaxis in `Eén Functie Modus` niet is wat u verwacht. Strings hebben geen aanhalingstekens en spaties zijn belangrijk. Alle argumenten worden gezien als contanten; er zijn geen expressies."

#: ../../__w/calibre/calibre/manual/template_lang.rst:141
msgid ""
"**Do not use subtemplates (`{ ... }`) as function arguments.** Instead, use "
":ref:`Template Program Mode <template_mode>` and :ref:`General Program Mode "
"<general_mode>`."
msgstr "**Gebruik geen subsjablonen (`{ ... }`) als functie argumenten.** In plaats daarvan, gebruik :ref:`Sjabloon Programma Modus <template_mode>` en :ref:`Algemene Programma Modus <general_mode>`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:143
msgid ""
"Some functions require regular expressions. In the template language regular"
" expression matching is case-insensitive."
msgstr "Sommige functies vereisen reguliere expressies. In de sjabloontaal zijn reguliere expressie overeenkomsten niet hoofdlettergevoelig."

#: ../../__w/calibre/calibre/manual/template_lang.rst:145
msgid ""
"In the function documentation below, the notation ``[something]*`` means "
"that ``something`` can be repeated zero or more times. The notation "
"``[something]+`` means that the ``something`` is repeated one or more times "
"(must exist at least one time)."
msgstr "In de functie documentatie onder betekent de notatie ``[something]*`` dat ``something`` nul of meer keren herhaald kan worden. De notatie ``[something]+`` betekent dat ``something`` één of meer keren herhaald wordt (moet minstens één keer bestaan)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:147
msgid "The functions intended for use in Single Function Mode are:"
msgstr "De functies bedoeld voor gebruik in Eén Functie Modus zijn:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:150
msgid ""
"``capitalize()`` -- returns the value with the first letter upper case and "
"the rest lower case."
msgstr "``capitalize()`` -- geeft de waarde terug met de eerste letter als hoofdletter en de rest klein."

#: ../../__w/calibre/calibre/manual/template_lang.rst:151
msgid ""
"``contains(pattern, text if match, text if not match)`` -- checks if the "
"value is matched by the regular expression ``pattern``. Returns ``text if "
"match`` if the pattern matches the value, otherwise returns ``text if no "
"match``."
msgstr "``contains(pattern, text if match, text if not match)`` -- controleert of de waarde overeen komt met het reguliere expressie ``pattern``. Geeft ``text if match`` terug als het pattern overeenkomt met de waarde, anders ``text if no match``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:152
msgid ""
"``count(separator)`` -- interprets the value as a list of items separated by"
" ``separator`` and returns the number of items in the list. Most lists use a"
" comma as the separator, but ``authors`` uses an ampersand (&). Examples: "
"``{tags:count(,)}``, ``{authors:count(&)}``. Aliases: ``count()``, "
"``list_count()``"
msgstr "``count(separator)`` -- interpreteert de waarde als een lijst van termen gescheiden door ``separator`` en  geeft het aantal items in de lijst terug. Meeste lijsten gebruiken een komma als scheiding maar ``authors`` gebruikt een ampersand (&). Bv.: ``{tags:count(,)}``, ``{authors:count(&)}``. Aliassen: ``count()``, ``list_count()``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:153
msgid ""
"``format_number(template)`` -- interprets the value as a number and formats "
"that number using a Python formatting template such as ``{0:5.2f}`` or "
"``{0:,d}`` or ``${0:5,.2f}``. The formatting template must begin with "
"``{0:`` and end with ``}`` as in the above examples. Exception: you can "
"leave off the leading \"{0:\" and trailing \"}\" if the format template "
"contains only a format. See the template language and the `Python "
"documentation "
"<https://docs.python.org/3/library/string.html#formatstrings>`_ for more "
"examples. Returns the empty string if formatting fails."
msgstr "``format_number(template)`` -- interpreteert de waarde als een getal en formateert dat getal met een Python formateersjabloon zoals ``{0:5.2f}`` of ``{0:,d}`` of ``${0:5,.2f}``. De formateersjabloon moet beginnen met ``{0:`` en eindigen met ``}`` zoals in de voorbeelden boven. Uitzondering: u kan de voorloop \"{0:\" en volg \"}\" weglaten als de formateersjabloon enkel een formaat bevat. Bekijk de sjabloontaal en de `Python documentatie <https://docs.python.org/3/library/string.html#formatstrings>`_ voor meer voorbeelden. Geeft de lege string terug als formateren mislukt."

#: ../../__w/calibre/calibre/manual/template_lang.rst:154
msgid ""
"``human_readable()`` -- expects the value to be a number and returns a "
"string representing that number in KB, MB, GB, etc."
msgstr "``human_readable()`` -- verwacht een cijfer als waarde en geeft  een string terug die dat cijfer voorstelt in KB, MB, GB, enz."

#: ../../__w/calibre/calibre/manual/template_lang.rst:155
msgid ""
"``ifempty(text if empty)`` -- if the value is not empty then return the "
"value of the field, otherwise return `text if empty`."
msgstr "``ifempty(text if empty)`` -- als de waarde niet leeg is, geef dan de waarde van het veld terug, anders `tekst als leeg`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:156
msgid ""
"``in_list(separator, [ pattern, found_val, ]* not_found_val)`` -- interpret "
"the value as a list of items separated by ``separator``, checking the "
"``pattern`` against each item in the list. If the ``pattern`` matches an "
"item then return ``found_val``, otherwise return ``not_found_val``. The pair"
" ``pattern`` and ``found_value`` can be repeated as many times as desired, "
"permitting returning different values depending on the item's value. The "
"patterns are checked in order, and the first match is returned."
msgstr "``in_list(separator, [ pattern, found_val, ]* not_found_val)`` -- interpreteert de waarde als een itemlijst gescheiden door ``separator``, het ``pattern`` controlerend tegen elk item in de lijst. Als het ``pattern`` overeen komt met een item komt ``found_val`` terug, anders ``not_found_val``. Het paar ``pattern`` en ``found_value`` kan zo vaak als gewenst herhaald worden, toelatend verschillende waarden terug te geven, afhankelijk van item's waarde. De patterns worden op volgorde gecontroleerd en de eerste overeenkomst wordt terug gegeven."

#: ../../__w/calibre/calibre/manual/template_lang.rst:157
msgid ""
"``language_strings(localize)`` -- return the `language names "
"<https://www.loc.gov/standards/iso639-2/php/code_list.php>`_ for the "
"`language codes <https://www.loc.gov/standards/iso639-2/php/code_list.php>`_"
" passed in as the value. Example: ``{languages:language_strings()}``.  If "
"``localize`` is zero, return the strings in English. If ``localize`` is not "
"zero, return the strings in the language of the current locale. "
"``Lang_codes`` is a comma-separated list."
msgstr "``language_strings(localize)`` -- geef de `taalnamen <https://www.loc.gov/standards/iso639-2/php/code_list.php>`_ terug voor de `taalcodes <https://www.loc.gov/standards/iso639-2/php/code_list.php>`_ ingegeven als de waarde. Bv.: ``{languages:language_strings()}``.  Als ``localize`` nul is, geef de string in het Engels terug. Als ``localize`` niet nul is, geef de string terug in de taal van de huidige locale. ``Lang_codes`` is een komma gescheiden lijst."

#: ../../__w/calibre/calibre/manual/template_lang.rst:158
msgid ""
"``list_item(index, separator)`` -- interpret the value as a list of items "
"separated by ``separator``, returning the 'index'th item. The first item is "
"number zero. The last item has the index ``-1`` as in "
"``list_item(-1,separator)``. If the item is not in the list, then the empty "
"string is returned."
msgstr "``list_item(index, separator)`` -- begrijp de waarde als een lijst met items gescheiden door ``separator``, terug gevend het 'index'th item. Het eerste item is nummer nul. Het laatste item heeft index ``-1`` zoals in ``list_item(-1,separator)``. Als het item niet op de lijst staat, wordt een lege string terug gegeven."

#: ../../__w/calibre/calibre/manual/template_lang.rst:159
msgid ""
"``lookup([ pattern, key, ]* else_key)`` -- The patterns will be checked "
"against the value in order. If a pattern matches then the value of the field"
" named by ``key`` is returned. If no pattern matches then the value of the "
"field named by ``else_key`` is returned. See``switch`` (below)."
msgstr "``lookup([ pattern, key, ]* else_key)`` -- De patronen worden gecontroleerd tegen de waarde op volgorde. Als een patroon overeenkomt, wordt de waarde van het veld benoemd door ``key`` teruggegeven. Als geen patroon overeenkomt, wordt de waarde van het veld benoemd door ``else_key`` teruggegeven. Kijk bij ``switch`` (onder)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:160
msgid "``lowercase()`` -- returns the value of the field in lower case."
msgstr "``lowercase()`` -- geeft de waarde van het veld terug in kleine letters."

#: ../../__w/calibre/calibre/manual/template_lang.rst:161
msgid ""
"``rating_to_stars(use_half_stars)`` -- Returns the rating as string of star "
"(``★``) characters. The value must be a number between 0 and 5. Set "
"use_half_stars to 1 if you want half star characters for fractional numbers "
"available with custom ratings columns."
msgstr "``rating_to_stars(use_half_stars)`` -- Geeft de waardering terug als een string ster (``★``) karakters. De waarde moet een cijfer zijn tussen 0 en 5. Stel use_half_stars in op 1 als u halve ster karakters wilt voor fractionele getallen beschikbaar met aangepaste waarderingskolommen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:162
msgid ""
"``re(pattern, replacement)`` -- return the value after applying the regular "
"expression. All instances of ``pattern`` in the value are replaced with "
"``replacement``. The template language uses case insensitive `Python regular"
" expressions <https://docs.python.org/3/library/re.html>`_."
msgstr "``re(pattern, replacement)`` -- geef de waarde terug na toepassen reguliere expressie. Alle exemplaren van ``pattern`` in de waarde worden vervangen door ``replacement``. De sjabloontaal gebruikt hoofdletterongevoelige `Python reguliere expressies <https://docs.python.org/3/library/re.html>`_."

#: ../../__w/calibre/calibre/manual/template_lang.rst:163
msgid ""
"``select(key)`` -- interpret the value as a comma-separated list of items "
"with each item having the form ``id:value`` (the calibre ``identifier`` "
"format). The function finds the first pair with the id equal to key and "
"returns the corresponding value. If no id matches then the function returns "
"the empty string."
msgstr "``select(key)`` -- interpreteer de waarde als een komma gescheiden lijst met items waar elk item de vorm ``id:value`` heeft (het calibre ``identifier`` formaat). De functie vindt het eerste paar met het id gelijk aan de sleutel en geeft de overeenkomende waarde terug. Als geen id overeenkomt, geeft de functie de lege string terug."

#: ../../__w/calibre/calibre/manual/template_lang.rst:164
msgid ""
"``shorten(left chars, middle text, right chars)`` -- Return a shortened "
"version of the value, consisting of ``left chars`` characters from the "
"beginning of the value, followed by ``middle text``, followed by ``right "
"chars`` characters from the end of the value. ``Left chars`` and ``right "
"chars`` must be non-negative integers. Example: assume you want to display "
"the title with a length of at most 15 characters in length. One template "
"that does this is ``{title:shorten(9,-,5)}``. For a book with the title "
"`Ancient English Laws in the Times of Ivanhoe` the result will be `Ancient "
"E-anhoe`: the first 9 characters of the title, a ``-``, then the last 5 "
"characters. If the value's length is less than ``left chars`` + ``right "
"chars`` + the length of ``middle text`` then the value will be returned "
"unchanged. For example, the title `The Dome` would not be changed."
msgstr "``shorten(left chars, middle text, right chars)`` -- Geeft een verkorte versie van de waarde terug, bestaande uit ``left chars`` karakters van het begin van de waarde, gevolgd door ``middle text``, gevolgd door ``right chars`` karakters van het einde van de waarde. ``Left chars`` en ``right chars`` moeten niet-negatieve integers zijn. Bv.: veronderstel u wilt de titel tonen met een lengte van maximaal 15 karakters. Een sjabloon die dat doet is ``{title:shorten(9,-,5)}``. Voor een boek met de titel `Ancient English Laws in the Times of Ivanhoe` zal het resultaat `Ancient E-nhoe` zijn: de eerste 9 karakters van de titel, een ``-``, dan de laatste 5 karakters. Als de lengte van de waarde minder is dan ``left chars`` + ``right chars`` + de lengte van ``middle text`` wordt de waarde onveranderd teruggegeven. Bv. de titel `The Dome` wordt niet veranderd."

#: ../../__w/calibre/calibre/manual/template_lang.rst:165
msgid ""
"``str_in_list(separator, [ string, found_val, ]+ not_found_val)`` -- "
"interpret the value as a list of items separated by ``separator`` then "
"compare ``string`` against each value in the list. The ``string`` is not a "
"regular expression. If ``string`` is equal to any item (ignoring case) then "
"return the corresponding ``found_val``. If ``string`` contains "
"``separators`` then it is also treated as a list and each subvalue is "
"checked. The ``string`` and ``found_value`` pairs can be repeated as many "
"times as desired, permitting returning different values depending on "
"string's value. If none of the strings match then ``not_found_value`` is "
"returned. The strings are checked in order. The first match is returned."
msgstr "``str_in_list(separator, [ string, found_val, ]+ not_found_val)`` -- interpreteer de waarde als een lijst met items gescheiden door ``separator`` vergelijk dan ``string`` met elke waarde in de lijst. De ``string`` is geen reguliere expressie. Als ``string`` gelijk is aan een item (hoofdlettergebruik negerend) geef dan de bijhorende ``found_val`` terug. Bevat ``string`` ``separators``, wordt het ook als een lijst behandeld en elke subwaarde gecontroleerd. De ``string`` en ``found_value`` paren kunnen naar believen herhaald worden, teruggave van verschillende waardes toelatend afhankelijk van de string waarde. Komt geen enkele string overeen, wordt ``not_found_value`` teruggegeven. Strings worden in volgorde gecontroleerd. De eerste overeenkomst wordt teruggegeven."

#: ../../__w/calibre/calibre/manual/template_lang.rst:166
msgid ""
"``subitems(start_index, end_index)`` -- This function breaks apart lists of "
"tag-like hierarchical items such as genres. It interprets the value as a "
"comma-separated list of tag-like items, where each item is a period-"
"separated list. It returns a new list made by extracting from each item the "
"components from ``start_index`` to ``end_index``, then merging the results "
"back together. Duplicates are removed. The first subitem in a period-"
"separated list has an index of zero. If an index is negative then it counts "
"from the end of the list. As a special case, an end_index of zero is assumed"
" to be the length of the list."
msgstr "``subitems(start_index, end_index)`` -- Deze functie wordt gebruikt om lijsten van label-like hiërarchische items zoals genres op te delen. Het interpreteert de waarde als een komma gescheiden lijst label-like items, waar elk item een punt gescheiden lijst is. Geeft een nieuwe lijst terug van elk de componenten van ``start_index`` tot ``end_index`` af te trekken en vervolgens de resultaten terug te combineren. Dubbels worden verwijderd. Het eerste sub-item in een punt gescheiden lijst heeft een index van nul. Als een index negatief is, dan telt het vanaf het einde van de lijst. Als speciaal geval wordt een end_index van nul verondersteld de lengte van de lijst te zijn."

#: ../../__w/calibre/calibre/manual/template_lang.rst:168
#: ../../__w/calibre/calibre/manual/template_lang.rst:388
msgid "Examples:"
msgstr "Voorbeelden:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:170
msgid "Assuming a #genre column containing `A.B.C`:"
msgstr "Een #genre kolom veronderstellend met `A.B.C`:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:172
msgid "``{#genre:subitems(0,1)}`` returns \"A\""
msgstr "``{#genre:subitems(0,1)}`` geeft \"A\" terug"

#: ../../__w/calibre/calibre/manual/template_lang.rst:173
msgid "``{#genre:subitems(0,2)}`` returns \"A.B\""
msgstr "``{#genre:subitems(0,2)}`` geeft \"A.B\" terug"

#: ../../__w/calibre/calibre/manual/template_lang.rst:174
msgid "``{#genre:subitems(1,0)}`` returns \"B.C\""
msgstr "``{#genre:subitems(1,0)}`` geeft \"B.C\" terug"

#: ../../__w/calibre/calibre/manual/template_lang.rst:176
msgid "Assuming a #genre column containing \"A.B.C, D.E\":"
msgstr "Een #genre kolom veronderstellend met \"A.B.C, D.E\":"

#: ../../__w/calibre/calibre/manual/template_lang.rst:178
msgid "``{#genre:subitems(0,1)}`` returns \"A, D\""
msgstr "``{#genre:subitems(0,1)}`` geeft \"A, D\" terug"

#: ../../__w/calibre/calibre/manual/template_lang.rst:179
msgid "``{#genre:subitems(0,2)}`` returns \"A.B, D.E\""
msgstr "``{#genre:subitems(0,2)}`` geeft \"A.B, D.E\" terug"

#: ../../__w/calibre/calibre/manual/template_lang.rst:181
msgid ""
"``sublist(start_index, end_index, separator)`` -- interpret the value as a "
"list of items separated by ``separator``, returning a new list made from the"
" items from ``start_index`` to ``end_index``. The first item is number zero."
" If an index is negative, then it counts from the end of the list. As a "
"special case, an end_index of zero is assumed to be the length of the list."
msgstr "``sublist(start_index, end_index, separator)`` -- interpreteert de waarde als een itemlijst gescheiden door ``separator``, geeft een nieuwe lijst terug, gemaakt van de items van ``start_index`` tot ``end_index``. Het eerstet item is nummer zero. Als een index negatief is, dan telt hij van het einde van de lijst. Als een speciaal geval: een end_index van nul is wordt verondersteld de lengte van de lijst te zijn."

#: ../../__w/calibre/calibre/manual/template_lang.rst:183
msgid ""
"Examples assuming that the tags column (which is comma-separated) contains "
"\"A, B ,C\":"
msgstr "Voorbeelden veronderstellen dat de labelkolom (die komma gescheiden is) \"A, B ,C\" bevat:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:185
msgid "``{tags:sublist(0,1,\\,)}`` returns \"A\""
msgstr "``{tags:sublist(0,1,\\,)}`` geeft \"A\" terug"

#: ../../__w/calibre/calibre/manual/template_lang.rst:186
msgid "``{tags:sublist(-1,0,\\,)}`` returns \"C\""
msgstr "``{tags:sublist(-1,0,\\,)}`` geeft \"C\" terug"

#: ../../__w/calibre/calibre/manual/template_lang.rst:187
msgid "``{tags:sublist(0,-1,\\,)}`` returns \"A, B\""
msgstr "``{tags:sublist(0,-1,\\,)}`` geeft \"A, B\" terug"

#: ../../__w/calibre/calibre/manual/template_lang.rst:189
msgid ""
"``swap_around_articles(separator)`` -- returns the value with articles moved"
" to the end. The value can be a list, in which case each item in the list is"
" processed. If the value is a list then you must provide the ``separator``. "
"If no ``separator`` is provided then the value is treated as being a single "
"value, not a list. The `articles` are those used by calibre to generate the "
"``title_sort``."
msgstr "``swap_around_articles(separator)`` -- geeft de waarde terug met artikelen naar het einde verplaatst. De waarde kan een lijst zijn, in welk geval elk item van de lijst verwerkt is. Als de waarde een lijst is dan moet u de ``separator`` voorzien. Als geen ``separator`` voorzien is, wordt de waarde behandeld als één enkele waarde, niet een lijst. De `artikelen` zijn diegenen gebruikt door calibre om de ``title_sort`` te genereren."

#: ../../__w/calibre/calibre/manual/template_lang.rst:190
msgid ""
"``swap_around_comma()`` -- given a value of the form ``B, A``, return ``A "
"B``. This is most useful for converting names in LN, FN format to FN LN. If "
"there is no comma in the value then the function returns the value "
"unchanged."
msgstr "``swap_around_comma()`` -- gegeven een waarde in de vorm ``B, A``, wordt ``A B``. Dit is heel nuttig voor het omzetten van namen in AN, VN formaat naar VN AN. Als er geen komma is, wordt de waarde onveranderd teruggegeven."

#: ../../__w/calibre/calibre/manual/template_lang.rst:191
msgid ""
"``switch([pattern, value,]+ else_value)`` -- for each ``pattern, value`` "
"pair, checks if the value matches the regular expression ``pattern`` and if "
"so returns the associated ``value``. If no ``pattern`` matches, then "
"``else_value`` is returned. You can have as many ``pattern, value`` pairs as"
" you wish. The first match is returned."
msgstr "``switch([pattern, value,]+ else_value)`` -- voor ieder ``pattern, value`` paar,  controleert of het waarde overeen komt met de reguliere expressie ``pattern`` en indien zo geeft de geassocieerde``value`` terug. Als geen ``pattern`` overeenkomt, wordt ``else_value`` teruggegeven. U kan zoveel ``pattern, value`` paren hebben als u wilt. De eerste overeenkomst wordt teruggegeven."

#: ../../__w/calibre/calibre/manual/template_lang.rst:192
msgid ""
"``test(text if not empty, text if empty)`` -- return ``text if not empty`` "
"if the value is not empty, otherwise return ``text if empty``."
msgstr "``test(text if not empty, text if empty)`` -- geef ``text if not empty`` terug als de waarde niet leeg is, geef anders ``text if empty`` terug."

#: ../../__w/calibre/calibre/manual/template_lang.rst:193
msgid "``titlecase()`` -- returns the value of the field in title case."
msgstr "``titlecase()`` -- geeft de waarde  van het veld terug in elk woord met hoofdletter."

#: ../../__w/calibre/calibre/manual/template_lang.rst:194
msgid ""
"``transliterate()`` -- Return a string in a latin alphabet formed by "
"approximating the sound of the words in the source field. For example, if "
"the source field is ``Фёдор Миха́йлович Достоевский`` this function returns "
"``Fiodor Mikhailovich Dostoievskii``."
msgstr "``transliterate()`` -- Geeft een string in een Latijns alfabet terug, gevormd door benaderen van de klank van de woorden in het bron veld. Bij voorbeeld, wanneer het bron veld ``Фёдор Миха́йлович Достоевский`` is, geeft deze functie ``Fiodor Mikhailovich Dostoievskii`` terug."

#: ../../__w/calibre/calibre/manual/template_lang.rst:195
msgid "``uppercase()`` -- returns the value of the field in upper case."
msgstr "``uppercase()`` -- geeft de waarde van het veld terug in hoofdletter."

#: ../../__w/calibre/calibre/manual/template_lang.rst:197
msgid "**Using functions and formatting in the same template**"
msgstr "**Functies en opmaak gebruiken in dezelfde sjabloon**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:199
msgid ""
"Suppose you have an integer custom column ``#myint`` that you want displayed"
" with leading zeros, as in ``003``. One way to do this is to use a format of"
" ``0>3s``. However, by default if a number (integer or float) equals zero "
"then the value is displayed as the empty string so zero values will produce "
"the empty string, not ``000``. If you want to see ``000`` values then you "
"use both the format string and the ``ifempty`` function to change the empty "
"value back to a zero. The template would be::"
msgstr "Veronderstel, u hebt een aangepaste kolom met gehele getallen ``#myint`` die u wilt weergeven met voorloopnullen, zoals in ``003``. Een manier om dit te doen is met het formaat ``003``. Hoewel, standaard, als een getal (geheel of decimaal) gelijk is aan nul wordt de waarde getoond als de lege string dus nul waardes geven de lege string, niet ``000``. Als u ``000`` waardes wilt zien, gebruikt u zowel de formaat string als de  ``ifempty`` functie om de lege waarde terug op nul te zetten. De sjabloon wordt::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:203
msgid ""
"Note that you can use the prefix and suffix as well. If you want the number "
"to appear as ``[003]`` or ``[000]``, then use the template::"
msgstr "Merk op dat u zowel het voor- als het achtervoegsel kan gebruiken. Als u wil dat het getal verschijnt als ``[003]`` of ``[000]``, gebruik dan de sjabloon:: "

#: ../../__w/calibre/calibre/manual/template_lang.rst:210
msgid "General Program Mode"
msgstr "Algemene Programma Modus"

#: ../../__w/calibre/calibre/manual/template_lang.rst:212
msgid ""
"`General Program Mode` (`GPM`) replaces `template expressions` with a "
"program written in the `template language`. The syntax of the language is "
"defined by the following grammar::"
msgstr "`Algemene Programma Modus` (`APM`) vervangt `sjabloonexpressies` door een programma geschreven in de `sjabloontaal`. De syntaxis van de taal is gedefinieerd door de volgende grammatica::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:262
msgid ""
"a ``top_expression`` always has a value. The value of an ``expression_list``"
" is the value of the last ``top_expression`` in the list. For example, the "
"value of the expression list ``1;2;'foobar';3`` is ``3``."
msgstr "een ``top_expression`` heeft altijd een waarde. De waarde van een ``expression_list`` is de waarde van de laatste ``top_expression`` in de lijst. Bv. de waarde van de expressielijst ``1;2;'foobar';3`` is ``3``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:263
msgid "In a logical context, any non-empty value is ``True``"
msgstr "In een logische context is elke niet-lege waarde ``True``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:264
msgid "In a logical context, the empty value is ``False``"
msgstr "In een logische context is de lege waarde ``False``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:265
msgid ""
"Strings and numbers can be used interchangeably. For example, ``10`` and "
"``'10'`` are the same thing."
msgstr "Strings en getallen kunnen door elkaar gebruikt worden. Bv. ``10`` en ``'10'`` zijn identiek."

#: ../../__w/calibre/calibre/manual/template_lang.rst:266
msgid ""
"Comments are lines starting with a '#' character. Comments beginning later "
"in a line are not supported."
msgstr "Commentaar zijn regels die beginnen met '#'. Commentaar verder in de regel wordt niet ondersteund."

#: ../../__w/calibre/calibre/manual/template_lang.rst:268
msgid "**Operator precedence**"
msgstr "**Operator voorrang**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:270
msgid ""
"The operator precedence (order of evaluation) from highest (evaluated first)"
" to lowest (evaluated last) is:"
msgstr "De operator voorrang (volgorde van evalueren) van hoogste (eerst geëvalueerd) naar laagste (laatst geëvalueerd) is:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:272
msgid ""
"Function calls, constants, parenthesized expressions, statement expressions,"
" assignment expressions, field references."
msgstr "Functie aanroep, constanten, uitdrukkingen tussen haakjes, instructie-expressies, opdracht-expressies, veldreferenties."

#: ../../__w/calibre/calibre/manual/template_lang.rst:273
msgid ""
"Unary plus (``+``) and minus (``-``). These operators evaluate right to "
"left."
msgstr "Unary plus (``+``) en min (``-``). Deze operatoren evalueren van rechts naar links."

#: ../../__w/calibre/calibre/manual/template_lang.rst:275
msgid ""
"These and all the other arithmetic operators return integers if the "
"expression results in a fractional part equal to zero. For example, if an "
"expression returns ``3.0`` it is changed to ``3``."
msgstr "Deze en alle andere rekenkundige operatoren geven integers terug als het resultaat van de expressie een fractioneel deel gelijk aan nul is. Bv. als een expressie ``3.0`` terug geeft, wordt dit veranderd in ``3``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:276
msgid ""
"Multiply (``*``) and divide (``/``). These operators are associative and "
"evaluate left to right. Use parentheses if you want to change the order of "
"evaluation."
msgstr "Vermenigvuldigen (``*``) en delen (``/``). Deze operatoren zijn associatief en evalueren van links naar rechts. Gebruik haakjes als u de volgorde van evaluatie wilt veranderen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:277
msgid ""
"Add (``+``) and subtract (``-``). These operators are associative and "
"evaluate left to right."
msgstr "Optellen (``+``) en aftrekken (``-``). Deze operatoren zijn associatief en evalueren van links naar rechts."

#: ../../__w/calibre/calibre/manual/template_lang.rst:278
msgid ""
"Numeric and string comparisons. These operators return ``'1'`` if the "
"comparison succeeds, otherwise the empty string (``''``). Comparisons are "
"not associative: ``a < b < c`` is a syntax error."
msgstr "Numerieke en string vergelijkingen. Deze operatoren geven ``'1'`` terug als de vergelijking door gaat, anders de lege string (``''``). Vergelijkingen zijn niet associatief: ``a < b < c`` is  een syntaxis fout."

#: ../../__w/calibre/calibre/manual/template_lang.rst:279
msgid ""
"String concatenation (``&``). The ``&`` operator returns a string formed by "
"concatenating the left-hand and right-hand expressions. Example: ``'aaa' & "
"'bbb'`` returns ``'aaabbb'``. The operator is associative and evaluates left"
" to right."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:280
msgid ""
"Unary logical not (``!``). This operator returns ``'1'`` if the expression "
"is False (evaluates to the empty string), otherwise ``''``."
msgstr "Unary logisch niet (``!``). Deze operator geeft ``'1'`` terug als de expressie Vals is (evalueert naar de lege string), anders ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:281
msgid ""
"Logical and (``&&``). This operator returns '1' if both the left-hand and "
"right-hand expressions are True, or the empty string ``''`` if either is "
"False. It is associative, evaluates left to right, and does `short-"
"circuiting <https://chortle.ccsu.edu/java5/Notes/chap40/ch40_2.html>`_."
msgstr "Logisch en (``&&``). Deze operator geeft '1' terug als zowel de linker- als de rechter-kant expressies Waar zijn, of de lege string ``''`` als een van beide Vals is. Het is associatief, evalueert van links naar rechts en doet aan `kort-sluiten <https://chortle.ccsu.edu/java5/Notes/chap40/ch40_2.html>`_."

#: ../../__w/calibre/calibre/manual/template_lang.rst:282
msgid ""
"Logical or (``||``). This operator returns ``'1'`` if either the left-hand "
"or right-hand expression is True, or ``''`` if both are False. It is "
"associative, evaluates left to right, and does `short-circuiting "
"<https://chortle.ccsu.edu/java5/Notes/chap40/ch40_2.html>`_. It is an "
"`inclusive or`, returning ``'1'`` if both the left- and right-hand "
"expressions are True."
msgstr "Logische of (``||``). Deze operator geeft ``'1'`` terug als ofwel de linker- ofwel de rechterkant expressie Waar is, of ``''`` als beide Vals zijn. Hij is associatief, evalueert van links naar rechts en doet aan `kort-sluiten <https://chortle.ccsu.edu/java5/Notes/chap40/ch40_2.html>`_. Het is een `inclusieve of`, geeft ``'1'`` terug als zowel de linker- en rechterkant expressies Waar zijn."

#: ../../__w/calibre/calibre/manual/template_lang.rst:284
msgid "**Field references**"
msgstr "**Veldreferenties**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:286
msgid ""
"A ``field_reference`` evaluates to the value of the metadata field named by "
"lookup name that follows the ``$`` or ``$$``. Using ``$`` is equivalent to "
"using the ``field()`` function. Using ``$$`` is equivalent to using the "
"``raw_field`` function. Examples::"
msgstr "Een ``field_reference`` evalueert naar de waarde van het metadata veld genoemd bij lookup name dat volgt op ``$`` or ``$$``. Gebruik van ``$`` is equivalent aan gebruik van de ``field()`` functie. Gebruik van ``$$`` is equivalent aan gebruik van de ``raw_field`` functie. Bv.::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:293
msgid "**If expressions**"
msgstr "**If expressies**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:295
msgid ""
"``If`` expressions first evaluate the ``condition``. If the ``condition`` is"
" True (a non-empty value) then the ``expression_list`` in the ``then`` "
"clause is evaluated. If it is False then if present the ``expression_list`` "
"in the ``elif`` or ``else`` clause is evaluated. The ``elif`` and ``else`` "
"parts are optional. The words ``if``, ``then``, ``elif``, ``else``, and "
"``fi`` are reserved; you cannot use them as identifier names. You can put "
"newlines and white space wherever they make sense. The ``condition`` is a "
"``top_expression`` not an ``expression_list``; semicolons are not allowed. "
"The ``expression_lists`` are semicolon-separated sequences of "
"``top_expressions``. An ``if`` expression returns the result of the last "
"``top_expression`` in the evaluated ``expression_list``, or the empty string"
" if no expression list was evaluated."
msgstr "``If`` expressies evalueren eerst de ``condition``. Als de ``condition`` Waar is (een niet-lege waarde) wordt de ``expression_list`` in de ``then`` clausule geëvalueerd. Als ze Onwaar is wordt, indien aanwezig, de ``expression_list`` in de ``elif`` of ``else`` clausule geëvalueerd. De ``elif`` en ``else`` delen zijn optioneel. De woorden ``if``, ``then``, ``elif``, ``else``, en ``fi`` zijn gereserveerd; U kan ze niet gebruiken als identificator namen. U kan nieuwe regels en spaties zetten overal waar het zin heeft. De ``condition`` is een ``top_expression`` geen ``expression_list``; puntkomma's zijn niet toegelaten. De ``expression_lists`` zijn puntkomma gescheiden reeksen met ``top_expressions``. Een ``if`` expressie geeft het resultaat terug van de laatste ``top_expression`` in de geëvalueerde ``expression_list``, of de lege string als geen expressie lijst werd geëvalueerd."

#: ../../__w/calibre/calibre/manual/template_lang.rst:297
msgid "Examples::"
msgstr "Voorbeelden::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:310
msgid "Nested ``if`` example::"
msgstr "Genest ``if`` voorbeeld::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:323
msgid ""
"As said above, an ``if`` produces a value. This means that all the following"
" are equivalent::"
msgstr "Zoals boven gezegd, een ``if`` geeft een waarde. Dat betekent dat al de volgenden equivalent zijn::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:329
msgid ""
"As a last example, this program returns the value of the ``series`` column "
"if the book has a series, otherwise the value of the ``title`` column::"
msgstr "Als laatste voorbeeld, dit programma geeft de waarde van de ``series`` kolom terug als het boek van een serie is, anders de waarde van de ``title`` kolom::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:333
msgid "**For expressions**"
msgstr "**For expressies**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:335
msgid ""
"The ``for`` expression iterates over a list of values, processing them one "
"at a time. The ``list_expression`` must evaluate either to a metadata field "
"``lookup name`` e.g., ``tags`` or ``#genre``, or to a list of values. The "
":ref:`range() function <range_function>` (see below) generates a list of "
"numbers. If the result is a valid ``lookup name`` then the field's value is "
"fetched and the separator specified for that field type is used. If the "
"result isn't a valid lookup name then it is assumed to be a list of values. "
"The list is assumed to be separated by commas unless the optional keyword "
"``separator`` is supplied, in which case the list values must be separated "
"by the result of evaluating the ``separator_expr``. A separator cannot be "
"used if the list is generated by ``range()``. Each value in the list is "
"assigned to the specified variable then the ``expression_list`` is "
"evaluated. You can use ``break`` to jump out of the loop, and ``continue`` "
"to jump to the beginning of the loop for the next iteration."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:337
msgid ""
"Example: This template removes the first hierarchical name for each value in"
" Genre (``#genre``), constructing a list with the new names::"
msgstr "Voorbeeld: Deze sjabloon verwijdert de eerste hiërarchische naam voor elke waarde in Genre (``#genre``), een lijst opbouwend met de nieuwe namen::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:347
msgid ""
"If the original Genre is `History.Military, Science Fiction.Alternate "
"History, ReadMe` then the template returns `Military, Alternate History, "
"ReadMe`. You could use this template in calibre's :guilabel:`Edit metadata "
"in bulk -> Search & replace` with :guilabel:`Search for` set to ``template``"
" to strip off the first level of the hierarchy and assign the resulting "
"value to Genre."
msgstr "Als het originele Genre `History.Military, Science Fiction.Alternate History, ReadMe` is dan geeft de sjabloon `Military, Alternate History, ReadMe` terug. U kan deze sjabloon gebruiken in calibre's :guilabel:`Metadata bewerken in bulk -> Zoeken & vervangen` met :guilabel:`Zoeken naar` ingesteld op ``template`` om het eerste niveau van de hiërarchie te verwijderen en de resulterende waarde aan Genre toe te wijzen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:350
msgid ""
"Note: the last line in the template, ``new_tags``, isn't strictly necessary "
"in this case because ``for`` returns the value of the last top_expression in"
" the expression list. The value of an assignment is the value of its "
"expression, so the value of the ``for`` statement is what was assigned to "
"``new_tags``."
msgstr "Merk op: de laatste regel in de sjabloon, ``new_tags``, is niet strikt nodig in dit geval omdat ``for`` de waarde van de laatste top_expression terug geeft in de expressie lijst. De waarde van een opdracht is de waarde van zijn expressie, dus de waarde van het ``for`` bericht is wat was toegewezen aan ``new_tags``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:352
msgid "**Function definition**"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:354
msgid ""
"If you have code in a template that repeats then you can put that code into "
"a local function. The ``def`` keyword starts the definition. It is followed "
"by the function name, the argument list, then the code in the function. The "
"function definition ends with the ``fed`` keyword."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:356
msgid ""
"Arguments are positional. When a function is called the supplied arguments "
"are matched left to right against the defined parameters, with the value of "
"the argument assigned to the parameter. It is an error to provide more "
"arguments than defined parameters. Parameters can have default values, such "
"as ``a = 25``. If an argument is not supplied for that parameter then the "
"default value is used, otherwise the parameter is set to the empty string."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:358
msgid "The ``return`` statement can be used in a local function."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:360
msgid "A function must be defined before it can be used."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:362
msgid ""
"Example: This template computes an approximate duration in years, months, "
"and days from a number of days. The function ``to_plural()`` formats the "
"computed values. Note that the example also uses the ``&`` operator::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:377
msgid "**Relational operators**"
msgstr "**Relationele operatoren**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:379
msgid ""
"Relational operators return ``'1'`` if the comparison is true, otherwise the"
" empty string ('')."
msgstr "Relationele operatoren geven ``'1'`` terug als de vergelijking waar is, anders de lege string ('')."

#: ../../__w/calibre/calibre/manual/template_lang.rst:381
msgid ""
"There are two forms of relational operators: string comparisons and numeric "
"comparisons."
msgstr "Er zijn twee soorten relationele operatoren: string vergelijkingen en numerieke vergelijkingen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:383
msgid ""
"String comparisons do case-insensitive string comparison using lexical "
"order. The supported string comparison operators are ``==``, ``!=``, ``<``, "
"``<=``, ``>``, ``>=``, ``in``, and ``inlist``. For the ``in`` operator, the "
"result of the left hand expression is interpreted as a regular expression "
"pattern. The ``in`` operator is True if the value of left-hand regular "
"expression matches the value of the right hand expression. The ``inlist`` "
"operator is true if the left hand regular expression matches any one of the "
"items in the right hand list where the items in the list are separated by "
"commas. The matches are case-insensitive."
msgstr "String vergelijkingen doen hoofdletterongevoelige string vergelijking in lexicale volgorde. De ondersteunde vergelijkingsoperatoren zijn  ``==``, ``!=``, ``<``, ``<=``, ``>``, ``>=``, ``in``, en ``inlist``. Voor de ``in`` operator wordt het resultaat van de linkse expressie geïnterpreteerd als een reguliere expressie patroon. De ``in`` operator is Waar als de waarde van de linkse reguliere expressie overeenkomt met de waarde van de rechtse reguliere expressie. De ``inlist`` operator is Waar als de linkse reguliere expressie overeenkomt met eender welk item in de rechtse lijst waar de items in de lijst gescheiden zijn door komma's. De overeenkomsten zijn hoofdletterongevoelige."

#: ../../__w/calibre/calibre/manual/template_lang.rst:386
msgid ""
"The numeric comparison operators are ``==#``, ``!=#``, ``<#``, ``<=#``, "
"``>#``, ``>=#``. The left and right expressions must evaluate to numeric "
"values with two exceptions: both the string value \"None\" (undefined field)"
" and the empty string evaluate to the value zero."
msgstr "De numerieke vergelijkingsoperatoren zijn ``==#``, ``!=#``, ``<#``, ``<=#``, ``>#``, ``>=#``. De links en rechts expressies moeten evalueren naar numerieke waarden met twee uitzonderingen: zowel de string waarde \"None\" (niet gedefinieerd veld) en de lege string evalueren naar de waarde nul."

#: ../../__w/calibre/calibre/manual/template_lang.rst:390
msgid ""
"``program: field('series') == 'foo'`` returns ``'1'`` if the book's series "
"is 'foo', otherwise ``''``."
msgstr "``program: field('series') == 'foo'`` geett ``'1'`` terug als het boek z'n serie 'foo' is, anders ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:391
msgid ""
"``program: 'f.o' in field('series')`` returns ``'1'`` if the book's series "
"matches the regular expression ``f.o`` (e.g., `foo`, `Off Onyx`, etc.), "
"otherwise ``''``."
msgstr "``program: 'f.o' in field('series')`` geeft ``'1'`` terug als het boek z'n serie overeenkomt met de reguliere expressie ``f.o`` (bv., `foo`, `Off Onyx`, enz.), anders ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:392
msgid ""
"``program: 'science' inlist field('#genre')`` returns ``'1'`` if any of the "
"book's genres match the regular expression ``science``, e.g., `Science`, "
"`History of Science`, `Science Fiction` etc.), otherwise ``''``."
msgstr "``program: 'science' inlist field('#genre')`` geeft ``'1'`` terug als één van de boeken z'n genres overeenkomen met de reguliere expressie ``science``, bv., `Science`, `History of Science`, `Science Fiction` etc.), anders ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:393
msgid ""
"``program: '^science$' inlist field('#genre')`` returns ``'1'`` if any of "
"the book's genres exactly match the regular expression ``^science$``, e.g., "
"`Science`. The genres `History of Science` and `Science Fiction` don't "
"match. If there isn't a match then returns ``''``."
msgstr "``program: '^science$' inlist field('#genre')`` geeft ``'1'`` terug als één van de boeken z'n genres exact overeenkomt met de reguliere expressie ``^science$``, bv., `Science`. De genres `History of Science` en `Science Fiction` komen niet overeen. Bij geen overeenkomst wordt ``''`` teruggegeven."

#: ../../__w/calibre/calibre/manual/template_lang.rst:394
msgid ""
"``program: if field('series') != 'foo' then 'bar' else 'mumble' fi`` returns"
" ``'bar'`` if the book's series is not ``foo``. Otherwise it returns "
"``'mumble'``."
msgstr "``program: if field('series') != 'foo' then 'bar' else 'mumble' fi`` geeft ``'bar'`` terug als het boek z'n serie niet ``foo`` is. Anders geeft het ``'mumble'`` terug."

#: ../../__w/calibre/calibre/manual/template_lang.rst:395
msgid ""
"``program: if field('series') == 'foo' || field('series') == '1632' then "
"'yes' else 'no' fi`` returns ``'yes'`` if series is either ``'foo'`` or "
"``'1632'``, otherwise ``'no'``."
msgstr "``program: if field('series') == 'foo' || field('series') == '1632' then 'yes' else 'no' fi`` geeft ``'yes'`` terug als de serie ofwel``'foo'`` is ofwel ``'1632'``, anders ``'no'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:396
msgid ""
"``program: if '^(foo|1632)$' in field('series') then 'yes' else 'no' fi`` "
"returns ``'yes'`` if series is either ``'foo'`` or ``'1632'``, otherwise "
"``'no'``."
msgstr "``program: if '^(foo|1632)$' in field('series') then 'yes' else 'no' fi`` geeft ``'yes'`` terug als de serie ofwel ``'foo'`` is ofwel ``'1632'``, anders ``'no'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:397
msgid ""
"``program: if 11 > 2 then 'yes' else 'no' fi`` returns ``'no'`` because the "
"``>`` operator does a lexical comparison."
msgstr "``program: if 11 > 2 then 'yes' else 'no' fi`` geeft ``'no'`` omdat de ``>`` operator een lexicale vergelijking doet."

#: ../../__w/calibre/calibre/manual/template_lang.rst:398
msgid ""
"``program: if 11 ># 2 then 'yes' else 'no' fi`` returns ``'yes'`` because "
"the ``>#`` operator does a numeric comparison."
msgstr "``program: if 11 ># 2 then 'yes' else 'no' fi`` geeft ``'yes'`` terug omdat de ``>#`` operator een numerieke vergelijking doet."

#: ../../__w/calibre/calibre/manual/template_lang.rst:400
msgid "**Additional available functions**"
msgstr "**Extra beschikbare functies**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:402
msgid ""
"The following functions are available in addition to those described in "
":ref:`Single Function Mode <single_mode>`."
msgstr "Volgende functies zijn beschikbaar bovenop die beschreven in :ref:`Eén Functie Modus <single_mode>`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:404
msgid ""
"In `GPM` the functions described in `Single Function Mode` all require an "
"additional first parameter specifying the value to operate upon. All "
"parameters are expression_lists (see the grammar above)."
msgstr "In `APM` hebben de functies beschreven in `Eén Functie Modus` allemaal een extra eerste parameter nodig die de waarde specificeert waarop te werken. Alle parameters zijn expression_lists (zie de grammatica boven)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:406
msgid ""
"``add(x [, y]*)`` -- returns the sum of its arguments. Throws an exception "
"if an argument is not a number. In most cases you can use the ``+`` operator"
" instead of this function."
msgstr "``add(x [, y]*)`` -- geeft de som van z'n argumenten terug. Gooit een uitzondering als een argument geen getal is. In de meeste gevallen kan u de ``+`` operator gebruiken i.p.v. deze functie."

#: ../../__w/calibre/calibre/manual/template_lang.rst:407
msgid ""
"``and(value [, value]*)`` -- returns the string \"1\" if all values are not "
"empty, otherwise returns the empty string. You can have as many values as "
"you want. In most cases you can use the ``&&`` operator instead of this "
"function.  One reason not to replace ``and`` with ``&&`` is if short-"
"circuiting can change the results because of side effects. For example, "
"``and(a='',b=5)`` will always do both assignments, where the ``&&`` operator"
" won't do the second."
msgstr "``and(value [, value]*)`` -- geeft de string \"1\" terug als geen enkele waarde leeg is, anders de lege string. U kan zoveel waardes hebben als u wil. In de meeste gevallen kan u de ``&&`` operator gebruiken i.p.v. deze functie.  Een reden om ``and`` niet te vervangen door ``&&`` is als short-circuiting de resultaten kan veranderen door bijwerkingen. Bv. ``and(a='',b=5)`` zal altijd beide opdrachten doen terwijl de ``&&`` operator de tweede niet zal doen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:408
msgid ""
"``assign(id, val)`` -- assigns ``val`` to ``id``, then returns ``val``. "
"``id`` must be an identifier, not an expression. In most cases you can use "
"the ``=`` operator instead of this function."
msgstr "``assign(id, val)`` -- wijst ``val`` toe aan ``id``, geeft dan ``val`` terug. ``id`` moet een identificator zijn, geen expressie. Meestal kan u de ``=`` operator gebruiken i.p.v. deze functie."

#: ../../__w/calibre/calibre/manual/template_lang.rst:409
msgid ""
"``approximate_formats()`` -- return a comma-separated list of formats "
"associated with the book. There is no guarantee that the list is correct, "
"although it probably is. This and other zero-parameter functions can be "
"called in Template Program Mode (see below) using the template "
"``{:'approximate_formats()'}``. Note that resulting format names are always "
"uppercase, as in EPUB. The ``approximate_formats()`` function is "
"significantly faster than the ``formats_...`` functions discussed below."
msgstr "``approximate_formats()`` -- geeft een komma gescheiden lijst terug met formaten geassocieerd met het boek. Er is garantie dat de lijst correct is maar waarschijnlijk wel. Deze en andere nul-parameter functies kunnen aangeroepen worden in Sjabloon Programma Modus (zie onder) met de sjabloon ``{:'approximate_formats()'}``. Merk op dat de resulterende formaatnamen altijd in hoofdletters zijn, zoals in EPUB. De ``approximate_formats()`` functie is beduidend sneller dan de ``formats_...`` functies besproken onder."

#: ../../__w/calibre/calibre/manual/template_lang.rst:410
msgid ""
"``author_links(val_separator, pair_separator)`` -- returns a string "
"containing a list of authors and those authors' link values in the form::"
msgstr "``author_links(val_separator, pair_separator)`` -- geeft een string terug met een lijst van auteurs en deze auteurs' hun link waarde in de vorm::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:414
msgid ""
"An author is separated from its link value by the ``val_separator`` string "
"with no added spaces. ``author:linkvalue`` pairs are separated by the "
"``pair_separator`` string argument with no added spaces. It is up to you to "
"choose separator strings that do not occur in author names or links. An "
"author is included even if the author link is empty."
msgstr "Een auteur wordt gescheiden van z'n link waarde door de ``val_separator`` string zonder extra spaties. ``author:linkvalue`` paren worden gescheiden door het ``pair_separator`` string argument zonder extra spaties. Het is aan u om separator strings te kiezen die niet in de auteursnaam of -links voorkomen. Een auteur wordt inbegrepen zelfs als de auteur link leeg is."

#: ../../__w/calibre/calibre/manual/template_lang.rst:415
msgid ""
"``author_sorts(val_separator)`` -- returns a string containing a list of "
"author's sort values for the authors of the book. The sort is the one in the"
" author metadata information (different from the author_sort in books). The "
"returned list has the form ``author sort 1`` ``val_separator`` ``author sort"
" 2`` etc. with no added spaces. The author sort values in this list are in "
"the same order as the authors of the book. If you want spaces around "
"``val_separator`` then include them in the ``val_separator`` string."
msgstr "``author_sorts(val_separator)`` -- geeft een string terug die een lijst van auteur sorteer waarden bevat voor de auteurs van het boek. De sortering is diegene in de auteur's metadata  (anders dan de auteur_sort in boeken). De teruggegeven lijst heeft de vorm auteur ``author sort 1`` ``val_separator`` ``author sort 2`` enz. De author_sort waarden in de lijst zijn in dezelfde volgorde als de auteurs van het boek. Indien u spaties wilt rond ``val_separator`` zet deze in de ``val_separator`` string"

#: ../../__w/calibre/calibre/manual/template_lang.rst:416
msgid ""
"``book_count(query, use_vl)`` -- returns the count of books found by "
"searching for ``query``. If ``use_vl`` is ``0`` (zero) then virtual "
"libraries are ignored. This function and its companion ``book_values()`` are"
" particularly useful in template searches, supporting searches that combine "
"information from many books such as looking for series with only one book. "
"It cannot be used in composite columns unless the tweak "
"``allow_template_database_functions_in_composites`` is set to True. It can "
"be used only in the GUI."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:418
msgid ""
"For example this template search uses this function and its companion to "
"find all series with only one book:"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:420
msgid ""
"Define a stored template (using :guilabel:`Preferences->Advanced->Template "
"functions`) named ``series_only_one_book`` (the name is arbitrary). The "
"template is::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:435
msgid ""
"The first time the template runs (the first book checked) it stores the "
"results of the database lookups in a ``global`` template variable named "
"``vals``. These results are used to check subsequent books without redoing "
"the lookups."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:437
msgid "Use the stored template in a template search::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:441
msgid ""
"Using a stored template instead of putting the template into the search "
"eliminates problems caused by the requirement to escape quotes in search "
"expressions."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:442
msgid ""
"``book_values(column, query, sep, use_vl)`` -- returns a list of the unique "
"values contained in the column ``column`` (a lookup name), separated by "
"``sep``, in the books found by searching for ``query``. If ``use_vl`` is "
"``0`` (zero) then virtual libraries are ignored. This function and its "
"companion ``book_count()`` are particularly useful in template searches, "
"supporting searches that combine information from many books such as looking"
" for series with only one book. It cannot be used in composite columns "
"unless the tweak ``allow_template_database_functions_in_composites`` is set "
"to True. It can be used only in the GUI."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:443
msgid ""
"``booksize()`` -- returns the value of the calibre 'size' field. Returns '' "
"if there are no formats."
msgstr "``booksize()`` -- geeft de waarde van het calibre 'grootte' veld terug. Geeft '' terug als er geen formaten zijn."

#: ../../__w/calibre/calibre/manual/template_lang.rst:444
msgid ""
"``check_yes_no(field_name, is_undefined, is_false, is_true)`` -- checks if "
"the value of the yes/no field named by the lookup name ``field_name`` is one"
" of the values specified by the parameters, returning ``'yes'`` if a match "
"is found otherwise returning the empty string. Set the parameter "
"``is_undefined``, ``is_false``, or ``is_true`` to 1 (the number) to check "
"that condition, otherwise set it to 0. Example:"
msgstr "``check_yes_no(field_name, is_undefined, is_false, is_true)`` -- controleert of de waarde van het ja/nee veld genoemd door de opzoeknaam ``field_name`` is een van de waardes gespecificeerd door de parameters, ``'yes'`` teruggevend als een overeenkomst werd gevonden anders de lege string. Stel de parameter ``is_undefined``, ``is_false``, of ``is_true`` in op 1 (het cijfer) om die voorwaarde te controleren, anders op 0. Bv.:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:446
msgid ""
"``check_yes_no(\"#bool\", 1, 0, 1)`` returns ``'yes'`` if the yes/no field "
"``#bool`` is either True or undefined (neither True nor False)."
msgstr "``check_yes_no(\"#bool\", 1, 0, 1)`` geeft ``'yes'`` terug als het yes/no veld ``#bool`` ofwel Waar is ofwel ongedefinieerd (noch Waar noch Vals)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:448
msgid ""
"More than one of ``is_undefined``, ``is_false``, or ``is_true`` can be set "
"to 1."
msgstr "Meer dan een van ``is_undefined``, ``is_false``, of ``is_true`` kan op 1 gezet worden."

#: ../../__w/calibre/calibre/manual/template_lang.rst:449
msgid ""
"``ceiling(x)`` -- returns the smallest integer greater than or equal to "
"``x``. Throws an exception if ``x`` is not a number."
msgstr "``ceiling(x)`` -- geeft de kleinste integer terug groter dan of gelijk aan ``x``. Gooit een uitzondering als ``x`` geen getal is."

#: ../../__w/calibre/calibre/manual/template_lang.rst:450
msgid ""
"``character(character_name)`` -- returns the character named by "
"character_name. For example, ``character('newline')`` returns a newline "
"character (``'\\n'``). The supported character names are ``newline``, "
"``return``, ``tab``, and ``backslash``."
msgstr "``character(character_name)`` -- geeft het karakter terug genoemd door character_name. Bv.: ``character('newline')`` geeft een nieuwe regel karakter (``'\\n'``). De ondersteunde karakternamen zijn ``newline``, ``return``, ``tab`` en ``backslash``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:451
msgid ""
"``cmp(x, y, lt, eq, gt)`` -- compares ``x`` and ``y`` after converting both "
"to numbers. Returns ``lt`` if ``x <# y``, ``eq`` if ``x ==# y``, otherwise "
"``gt``. This function can usually be replaced with one of the numeric "
"compare operators (``==#``, ``<#``, ``>#``, etc)."
msgstr "``cmp(x, y, lt, eq, gt)`` -- vergelijkt ``x`` en ``y`` na converteren van beiden naar getallen. Geetf ``lt`` if ``x <# y``, ``eq`` if ``x ==# y`` terug, anders ``gt``. Deze functie kan gewoonlijk vervangen worden door een van de numerieke vergelijkingsoperatoren (``==#``, ``<#``, ``>#``, enz)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:452
msgid ""
"``connected_device_name(storage_location_key)`` -- if a device is connected "
"then return the device name, otherwise return the empty string. Each storage"
" location on a device has its own device name. The ``storage_location_key`` "
"names are ``'main'``, ``'carda'`` and ``'cardb'``. This function works only "
"in the GUI."
msgstr "``connected_device_name(storage_location_key)`` -- als een toestel verbonden is, geef het toestel's naam terug, anders de lege string. Elke opslaglocatie op een toestel heeft zijn eigen toestelnaam. De ``storage_location_key`` locatienamen zijn ``'main'``, ``'carda'`` en ``'cardb'``. Deze functie werkt enkel in de GUI."

#: ../../__w/calibre/calibre/manual/template_lang.rst:453
msgid ""
"``connected_device_uuid(storage_location_key)`` -- if a device is connected "
"then return the device uuid (unique id), otherwise return the empty string. "
"Each storage location on a device has a different uuid. The "
"``storage_location_key`` location names are ``'main'``, ``'carda'`` and "
"``'cardb'``. This function works only in the GUI."
msgstr "``connected_device_uuid(storage_location_key)`` -- als een toestel verbonden is, geef het toestel's uuid (unique id) terug, anders de lege string. Elke opslaglocatie op een toestel heeft een ander uuid. De ``storage_location_key`` locatienamen zijn ``'main'``, ``'carda'`` en ``'cardb'``. Deze functie werkt enkel in de GUI."

#: ../../__w/calibre/calibre/manual/template_lang.rst:454
msgid ""
"``current_library_name()`` -- return the last name on the path to the "
"current calibre library."
msgstr "``current_library_name()`` -- geeft de laatste naam op het pad naar de huidige calibre bibliotheel terug."

#: ../../__w/calibre/calibre/manual/template_lang.rst:455
msgid ""
"``current_library_path()`` -- return the full path to the current calibre "
"library."
msgstr "``current_library_path()`` -- geeft het volledige pad naar de huidige calibre bibliotheek terug."

#: ../../__w/calibre/calibre/manual/template_lang.rst:456
msgid ""
"``current_virtual_library_name()`` -- return the name of the current virtual"
" library if there is one, otherwise the empty string. Library name case is "
"preserved. Example: ``program: current_virtual_library_name()``. This "
"function works only in the GUI."
msgstr "``current_virtual_library_name()`` -- geeft de naam van de huidige virtuele bibliotheek als er een is, anders de lege string. Bibliotheeknaam hoofdlettergebruik wordt behouden. Bv.: ``program: current_virtual_library_name()``. Deze functie werkt enkel in de GUI."

#: ../../__w/calibre/calibre/manual/template_lang.rst:457
msgid ""
"``date_arithmetic(date, calc_spec, fmt)`` -- Calculate a new date from "
"``date`` using ``calc_spec``. Return the new date formatted according to "
"optional ``fmt``: if not supplied then the result will be in ISO format. The"
" calc_spec is a string formed by concatenating pairs of ``vW`` "
"(``valueWhat``) where ``v`` is a possibly-negative number and W is one of "
"the following letters:"
msgstr "``date_arithmetic(date, calc_spec, fmt)`` -- Bereken een nieuwe datum van ``date`` met ``calc_spec``. Geef de nieuwe datum terug geformatteerd volgens optioneel ``fmt``: indien niet voorzien zal het resultaat in ISO formaat zijn. De calc_spec is een string gevormd door aaneengeregen paren van  ``vW`` (``valueWhat``) waar ``v`` een mogelijk-negatief getal is en W een van de volgende letters:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:459
msgid "``s``: add ``v`` seconds to ``date``"
msgstr "``s``: voeg ``v`` seconden toe aan ``date``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:460
msgid "``m``: add ``v`` minutes to ``date``"
msgstr "``m``: voeg ``v`` minuten toe aan ``date``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:461
msgid "``h``: add ``v`` hours to ``date``"
msgstr "``h``: voeg ``v`` uren toe aan ``date``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:462
msgid "``d``: add ``v`` days to ``date``"
msgstr "``d``: voeg ``v`` dagen toe aan ``date``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:463
msgid "``w``: add ``v`` weeks to ``date``"
msgstr "``w``: voeg ``v`` weken toe aan ``date``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:464
msgid "``y``: add ``v`` years to ``date``, where a year is 365 days."
msgstr "``y``: voeg ``v`` jaren toe aan ``date``, waar een jaar is 365 dagen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:466
msgid ""
"Example: ``'1s3d-1m'`` will add 1 second, add 3 days, and subtract 1 minute "
"from ``date``."
msgstr "Voorbeeld: ``'1s3d-1m'`` voegt 1 seconde, 3 dagen toe en trekt 1 minuut af van ``date``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:467
msgid ""
"``days_between(date1, date2)`` -- return the number of days between "
"``date1`` and ``date2``. The number is positive if ``date1`` is greater than"
" ``date2``, otherwise negative. If either ``date1`` or ``date2`` are not "
"dates, the function returns the empty string."
msgstr "``days_between(date1, date2)`` -- geeft het aantal dagen tussen ``date1`` en ``date2`` terug. Het aantal is positief als ``date1`` groter is dan ``date2``, anders negatief. Als ofwel ``date1`` ofwel ``date2`` geen datum is, wordt de lege string terug gegeven."

#: ../../__w/calibre/calibre/manual/template_lang.rst:468
msgid ""
"``divide(x, y)`` -- returns ``x / y``. Throws an exception if either ``x`` "
"or ``y`` are not numbers. This function can usually be replaced by the ``/``"
" operator."
msgstr "``divide(x, y)`` -- returns ``x / y``. Gooit een uitzondering als ofwel ``x`` ofwel ``y`` geen getallen zijn. Deze functie kan gewoonlijk vervangen worden door de ``/`` operator."

#: ../../__w/calibre/calibre/manual/template_lang.rst:469
msgid ""
"``eval(string)`` -- evaluates the string as a program, passing the local "
"variables. This permits using the template processor to construct complex "
"results from local variables. In :ref:`Template Program Mode "
"<template_mode>`, because the `{` and `}` characters are interpreted before "
"the template is evaluated you must use `[[` for the `{` character and `]]` "
"for the ``}`` character. They are converted automatically. Note also that "
"prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the "
"argument to this function when using :ref:`Template Program Mode "
"<template_mode>`."
msgstr "``eval(string)`` -- evalueert de string als een programma, de lokale variabelen doorgevend. Dit laat toe complexe resultaten te bouwen van lokale variabelen met de sjabloonprocessor. In :ref:`Template Program Mode <template_mode>`, omdat de `{` en `}` karakters geïnterpreteerd worden voor de sjabloon wordt geëvalueerd, moet u `[[` gebruiken voor het `{` karakter en `]]` voor het ``}`` karakter. Ze worden automatisch omgezet. Merk ook op dat voor- en achtervoegsel (de `|prefix|suffix` syntaxis) niet gebruikt kunnen worden in het argument bij deze functie bij gebruik van :ref:`Template Program Mode <template_mode>`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:470
msgid ""
"``field(lookup_name)`` -- returns the value of the metadata field with "
"lookup name ``lookup_name``."
msgstr "``field(lookup_name)`` -- geeft de waarde terug van het metadata veld met opzoeknaam ``lookup_name``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:471
msgid ""
"``field_exists(field_name)`` -- checks if a field (column) with the lookup "
"name ``field_name`` exists, returning ``'1'`` if so and the empty string if "
"not."
msgstr "``field_exists(field_name)`` -- controleert of een veld (kolom) met de lookup naam ``field_name`` bestaat, geeft ``'1'`` indien ja en de lege string indien niet. "

#: ../../__w/calibre/calibre/manual/template_lang.rst:472
msgid ""
"``finish_formatting(val, fmt, prefix, suffix)`` -- apply the format, prefix,"
" and suffix to a value in the same way as done in a template like "
"``{series_index:05.2f| - |- }``. This function is provided to ease "
"conversion of complex single-function- or template-program-mode templates to"
" `GPM` Templates. For example, the following program produces the same "
"output as the above template::"
msgstr "``finish_formatting(val, fmt, prefix, suffix)`` -- pas het formaat, voor- en achtervoegsel toe op een waarde op dezelfde manier als in een sjabloon zoals ``{series_index:05.2f| - |- }``. Deze functie is voorzien om conversie te vergemakkelijken van ingewikkelde één-functie- of sjabloon-programma-modus sjablonen naar `GPM` Sjablonen. Bv. het volgende programma geeft dezelfde output als bovenstaande sjabloon::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:476
msgid ""
"Another example: for the template "
"``{series:re(([^\\s])[^\\s]+(\\s|$),\\1)}{series_index:0>2s| - | - "
"}{title}`` use::"
msgstr "Nog een voorbeeld: voor de sjabloon ``{series:re(([^\\s])[^\\s]+(\\s|$),\\1)}{series_index:0>2s| - | - }{title}`` gebruik::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:485
msgid ""
"``first_matching_cmp(val, [ cmp, result, ]* else_result)`` -- compares ``val"
" < cmp`` in sequence, returning the associated result for the first "
"comparison that succeeds. Returns else_result if no comparison succeeds. "
"Example::"
msgstr "``first_matching_cmp(val, [ cmp, result, ]* else_result)`` -- vergelijkt ``val < cmp`` in volgorde, het  geassocieerde resultaat teruggevend voor de eerste vergelijking die klopt. Geeft else_result terug als geen vergelijking klopt. Bv::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:490
msgid ""
"returns ``\"large\"``. The same example with a first value of 16 returns "
"``\"giant\"``."
msgstr "geeft ``\"large\"`` terug. Hetzelfde voorbeeld met een eerste warde van 16 geeft ``\"giant\"`` terug."

#: ../../__w/calibre/calibre/manual/template_lang.rst:492
msgid ""
"``first_non_empty(value [, value]*)`` -- returns the first ``value`` that is"
" not empty. If all values are empty, then the empty string is returned. You "
"can have as many values as you want."
msgstr "``first_non_empty(value [, value]*)`` -- geeft de eerste ``value`` terug welke niet leeg is. Als alle waardes leeg zijn, wordt de lege string terug gegeven. U kan zo veel waardes opgeven als u wilt."

#: ../../__w/calibre/calibre/manual/template_lang.rst:493
msgid ""
"``floor(x)`` -- returns the largest integer less than or equal to ``x``. "
"Throws an exception if ``x`` is not a number."
msgstr "``floor(x)`` -- geeft de grootste integer terug kleiner dan of gelijk aan ``x``. Gooit een uitzondering als ``x`` geen getal is."

#: ../../__w/calibre/calibre/manual/template_lang.rst:494
msgid ""
"``format_date(val, format_string)`` -- format the value, which must be a "
"date string, using the format_string, returning a string. The formatting "
"codes are:"
msgstr "``format_date(val, format_string)`` -- maak de waarde op, die een datumstring moet zijn, met behulp van format_string, geef een string terug. De opmaakcodes zijn:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:496
msgid "``d    :`` the day as number without a leading zero (1 to 31)"
msgstr "``d    :`` de dag als getal zonder voorloopnul (1 to 31)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:497
msgid "``dd   :`` the day as number with a leading zero (01 to 31)"
msgstr "``dd   :`` de dag als getal met voorloopnul (01 to 31)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:498
msgid "``ddd  :`` the abbreviated localized day name (e.g. \"Mon\" to \"Sun\")."
msgstr "``ddd  :`` de afgekorte gelokaliseerde dag naam (bv. \"Maa\" tot \"Zon\")."

#: ../../__w/calibre/calibre/manual/template_lang.rst:499
msgid "``dddd :`` the long localized day name (e.g. \"Monday\" to \"Sunday\")."
msgstr "``dddd :`` de voluit gelokaliseerde dag naam (bv. \"Maandag\" tot \"Zondag\")."

#: ../../__w/calibre/calibre/manual/template_lang.rst:500
msgid "``M    :`` the month as number without a leading zero (1 to 12)."
msgstr "``M    :`` de maand als getal zonder voorloopnul (1 to 12)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:501
msgid "``MM   :`` the month as number with a leading zero (01 to 12)"
msgstr "``MM   :`` de maand als getal met voorloopnul (01 to 12)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:502
msgid "``MMM  :`` the abbreviated localized month name (e.g. \"Jan\" to \"Dec\")."
msgstr "``MMM  :`` de afgekorte gelokaliseerde maandnaam (bv. \"jan\" tot \"dec\")."

#: ../../__w/calibre/calibre/manual/template_lang.rst:503
msgid "``MMMM :`` the long localized month name (e.g. \"January\" to \"December\")."
msgstr "``MMMM :`` de voluit gelokaliseerde maandnaam (bv. \"januari\" tot \"december\")."

#: ../../__w/calibre/calibre/manual/template_lang.rst:504
msgid "``yy   :`` the year as two digit number (00 to 99)."
msgstr "``yy   :`` het jaar als tweecijferig getal (00 tot 99)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:505
msgid "``yyyy :`` the year as four digit number."
msgstr "``yyyy :`` het jaar als viercijferig getal."

#: ../../__w/calibre/calibre/manual/template_lang.rst:506
msgid ""
"``h    :`` the hours without a leading 0 (0 to 11 or 0 to 23, depending on "
"am/pm)"
msgstr "``h    :`` de uren zonder voorloopnul (0 tot 11 of 0 tot 23, afhankelijk van am/pm)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:507
msgid ""
"``hh   :`` the hours with a leading 0 (00 to 11 or 00 to 23, depending on "
"am/pm)"
msgstr "``hh   :`` de uren met  voorloopnul (00 tot 11 of 00 tot 23, afhankelijk van am/pm)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:508
msgid "``m    :`` the minutes without a leading 0 (0 to 59)"
msgstr "``m    :`` de minuten zonder voorloopnul (0 tot 59)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:509
msgid "``mm   :`` the minutes with a leading 0 (00 to 59)"
msgstr "``mm   :`` de minuten met voorloopnul (00 tot 59)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:510
msgid "``s    :`` the seconds without a leading 0 (0 to 59)"
msgstr "``s    :`` de seconden zonder voorloopnul (0 tot 59)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:511
msgid "``ss   :`` the seconds with a leading 0 (00 to 59)"
msgstr "``ss   :`` de seconden met voorloopnul (00 tot 59)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:512
msgid ""
"``ap   :`` use a 12-hour clock instead of a 24-hour clock, with 'ap' "
"replaced by the localized string for am or pm."
msgstr "``ap   :`` gebruik een 12-uur klok i.p.v. een 24-uur klok, met 'ap' vervangen door de gelokaliseerde string voor am of pm."

#: ../../__w/calibre/calibre/manual/template_lang.rst:513
msgid ""
"``AP   :`` use a 12-hour clock instead of a 24-hour clock, with 'AP' "
"replaced by the localized string for AM or PM."
msgstr "``AP   :`` gebruik een 12-uur klok i.p.v. een 24-uur klok, met 'AP' vervangen door de gelokaliseerde string voor AM of PM."

#: ../../__w/calibre/calibre/manual/template_lang.rst:514
msgid ""
"``iso  :`` the date with time and timezone. Must be the only format present."
msgstr "``iso  :`` de datum met tijd en tijdzone. Moet als enige formaat aanwezig zijn."

#: ../../__w/calibre/calibre/manual/template_lang.rst:515
msgid ""
"``to_number   :`` convert the date & time into a floating point number (a "
"`timestamp`)"
msgstr "``to_number   :`` converteer de datum & tijd in een floating point getal (een `tijdstempel`)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:516
msgid ""
"``from_number :`` convert a floating point number (a `timestamp`) into an "
"``iso`` formatted date. If you want a different date format then add the "
"desired formatting string after ``from_number`` and a colon (``:``). "
"Example: ``from_number:MMM dd yyyy``"
msgstr "``from_number :`` converteer een floating point getal (een `tijdstempel`) in een ``iso`` opgemaakte datum. Als u een ander datumformaat wilt, voeg de gewenste opmaakstring toe na ``from_number`` en een dubbel punt (``:``). Bv: ``from_number:MMM dd yyyy``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:518
msgid ""
"You might get unexpected results if the date you are formatting contains "
"localized month names, which can happen if you changed the date format "
"tweaks to contain ``MMMM``. In this case, instead of using the ``field()`` "
"function as in::"
msgstr "U kan onverwachte resultaten krijgen bij opmaken van een datum met gelokaliseerde maandnamen. Dit kan gebeuren als u de datumopmaak tweaks veranderde om ``MMMM`` te bevatten. In dit geval, i.p.v. de ``field()`` functie te gebruiken zoals in::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:522
msgid "use the ``raw_field()`` function as in::"
msgstr "gebruik de ``raw_field()`` functie zoals in::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:526
msgid ""
"``formats_modtimes(date_format_string)`` -- return a comma-separated list of"
" colon-separated items ``FMT:DATE`` representing modification times for the "
"formats of a book. The ``date_format_string`` parameter specifies how the "
"date is to be formatted. See the ``format_date()`` function for details. You"
" can use the ``select`` function to get the modification time for a specific"
" format. Note that format names are always uppercase, as in EPUB."
msgstr "``formats_modtimes(date_format_string)`` -- geeft een komma-gescheiden lijst van door streepjes gescheiden items terug die de wijzigingsdata van de formaten van een boek weergeven. De  ``date_format_string`` parameter geeft aan hoe de datum geformatteerd moet worden. Zie de  ``format_date()`` functie voor details. U kunt de ``select`` functie gebruiken om de wijzigingsdatum van een specifiek formaat op te vragen. Let op dat formaatnamen altijd in hoofdletters zijn, zoals EPUB."

#: ../../__w/calibre/calibre/manual/template_lang.rst:527
msgid ""
"``formats_paths()`` -- return a comma-separated list of colon-separated "
"items ``FMT:PATH`` giving the full path to the formats of a book. You can "
"use the select function to get the path for a specific format. Note that "
"format names are always uppercase, as in EPUB."
msgstr "``formats_paths()`` -- geeft een komma gescheiden lijst van streepjes gescheiden ``FMT:PATH`` items terug met het volledige pad naar de formaten van een boek. U kunt de select functie gebruiken om het pad naar een specifiek formaat te krijgen. Let op dat formaatnamen altijd in hoofdletters zijn, zoals EPUB."

#: ../../__w/calibre/calibre/manual/template_lang.rst:528
msgid ""
"``formats_sizes()`` -- return a comma-separated list of colon-separated "
"``FMT:SIZE`` items giving the sizes in bytes of the formats of a book. You "
"can use the select function to get the size for a specific format. Note that"
" format names are always uppercase, as in EPUB."
msgstr "``formats_sizes()`` -- geeft een komma gescheiden lijst van streepjes gescheiden ``FMT:PATH`` items met de grootte van de formaten van een boek in bytes. U kunt de select functie gebruiken om de grootte van een specifiek formaat te krijgen. Let op dat formaatnamen altijd in hoofdletters zijn, zoals EPUB."

#: ../../__w/calibre/calibre/manual/template_lang.rst:529
msgid ""
"``fractional_part(x)`` -- returns the value after the decimal point. For "
"example, ``fractional_part(3.14)`` returns ``0.14``. Throws an exception if "
"``x`` is not a number."
msgstr "``fractional_part(x)`` -- geeft de waarde na het decimale punt. Bv. ``fractional_part(3.14)`` geeft ``0.14`` terug. Gooit een uitzondering als ``x`` geen getal is."

#: ../../__w/calibre/calibre/manual/template_lang.rst:530
msgid ""
"``has_cover()`` -- return ``'Yes'`` if the book has a cover, otherwise the "
"empty string."
msgstr "``has_cover()`` -- geeft ``'Yes'`` terug als het boek een omslag heeft, anders de lege string."

#: ../../__w/calibre/calibre/manual/template_lang.rst:531
msgid ""
"``is_marked()`` -- check whether the book is `marked` in calibre. If it is "
"then return the value of the mark, either ``'true'`` (lower case) or a "
"comma-separated list of named marks. Returns ``''`` (the empty string) if "
"the book is not marked. This function works only in the GUI."
msgstr "``is_marked()`` -- controleer of het boek `gemarkeerd` is in calibre. Indien ja, geef de waarde van de markering terug, ofwel ``'true'`` (kleine letters) of een kommagescheiden lijst van benoemde markeringen. Geeft ``''`` (de lege string) terug als het boek niet gemarkeerd is. Deze functie werkt enkel in de GUI."

#: ../../__w/calibre/calibre/manual/template_lang.rst:532
msgid ""
"``language_codes(lang_strings)`` -- return the `language codes "
"<https://www.loc.gov/standards/iso639-2/php/code_list.php>`_ for the "
"language names passed in `lang_strings`. The strings must be in the language"
" of the current locale. ``Lang_strings`` is a comma-separated list."
msgstr "``language_codes(lang_strings)`` -- geef de `taalcodes <https://www.loc.gov/standards/iso639-2/php/code_list.php>`_ terug voor de taalnamen doorgegeven in `lang_strings`. De strings moeten in de taal van de huidige locale zijn. ``Lang_strings`` is een kommagescheiden lijst."

#: ../../__w/calibre/calibre/manual/template_lang.rst:533
msgid ""
"``list_contains(value, separator, [ pattern, found_val, ]* not_found_val)`` "
"-- (Alias of ``in_list``) Interpreting the value as a list of items "
"separated by ``separator``, evaluate the ``pattern`` against each value in "
"the list. If the ``pattern`` matches any value then return ``found_val``, "
"otherwise return ``not_found_val``. The ``pattern`` and ``found_value`` can "
"be repeated as many times as desired, permitting returning different values "
"depending on the search. The patterns are checked in order. The first match "
"is returned. Aliases: ``in_list()``, ``list_contains()``"
msgstr "``list_contains(value, separator, [ pattern, found_val, ]* not_found_val)`` -- (Alias van ``in_list``) Interpreteert de waarde als een lijst met items gescheiden door ``separator``, evalueert het ``pattern`` tegen elke waarde in de lijst. Als het ``pattern`` overeen komt met een waarde komt ``found_val`` terug, anders ``not_found_val``. De ``pattern`` en ``found_value`` kunnen zo vaak als gewenst herhaald worden, toelatend verschillende waarden terug te geven, afhankelijk van de zoekopdracht. De patterns worden op volgorde gecontroleerd. De eerste overeenkomst wordt terug gegeven. Aliassen: ``in_list()``, ``list_contains()``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:534
msgid ""
"``list_count(value, separator)`` -- interprets ``value`` as a list of items "
"separated by ``separator``, returning the count of items in the list. "
"Aliases: ``count()``, ``list_count()``"
msgstr "``list_count(value, separator)`` -- interpreteert ``value`` als een lijst met items gescheiden door ``separator``, geeft het aantal items in de lijst terug. Aliassen: ``count()``, ``list_count()``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:535
msgid ""
"``list_count_matching(list, pattern, separator)`` -- interprets ``list`` as "
"a list of items separated by ``separator``, returning the number of items in"
" the list that match the regular expression ``pattern``. Aliases: "
"``list_count_matching()``, ``count_matching()``"
msgstr "``list_count_matching(list, pattern, separator)`` -- interpreteert ``lijst`` als een lijst met items gescheiden door ``separator``, geeft het aantal items in de lijst terug die overeenkomen met de reguliere expressie ``pattern``. Aliassen: ``list_count_matching()``, ``count_matching()``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:536
msgid ""
"``list_difference(list1, list2, separator)`` -- return a list made by "
"removing from ``list1`` any item found in ``list2`` using a case-insensitive"
" comparison. The items in ``list1`` and ``list2`` are separated by "
"separator, as are the items in the returned list."
msgstr "``list_difference(list1, list2, separator)`` -- geeft een lijst terug gemaakt door uit ``list1`` alle item te verwijderen gevonden in ``list2`` waarbij niet hoofdlettergevoelig wordt vergeleken. De items in ``list1`` en ``list2`` zijn gescheiden door separator, net zoals de items in de teruggegeven lijst."

#: ../../__w/calibre/calibre/manual/template_lang.rst:537
msgid ""
"``list_equals(list1, sep1, list2, sep2, yes_val, no_val)`` -- return "
"``yes_val`` if ``list1`` and `list2` contain the same items, otherwise "
"return ``no_val``. The items are determined by splitting each list using the"
" appropriate separator character (``sep1`` or ``sep2``). The order of items "
"in the lists is not relevant. The comparison is case-insensitive."
msgstr "``list_equals(list1, sep1, list2, sep2, yes_val, no_val)`` -- geef ``yes_val`` terug als ``list1`` en `list2` dezelfde items bevatten, anders ``no_val``. De items worden bepaald door iedere lijst te splitsen met het juiste scheidingsteken (``sep1`` or ``sep2``).  De volgorde van items in de lijst is niet relevant. De vergelijking is hoofdletterongevoelig."

#: ../../__w/calibre/calibre/manual/template_lang.rst:538
msgid ""
"``list_intersection(list1, list2, separator)`` -- return a list made by "
"removing from ``list1`` any item not found in ``list2``, using a case-"
"insensitive comparison. The items in ``list1`` and ``list2`` are separated "
"by separator, as are the items in the returned list."
msgstr "``list_intersection(list1, list2, separator)`` -- geeft een lijst terug gemaakt door uit ``list1`` alle item te verwijderen niet gevonden in ``list2`` waarbij niet hoofdlettergevoelig wordt vergeleken. De items in ``list1`` en ``list2`` zijn gescheiden door separator, net zoals de items in de teruggegeven lijst."

#: ../../__w/calibre/calibre/manual/template_lang.rst:539
msgid ""
"``list_join(with_separator, list1, separator1 [, list2, separator2]*)`` -- "
"return a list made by joining the items in the source lists (``list1`` etc) "
"using ``with_separator`` between the items in the result list. Items in each"
" source ``list[123...]`` are separated by the associated "
"``separator[123...]``. A list can contain zero values. It can be a field "
"like ``publisher`` that is single-valued, effectively a one-item list. "
"Duplicates are removed using a case-insensitive comparison. Items are "
"returned in the order they appear in the source lists. If items on lists "
"differ only in letter case then the last is used. All separators can be more"
" than one character."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:541
#: ../../__w/calibre/calibre/manual/template_lang.rst:563
msgid "Example::"
msgstr "Voorbeeld::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:546
msgid ""
"You can use ``list_join`` on the results of previous calls to ``list_join`` "
"as follows::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:552
msgid ""
"You can use expressions to generate a list. For example, assume you want "
"items for ``authors`` and ``#genre``, but with the genre changed to the word"
" \"Genre: \" followed by the first letter of the genre, i.e. the genre "
"\"Fiction\" becomes \"Genre: F\". The following will do that::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:557
msgid ""
"``list_re(src_list, separator, include_re, opt_replace)`` -- Construct a "
"list by first separating ``src_list`` into items using the ``separator`` "
"character. For each item in the list, check if it matches ``include_re``. If"
" it does then add it to the list to be returned. If ``opt_replace`` is not "
"the empty string then apply the replacement before adding the item to the "
"returned list."
msgstr "``list_re(src_list, separator, include_re, opt_replace)`` -- maak een lijst door eerst ``src_list`` te scheiden in items met het ``separator`` karakter. Voor elk item in de lijst, controleer of het overeenkot met ``include_re``. Indien ja, voeg het toe aan de terug te geven lijst. Als ``opt_replace`` niet de lege string is, pas de vervanging dan toe vóór het item aan de teruggegeven lijst toe te voegen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:558
msgid ""
"``list_re_group(src_list, separator, include_re, search_re [, "
"template_for_group]*)`` -- Like list_re except replacements are not "
"optional. It uses ``re_group(item, search_re, template ...)`` when doing the"
" replacements."
msgstr "``list_re_group(src_list, separator, include_re, search_re [, template_for_group]*)`` -- zoals list-re behalve vervanging is niet optioneel. Het gebruikt ``re_group(item, search_re, template ...)`` bij het vervangen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:559
msgid ""
"``list_remove_duplicates(list, separator)`` -- return a list made by "
"removing duplicate items in ``list``. If items differ only in case then the "
"last is returned. The items in ``list`` are separated by ``separator``, as "
"are the items in the returned list."
msgstr "``list_remove_duplicates(list, separator)`` -- geef een lijst terug gemaakt door uit ``list`` alle duplicaten te verwijderen. Als items enkel verschillen in hoofdlettergebruik wordt het laatste teruggegeven. De items in ``lijst`` zijn gescheiden door ``separator``, net zoals de items in de teruggegeven lijst."

#: ../../__w/calibre/calibre/manual/template_lang.rst:560
msgid ""
"``list_sort(list, direction, separator)`` -- return ``list`` sorted using a "
"case-insensitive lexical sort. If ``direction`` is zero, ``list`` is sorted "
"ascending, otherwise descending. The list items are separated by "
"``separator``, as are the items in the returned list."
msgstr "``list_sort(list, direction, separator)`` -- geeft ``list`` terug gesorteerd met een hoofdletter ongevoelige lexicale sortering. Als ``direction`` nul is, wordt ``list`` oplopend gesorteerd, anders aflopend. De lijstitems worden gescheiden door ``separator``, zowel als de items in de teruggegeven lijst."

#: ../../__w/calibre/calibre/manual/template_lang.rst:561
msgid ""
"``list_split(list_val, sep, id_prefix)`` -- splits ``list_val`` into "
"separate values using ``sep``, then assigns the values to local variables "
"named ``id_prefix_N`` where N is the position of the value in the list. The "
"first item has position 0 (zero). The function returns the last element in "
"the list."
msgstr "``list_split(list_val, sep, id_prefix)`` -- splitst ``list_val`` in aparte waardes met ``sep``, wijst dan de waardes toe an lokale variabelen genaamd ``id_prefix_N`` waar N de positie is van de waarde in de lijst. Het eerste item heeft positie 0 (zero). De functie geeft het laatste element in de lijst."

#: ../../__w/calibre/calibre/manual/template_lang.rst:567
msgid "is equivalent to::"
msgstr "is gelijkwaardig aan::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:573
msgid ""
"``list_union(list1, list2, separator)`` -- return a list made by merging the"
" items in ``list1`` and ``list2``, removing duplicate items using a case-"
"insensitive comparison. If items differ in case, the one in ``list1`` is "
"used. The items in ``list1`` and ``list2`` are separated by ``separator``, "
"as are the items in the returned list. Aliases: ``merge_lists()``, "
"``list_union()``"
msgstr "``list_union(list1, list2, separator)`` -- geeft een lijst terug gemaakt door het samenvoegen van de items in ``list1`` en ``list2``, waarbij dubbels worden verwijderd (hoofdletterongevoelig). Als items verschillen in hoofdletter-gebruik, zal de versie van ``list1`` gebruikt worden. De items in ``list1`` en ``list2`` worden gescheiden door ``separator``, zo ook de items in de teruggegeven lijst. Aliassen: ``merge_lists()``, ``list_union()``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:574
msgid ""
"``mod(x, y)`` -- returns the ``floor`` of the remainder of ``x / y``. Throws"
" an exception if either ``x`` or ``y`` is not a number."
msgstr "``mod(x, y)`` -- geeft de ``vloer`` van rest van ``x / y`` terug. Gooit een uitzondering als ofwel ``x`` ofwel ``y`` geen getal is."

#: ../../__w/calibre/calibre/manual/template_lang.rst:575
msgid ""
"``multiply(x [, y]*)`` -- returns the product of its arguments. Throws an "
"exception if any argument is not a number. This function can usually be "
"replaced by the ``*`` operator."
msgstr "``multiply(x [, y]*)`` -- geeft het product van z'n argumenten terug. Gooit een uitzondering als eender welk argument geen getal is. Deze functie kan gewoonlijk vervangen worden door de ``*`` operator."

#: ../../__w/calibre/calibre/manual/template_lang.rst:576
msgid ""
"``not(value)`` -- returns the string \"1\" if the value is empty, otherwise "
"returns the empty string. This function can usually be replaced with the "
"unary not (``!``) operator."
msgstr "``not(value)`` -- geeft de string \"1\" terug als de waarde leeg is, anders de lege string. Deze functie kan gewoonlijk vervangen worden door de unary niet (``!``) operator."

#: ../../__w/calibre/calibre/manual/template_lang.rst:577
msgid ""
"``ondevice()`` -- return the string ``'Yes'`` if ``ondevice`` is set, "
"otherwise return the empty string."
msgstr "``ondevice()`` -- geeft de string ``'Yes'`` terug als ``ondevice`` is ingesteld, anders de lege string."

#: ../../__w/calibre/calibre/manual/template_lang.rst:578
msgid ""
"``or(value [, value]*)`` -- returns the string ``'1'`` if any value is not "
"empty, otherwise returns the empty string. You can have as many values as "
"you want. This function can usually be replaced by the ``||`` operator. A "
"reason it cannot be replaced is if short-circuiting will change the results "
"because of side effects."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:579
msgid ""
"``print(a [, b]*)`` -- prints the arguments to standard output. Unless you "
"start calibre from the command line (``calibre-debug -g``), the output will "
"go into a black hole. The ``print`` function always returns its first "
"argument."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:583
msgid ""
"``range(start, stop, step, limit)`` -- returns a list of numbers generated "
"by looping over the range specified by the parameters start, stop, and step,"
" with a maximum length of limit. The first value produced is 'start'. "
"Subsequent values ``next_v = current_v + step``. The loop continues while "
"``next_v < stop`` assuming ``step`` is positive, otherwise while ``next_v > "
"stop``. An empty list is produced if ``start`` fails the test: ``start >= "
"stop`` if ``step`` is positive. The ``limit`` sets the maximum length of the"
" list and has a default of 1000. The parameters ``start``, ``step``, and "
"``limit`` are optional. Calling ``range()`` with one argument specifies "
"``stop``. Two arguments specify ``start`` and ``stop``. Three arguments "
"specify ``start``, ``stop``, and ``step``. Four arguments specify ``start``,"
" ``stop``, ``step`` and ``limit``. Examples::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:593
msgid ""
"``raw_field(lookup_name [, optional_default])`` -- returns the metadata "
"field named by ``lookup_name`` without applying any formatting. It evaluates"
" and returns the optional second argument ``optional_default`` if the "
"field's value is undefined (``None``)."
msgstr "``raw_field(lookup_name [, optional_default])`` -- geeft het metadata veld terug genoemd door ``lookup_name`` zonder toepassen van opmaak. Het evalueert en geeft het optionele tweede argument ``optional_default`` terug als de waarde va het veld niet gedefinieerd (``None``)."

#: ../../__w/calibre/calibre/manual/template_lang.rst:594
msgid ""
"``raw_list(lookup_name, separator)`` -- returns the metadata list named by "
"``lookup_name`` without applying any formatting or sorting, with the items "
"separated by separator."
msgstr "``raw_list(lookup_name, separator)`` -- geeft de metadatalijst terug benoemd door ``lookup_name`` zonder toepassen van formatering of sortering, met items gescheiden door separator."

#: ../../__w/calibre/calibre/manual/template_lang.rst:595
msgid ""
"``re_group(value, pattern [, template_for_group]*)`` --  return a string "
"made by applying the regular expression pattern to ``value`` and replacing "
"each matched instance with the the value returned by the corresponding "
"template. In :ref:`Template Program Mode <template_mode>`, like for the "
"``template`` and the ``eval`` functions, you use ``[[`` for ``{`` and ``]]``"
" for ``}``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:597
msgid ""
"The following example looks for a series with more than one word and "
"uppercases the first word::"
msgstr "Het volgende voorbeeld zoekt naar een reeks met meer dan één woord zet het eerste woord in hoofdletters::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:601
msgid ""
"``round(x)`` -- returns the nearest integer to ``x``. Throws an exception if"
" ``x`` is not a number."
msgstr "``round(x)`` -- geeft de dichtbijgelegen integer van ``x`` terug. Gooit een uitzondering als ``x`` geen getal is."

#: ../../__w/calibre/calibre/manual/template_lang.rst:602
msgid "``series_sort()`` -- returns the series sort value."
msgstr "``series_sort()`` -- geeft de reekssorteerwaarde terug."

#: ../../__w/calibre/calibre/manual/template_lang.rst:603
msgid ""
"``strcat(a [, b]*)`` -- can take any number of arguments. Returns a string "
"formed by concatenating all the arguments."
msgstr "``strcat(a [, b]*)`` -- kan een willekeurig aantal parameters verwerken. Geeft een string terug bestaande uit de samengevoegde parameters"

#: ../../__w/calibre/calibre/manual/template_lang.rst:604
msgid ""
"``strcat_max(max, string1 [, prefix2, string2]*)`` -- Returns a string "
"formed by concatenating the arguments. The returned value is initialized to "
"``string1``. Strings made from ``prefix, string`` pairs are added to the end"
" of the value as long as the resulting string length is less than ``max``. "
"Prefixes can be empty. Returns ``string1`` even if ``string1`` is longer "
"than ``max``. You can pass as many ``prefix, string`` pairs as you wish."
msgstr "``strcat_max(max, string1 [, prefix2, string2]*)`` -- Geeft een string terug gevormd door samenvoegen van de argumenten. De teruggegeven waarde wordt aan ``string1` toegewezen. Paren van ``prefix, string`` worden aan het einde van die waarde toegevoegd, zolang de daaruit volgende string niet langer dan ``max`` is. Prefixen kunnen leeg zijn. Geeft ``string1` terug, zelfs als ``string1` langer is dan ``max``. U kunt zoveel ``prefix, string`` paren opgeven als u wil."

#: ../../__w/calibre/calibre/manual/template_lang.rst:605
msgid ""
"``strcmp(x, y, lt, eq, gt)`` -- does a case-insensitive lexical comparison "
"of ``x`` and ``y``. Returns ``lt`` if ``x < y``, ``eq`` if ``x == y``, "
"otherwise ``gt``. This function can often be replaced by one of the lexical "
"comparison operators (``==``, ``>``, ``<``, etc.)"
msgstr "``strcmp(x, y, lt, eq, gt)`` -- doet een hoofdletterongevoelige lexicale vergelijking van ``x`` en ``y``. Geeft ``lt`` terug als ``x < y``, ``eq`` als ``x == y``, anders ``gt``. Deze functie kan dikwijls vervangen worden door een van de lexicale vergelijkingsoperatoren (``==``, ``>``, ``<``, etc.)"

#: ../../__w/calibre/calibre/manual/template_lang.rst:606
msgid ""
"``strcmpcase(x, y, lt, eq, gt)`` -- does a case-sensitive lexical comparison"
" of ``x`` and ``y``. Returns ``lt`` if ``x < y``, ``eq`` if ``x == y``, "
"otherwise ``gt``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:608
msgid ""
"Note: This is NOT the default behavior used by calibre, for example, in the "
"lexical comparison operators (``==``, ``>``, ``<``, etc.). This function "
"could cause unexpected results, preferably use ``strcmp()`` whenever "
"possible."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:610
msgid "``strlen(value)`` -- Returns the length of the string ``value``."
msgstr "``strlen(value)`` -- Geeft de lengte van de string ``value`` terug."

#: ../../__w/calibre/calibre/manual/template_lang.rst:611
msgid ""
"``substr(str, start, end)`` -- returns the ``start``'th through the "
"``end``'th characters of ``str``. The first character in ``str`` is the "
"zero'th character. If ``end`` is negative, then it indicates that many "
"characters counting from the right. If ``end`` is zero, then it indicates "
"the last character. For example, ``substr('12345', 1, 0)`` returns "
"``'2345'``, and ``substr('12345', 1, -1)`` returns ``'234'``."
msgstr "``substr(str, start, end)`` -- geeft de ``start``'th tot de ``end``'th karakters van ``str`` terug. Het eerste teken in ``str`` is het 0-de karakter. Als ``end`` negatief is betekent dit ‘tot zoveel karakters vanaf rechts’. Als ``end`` nul is betekent dit het laatste karakter. Bijvoorbeeld: substr('12345', 1, 0) geeft '2345', en substr('12345', 1, -1) geeft '234'."

#: ../../__w/calibre/calibre/manual/template_lang.rst:612
msgid ""
"``subtract(x, y)`` -- returns ``x - y``. Throws an exception if either ``x``"
" or ``y`` are not numbers. This function can usually be replaced by the "
"``-`` operator."
msgstr "``subtract(x, y)`` -- geeft ``x - y`` terug. Gooit een uitzondering als ofwel ``x`` ofwel ``y`` geen getallen zijn. Deze functie kan gewoonlijk vervangen worden door de ``-`` operator."

#: ../../__w/calibre/calibre/manual/template_lang.rst:613
msgid ""
"``today()`` -- return a date+time string for today (now). This value is "
"designed for use in `format_date` or `days_between`, but can be manipulated "
"like any other string. The date is in `ISO "
"<https://en.wikipedia.org/wiki/ISO_8601>`_ date/time format."
msgstr "``today()`` -- geeft een datum+tijd string voor vandaag (nu) terug. Deze waarde is gemaakt voor gebruik in `format_date` of `days_between` maar kan aangepast worden als elke andere string. De datum is in `ISO <https://en.wikipedia.org/wiki/ISO_8601>`_ datum/tijd formaat."

#: ../../__w/calibre/calibre/manual/template_lang.rst:614
msgid ""
"``template(x)`` -- evaluates ``x`` as a template. The evaluation is done in "
"its own context, meaning that variables are not shared between the caller "
"and the template evaluation."
msgstr "``template(x)`` -- evalueert ``x`` als een sjabloon. De evaluatie wordt in z'n eigen context gedaan,  variabelen worden dus niet gedeeld door de caller en de sjabloon evaluatie."

#: ../../__w/calibre/calibre/manual/template_lang.rst:615
msgid ""
"``to_hex(val)`` -- returns the string ``val`` encoded in hex. This is useful"
" when constructing calibre URLs."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:616
msgid ""
"``urls_from_identifiers(identifiers, sort_results)`` -- given a comma-"
"separated list of ``identifiers``, where an `identifier` is a colon-"
"separated pair of values (``id_name:id_value``), returns a comma-separated "
"list of HTML URLs generated from the identifiers. The list not sorted if "
"sort_results is ``0`` (character or number), otherwise it is sorted "
"alphabetically by the identifier name. The URLs are generated in the same "
"way as the built-in identifiers column when shown in :guilabel:`Book "
"details`."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:621
msgid "More complex programs in template expressions - Template Program Mode"
msgstr "Meer complexe programma's in sjabloonexpressies - Sjabloon Programma Modus"

#: ../../__w/calibre/calibre/manual/template_lang.rst:623
msgid ""
"`Template Program Mode` (`TPM`) is a blend of :ref:`General Program Mode "
"<general_mode>` and :ref:`Single Function Mode <single_mode>`. `TPM` differs"
" from Single Function Mode in that it permits writing template expressions "
"that refer to other metadata fields, use nested functions, modify variables,"
" and do arithmetic. It differs from `General Program Mode` in that the "
"template is contained between ``{`` and ``}`` characters and doesn't begin "
"with the word ``program:``. The program portion of the template is a General"
" Program Mode expression list."
msgstr "`Sjabloon Programma Modus` (`SPM`) is een mengeling van :ref:`Algemene Programma Modus <general_mode>` en :ref:`Eén Functie Modus <single_mode>`. `TPM` verschilt van Eén Functie Modus in dat het toelaat sjabloon expressies te schrijven die verwijzen naar andere metadata velden, geneste functies gebruikt, variabelen wijzigt, en rekenkunde doet. Het verschilt van `Algemene Programma Modus` in dat de sjabloon gevat wordt tussen ``{`` en ``}`` karakters en niet begint met het woord ``program:``. Het programma deel van de sjabloon is een Algemene Programma Modus expressie lijst."

#: ../../__w/calibre/calibre/manual/template_lang.rst:626
msgid ""
"Example: assume you want a template to show the series for a book if it has "
"one, otherwise show the value of a custom field #genre. You cannot do this "
"in the :ref:`Single Function Mode <single_mode>` because you cannot make "
"reference to another metadata field within a template expression. In `TPM` "
"you can, as the following expression demonstrates::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:631
msgid "The example shows several things:"
msgstr "Het voorbeeld toont meerdere dingen:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:633
msgid ""
"`TPM` is used if the expression begins with ``:'`` and ends with ``'}``. "
"Anything else is assumed to be in :ref:`Single Function Mode <single_mode>`."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:634
msgid ""
"the variable ``$`` stands for the field named in the template: the "
"expression is operating upon, ``#series`` in this case."
msgstr "de variabele ``$`` staat voor het veld benoemd in de sjabloon: de expressie werkt op, ``#series`` in dit geval."

#: ../../__w/calibre/calibre/manual/template_lang.rst:635
msgid ""
"functions must be given all their arguments. There is no default value. For "
"example, the standard built-in functions must be given an additional initial"
" parameter indicating the source field."
msgstr "functies moeten al hun argumenten krijgen. Er is geen standaard waarde. Bv. de standaard ingebouwde functies moeten een extra initiële parameter krijgen die het bronveld aangeeft."

#: ../../__w/calibre/calibre/manual/template_lang.rst:636
msgid "white space is ignored and can be used anywhere within the expression."
msgstr "spaties worden genegeerd en kunnen eender waar in de expressie gebruikt worden"

#: ../../__w/calibre/calibre/manual/template_lang.rst:637
msgid ""
"constant strings are enclosed in matching quotes, either ``'`` or ``\"``."
msgstr "constante strings zijn omringd door overeenkomende aanhalingstekens, ofwel ``'`` ofwel ``\"``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:639
msgid ""
"All the functions listed under `Single Function Mode` and `General Program "
"Mode` can be used in `TPM`."
msgstr "Alle functies opgelijst onder `Eén Functie Modus` en `Algemene Programma Modus` kunnen gebruikt worden in `TPM`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:641
msgid ""
"In `TPM`, using ``{`` and ``}`` characters in string literals can lead to "
"errors or unexpected results because they confuse the template processor. It"
" tries to treat them as template expression boundaries, not characters. In "
"some but not all cases you can replace a ``{`` with ``[[`` and a ``}`` with "
"`]]`. Generally, if your program contains ``{`` and ``}`` characters then "
"you should use `General Program Mode`."
msgstr "In `TPM`, met ``{`` en ``}`` karakters in string literals kan leiden tot fouten of onverwachte resultaten omdat ze de sjabloonprocessor in verwarring brengen. Het probeert ze te behandelen als sjabloon expressie grenzen, niet karakters. In sommige maar niet alle gevallen kan u een ``{`` vervangen door ``[[`` en een ``}`` door `]]`. In het algemeen, als uw programma ``{`` en ``}`` karakters bevat, moet u `Algemene Programma Modus` gebruiken."

#: ../../__w/calibre/calibre/manual/template_lang.rst:643
msgid ""
"As with `General Program Mode`, for functions documented under :ref:`Single "
"Function Mode <single_mode>` you must supply the value the function is to "
"act upon as the first parameter in addition to the documented parameters. In"
" `TPM` you can use ``$`` to access the value specified by the ``lookup "
"name`` for the template expression."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:648
msgid "Python Template Mode"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:650
msgid ""
"Python Template Mode (PTM) lets you write templates using native python and "
"the `calibre API <https://manual.calibre-ebook.com/develop.html#api-"
"documentation-for-various-parts-of-calibre>`_. The database API will be of "
"most use; further discussion is beyond the scope of this manual. PTM "
"templates are faster and can do more complicated operations but you must "
"know how to write code in python using the calibre API."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:652
msgid "A PTM template begins with:"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:668
msgid ""
"You can add the above text to your template using the context menu, usually "
"accessed with a right click. The comments are not significant and can be "
"removed. You must use python indenting."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:670
msgid ""
"The context object supports ``str(context)`` that returns a string of the "
"context's contents, and ``context.attributes`` that returns a list of the "
"attribute names in the context."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:672
msgid ""
"Here is an example of a PTM template that produces a list of all the authors"
" for a series. The list is stored in a `Column built from other columns, "
"behaves like tags`. It shows in :guilabel:`Book details` and has the "
":guilabel:`on separate lines` checked (in :guilabel:`Preferences->Look & "
"feel->Book details`). That option requires the list to be comma-separated. "
"To satisfy that requirement the template converts commas in author names to "
"semicolons then builds a comma-separated list of authors. The authors are "
"then sorted, which is why the template uses author_sort."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:693
msgid "The output in :guilabel:`Book details` looks like this:"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst-1
msgid "E-book conversion dialog"
msgstr "E-boek conversie dialoog"

#: ../../__w/calibre/calibre/manual/template_lang.rst:701
msgid "Stored templates"
msgstr "Opgeslagen sjablonen"

#: ../../__w/calibre/calibre/manual/template_lang.rst:703
msgid ""
"Both :ref:`General Program Mode <general_mode>` and :ref:`Python Template "
"Mode <python_mode>` support saving templates and calling those templates "
"from another template, much like calling stored functions. You save "
"templates using :guilabel:`Preferences->Advanced->Template functions`. More "
"information is provided in that dialog. You call a template the same way you"
" call a function, passing positional arguments if desired. An argument can "
"be any expression. Examples of calling a template, assuming the stored "
"template is named ``foo``:"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:705
msgid "``foo()`` -- call the template passing no arguments."
msgstr "``foo()`` -- roep de sjabloon aan zonder argumenten door te geven."

#: ../../__w/calibre/calibre/manual/template_lang.rst:706
msgid ""
"``foo(a, b)`` call the template passing the values of the two variables "
"``a`` and ``b``."
msgstr "``foo(a, b)`` roep de sjabloon aan met doorgeven van de waardes van de twee variabelen ``a`` en ``b``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:707
msgid ""
"``foo(if field('series') then field('series_index') else 0 fi)`` -- if the "
"book has a ``series`` then pass the ``series_index``, otherwise pass the "
"value ``0``."
msgstr "``foo(if field('series') then field('series_index') else 0 fi)`` -- als het boek een ``series`` heeft, passeer de ``series_index``, anders de waarde ``0``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:709
msgid ""
"In GPM you retrieve the arguments passed in the call to the stored template "
"using the ``arguments`` function. It both declares and initializes local "
"variables, effectively parameters. The variables are positional; they get "
"the value of the parameter given in the call in the same position. If the "
"corresponding parameter is not provided in the call then ``arguments`` "
"assigns that variable the provided default value. If there is no default "
"value then the variable is set to the empty string. For example, the "
"following ``arguments`` function declares 2 variables, ``key``, "
"``alternate``::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:713
msgid "Examples, again assuming the stored template is named ``foo``:"
msgstr "Voorbeelden, er weer vanuit gaand dat de opgeslagen sjabloon ``foo`` heet:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:715
msgid ""
"``foo('#myseries')`` -- argument ``key`` is assigned the value "
"``'myseries'`` and the argument ``alternate`` is assigned the default value "
"``'series'``."
msgstr "``foo('#myseries')`` -- argument ``key`` krijgt de waarde ``'myseries'`` toegewezen en het argument ``alternate`` krijgt de standaard waarde ``'series'`` toegewezen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:716
msgid ""
"``foo('series', '#genre')`` the variable ``key`` is assigned the value "
"``'series'`` and the variable ``alternate`` is assigned the value "
"``'#genre'``."
msgstr "``foo('series', '#genre')`` de variabele ``key`` krijgt de waarde ``'series'`` toegewezen en de variabele ``alternate`` de waarde ``'#genre'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:717
msgid ""
"``foo()`` -- the variable ``key`` is assigned the empty string and the "
"variable ``alternate`` is assigned the value ``'series'``."
msgstr "``foo()`` -- de variabele ``key`` krijgt de lege string toegewezen en de variabele ``alternate`` de waarde ``'series'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:719
msgid ""
"In PTM the arguments are passed in the ``arguments`` parameter, which is a "
"list of strings. There isn't any way to specify default values. You must "
"check the length of the ``arguments`` list to be sure that the number of "
"arguments is what you expect."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:721
msgid ""
"An easy way to test stored templates is using the ``Template tester`` "
"dialog. For ease of access give it a keyboard shortcut in "
":guilabel:`Preferences->Advanced->Keyboard shortcuts->Template tester`. "
"Giving the ``Stored templates`` dialog a shortcut will help switching more "
"rapidly between the tester and editing the stored template's source code."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:724
msgid "Providing additional information to templates"
msgstr "Bijkomende informatie voor sjablonen voorzien"

#: ../../__w/calibre/calibre/manual/template_lang.rst:726
msgid ""
"A developer can choose to pass additional information to the template "
"processor, such as application-specific book metadata or information about "
"what the processor is being asked to do. A template can access this "
"information and use it during the evaluation."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:728
msgid "**Developer: how to pass additional information**"
msgstr "**Ontwikkelaar: hoe bijkomende informatie doorgeven**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:730
msgid ""
"The additional information is a Python dictionary containing pairs "
"``variable_name: variable_value`` where the values must be strings. The "
"template can access the dict, creating template local variables named "
"``variable_name`` containing the value ``variable_value``. The user cannot "
"change the name so it is best to use names that won't collide with other "
"template local variables, for example by prefixing the name with an "
"underscore."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:732
msgid ""
"This dict is passed to the template processor (the ``formatter``) using the "
"named parameter ``global_vars=your_dict``. The full method signature is::"
msgstr "Deze dict wordt doorgegeven aan de sjabloonverwerker (de ``formatter``) met de benoemde parameter ``global_vars=your_dict``. De volledige methodehandtekening is::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:740
msgid "**Template writer: how to access the additional information**"
msgstr "**Sjabloon schrijver: hoe toegang krijgen tot de bijkomende informatie**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:742
msgid ""
"You access the additional information (the ``globals`` dict) in a template "
"using the template function::"
msgstr "U hebt toegang tot de bijkomende informatie (de ``globals`` dict) in een sjabloon met de sjabloon functie::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:746
msgid ""
"where ``id`` is any legal variable name. This function checks whether the "
"additional information provided by the developer contains the name. If it "
"does then the function assigns the provided value to a template local "
"variable with that name. If the name is not in the additional information "
"and if an ``expression`` is provided, the ``expression`` is evaluated and "
"the result is assigned to the local variable. If neither a value nor an "
"expression is provided, the function assigns the empty string (``''``) to "
"the local variable."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:748
msgid ""
"A template can set a value in the ``globals`` dict using the template "
"function::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:752
msgid ""
"This function sets the ``globals`` dict key:value pair ``id:value`` where "
"``value`` is the value of the template local variable ``id``. If that local "
"variable doesn't exist then ``value`` is set to the result of evaluating "
"``expression``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:755
msgid "Notes on the difference between modes"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:757
msgid ""
"The three program modes, :ref:`Single Function Mode <single_mode>` (SFM), "
":ref:`Template Program Mode <template_mode>` (`TPM`), and :ref:`General "
"Program Mode <general_mode>` (`GPM`), work differently. SFM is intended to "
"be 'simple' so it hides a lot of programming language bits."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:759
msgid "Differences:"
msgstr "Verschillen:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:761
msgid ""
"In SFM the value of the column is always passed as an 'invisible' first "
"argument to a function included in the template."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:762
msgid ""
"SFM doesn't support the difference between variables and strings; all values"
" are strings."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:763
msgid ""
"The following SFM template returns either the series name or the string \"no"
" series\"::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:767
msgid "The equivalent template in `TPM` is ::"
msgstr "De soortgelijke sjabloon in `SPM` is::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:771
msgid "The equivalent template in `GPM` is::"
msgstr "De soortgelijke sjabloon in `APM` is::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:775
msgid ""
"The first argument to ``ifempty`` is the value of the field ``series``. The "
"second argument is the string ``no series``. In SFM the first argument, the "
"value of the field, is automatically passed (the invisible argument)."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:776
msgid ""
"Several template functions, for example ``booksize()`` and "
"``current_library_name()``, take no arguments. Because of the 'invisible "
"argument' you cannot use these functions in SFM."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:777
msgid ""
"Nested functions, where a function calls another function to compute an "
"argument, cannot be used in SFM. For example this template, intended to "
"return the first 5 characters of the series value uppercased, won't work in "
"SFM::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:781
msgid ""
"`TPM` and `GPM` support nested functions. The above template in `TPM` would "
"be::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:785
msgid "In `GPM` it would be::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:789
msgid ""
"As noted in the above :ref:`Template Program Mode <template_mode>` section, "
"using ``{`` and ``}`` characters in `TPM` string literals can lead to errors"
" or unexpected results because they confuse the template processor. It tries"
" to treat them as template boundaries, not characters. In some but not all "
"cases you can replace a ``{`` with ``[[`` and a ``}`` with `]]`. Generally, "
"if your program contains ``{`` and ``}`` characters then you should use "
"`General Program Mode`."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:793
msgid "User-defined Python template functions"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:795
msgid ""
"You can add your own Python functions to the template processor. Such "
"functions can be used in any of the three template programming modes. The "
"functions are added by going to :guilabel:`Preferences -> Advanced -> "
"Template functions`. Instructions are shown in that dialog."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:798
msgid "Special notes for save/send templates"
msgstr "Extra opmerkingen voor opslaan/versturen van sjablonen"

#: ../../__w/calibre/calibre/manual/template_lang.rst:800
msgid ""
"Special processing is applied when a template is used in a `save to disk` or"
" `send to device` template. The values of the fields are cleaned, replacing "
"characters that are special to file systems with underscores, including "
"slashes. This means that field text cannot be used to create folders. "
"However, slashes are not changed in prefix or suffix strings, so slashes in "
"these strings will cause folders to be created. Because of this, you can "
"create variable-depth folder structure."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:802
msgid ""
"For example, assume we want the folder structure `series/series_index - "
"title`, with the caveat that if series does not exist, then the title should"
" be in the top folder. The template to do this is::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:806
msgid "The slash and the hyphen appear only if series is not empty."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:808
msgid ""
"The lookup function lets us do even fancier processing. For example, assume "
"that if a book has a series, then we want the folder structure "
"`series/series index - title.fmt`. If the book does not have a series then "
"we want the folder structure `genre/author_sort/title.fmt`. If the book has "
"no genre then we want to use 'Unknown'. We want two completely different "
"paths, depending on the value of series."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:810
msgid "To accomplish this, we:"
msgstr "Om dit te bereiken:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:812
msgid ""
"Create a composite field (give it lookup name #aa) containing "
"``{series}/{series_index} - {title}``. If the series is not empty, then this"
" template will produce `series/series_index - title`."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:813
msgid ""
"Create a composite field (give it lookup name #bb) containing "
"``{#genre:ifempty(Unknown)}/{author_sort}/{title}``. This template produces "
"`genre/author_sort/title`, where an empty genre is replaced with `Unknown`."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:814
msgid ""
"Set the save template to ``{series:lookup(.,#aa,#bb}``. This template "
"chooses composite field ``#aa`` if series is not empty and composite field "
"``#bb`` if series is empty. We therefore have two completely different save "
"paths, depending on whether or not `series` is empty."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:817
msgid "Templates and plugboards"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:819
msgid ""
"Plugboards are used for changing the metadata written into books during "
"send-to-device and save-to-disk operations. A plugboard permits you to "
"specify a template to provide the data to write into the book's metadata. "
"You can use plugboards to modify the following fields: authors, author_sort,"
" language, publisher, tags, title, title_sort. This feature helps people who"
" want to use different metadata in books on devices to solve sorting or "
"display issues."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:821
msgid ""
"When you create a plugboard, you specify the format and device for which the"
" plugboard is to be used. A special device is provided, ``save_to_disk``, "
"that is used when saving formats (as opposed to sending them to a device). "
"Once you have chosen the format and device, you choose the metadata fields "
"to change, providing templates to supply the new values. These templates are"
" `connected` to their destination fields, hence the name `plugboards`. You "
"can of course use composite columns in these templates."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:823
msgid ""
"When a plugboard might apply (Content server, save to disk, or send to "
"device), calibre searches the defined plugboards to choose the correct one "
"for the given format and device. For example, to find the appropriate "
"plugboard for an EPUB book being sent to an ANDROID device, calibre searches"
" the plugboards using the following search order:"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:827
msgid ""
"a plugboard with an exact match on format and device, e.g., ``EPUB`` and "
"``ANDROID``"
msgstr "een adapter met een exacte overeenkomst op formaat en toestel, bv. ``EPUB`` en ``ANDROID``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:828
msgid ""
"a plugboard with an exact match on format and the special ``any device`` "
"choice, e.g., ``EPUB`` and ``any device``"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:829
msgid ""
"a plugboard with the special ``any format`` choice and an exact match on "
"device, e.g., ``any format`` and ``ANDROID``"
msgstr "een adapter met de speciale ``any format`` keuze en een exacte overeenkomst op toestel, bv. ``any format`` en ``ANDROID``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:830
msgid "a plugboard with ``any format`` and ``any device``"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:832
msgid ""
"The tags and authors fields have special treatment, because both of these "
"fields can hold more than one item. A book can have many tags and many "
"authors. When you specify that one of these two fields is to be changed, the"
" template's result is examined to see if more than one item is there. For "
"tags, the result is cut apart wherever calibre finds a comma. For example, "
"if the template produces the value ``Thriller, Horror``, then the result "
"will be two tags, ``Thriller`` and ``Horror``. There is no way to put a "
"comma in the middle of a tag."
msgstr "De labels en auteurs velden hebben een speciale behandeling omdat beide velden meer dan één item kunnen vasthouden. Een boek kan vele labels en meerdere auteurs hebben. Als u opgeeft dat één van deze twee velden gewijzigd gaat worden, wordt de template resultaat onderzocht om te zien of meer dan één item is. Voor labels wordt het resultaat gescheiden waar Calibre een komma vindt. Bijvoorbeeld, als de template de waarde `` Thriller, Horror`` produceert, dan zal het resultaat twee labels zijn, ``Thriller`` en ``Horror``. Er is geen manier om een komma in het midden van een tag te zetten."

#: ../../__w/calibre/calibre/manual/template_lang.rst:835
msgid ""
"The same thing happens for authors, but using a different character for the "
"cut, a `&` (ampersand) instead of a comma. For example, if the template "
"produces the value ``Blogs, Joe&Posts, Susan``, then the book will end up "
"with two authors, ``Blogs, Joe`` and ``Posts, Susan``. If the template "
"produces the value ``Blogs, Joe;Posts, Susan``, then the book will have one "
"author with a rather strange name."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:837
msgid ""
"Plugboards affect the metadata written into the book when it is saved to "
"disk or written to the device. Plugboards do not affect the metadata used by"
" ``save to disk`` and ``send to device`` to create the file names. Instead, "
"file names are constructed using the templates entered on the appropriate "
"preferences window."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:840
msgid "Tips"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:842
msgid ""
"Use the Template Tester to test templates. Add the tester to the context "
"menu for books in the library and/or give it a keyboard shortcut."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:843
msgid ""
"Templates can use other templates by referencing composite columns built "
"with the desired template. Alternatively, you can use Stored Templates."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:844
msgid ""
"In a plugboard, you can set a field to empty (or whatever is equivalent to "
"empty) by using the special template ``{}``. This template will always "
"evaluate to an empty string."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:845
msgid ""
"The technique described above to show numbers even if they have a zero value"
" works with the standard field series_index."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:850
msgid "Function reference"
msgstr "Functie referentie"
