# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# Alex, 2016
# M. de Boer <de.boer.melle@gmail.com>, 2018-2019
# Meteor0id, 2019
# peter <klm@ditbenik.be>, 2021-2022
# math1985 <transifex@matthijsmelissen.nl>, 2016
# Volluta <volluta@tutanota.com>, 2016
# W.P.M.E. Hofland <wpme.hofland@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-21 15:47+0000\n"
"PO-Revision-Date: 2014-06-17 08:34+0000\n"
"Last-Translator: peter <klm@ditbenik.be>, 2021-2022\n"
"Language-Team: Dutch (http://app.transifex.com/calibre/calibre/language/nl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: nl\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../__w/calibre/calibre/manual/template_lang.rst:4
msgid "The calibre template language"
msgstr "De calibre sjabloontaal"

#: ../../__w/calibre/calibre/manual/template_lang.rst:6
msgid ""
"The calibre template language is a calibre-specific language used throughout"
" calibre for tasks such as specifying file paths, formatting values, and "
"computing the value for user-specified columns. Examples:"
msgstr "De calibre sjabloontaal is een calibre-eigen taal gebruikt doorheen calibre voor taken zoals specificeren van bestandspaden, opmaken van waarden en berekenen van de waarde voor gebruiker-gespecificeerde kolommen. Voorbeelden:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:8
msgid ""
"Specify the folder structure and file names when saving files from the "
"calibre library to the disk or e-book reader."
msgstr "Specificeer de mappenstructuur en bestandsnamen bij opslaan van bestanden van de calibre bibliotheek naar de schijf of e-boekreader."

#: ../../__w/calibre/calibre/manual/template_lang.rst:9
msgid "Define rules for adding icons and colors to the calibre book list."
msgstr "Definieer regels voor toevoegen van iconen en kleuren aan calibre's boekenlijst."

#: ../../__w/calibre/calibre/manual/template_lang.rst:10
msgid "Define `virtual columns` that contain data from other columns."
msgstr "Definieer `virtuele kolommen` die data bevatten van andere kolommen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:11
msgid "Advanced library searching."
msgstr "Geavanceerd bibliotheek zoeken."

#: ../../__w/calibre/calibre/manual/template_lang.rst:12
msgid "Advanced metadata search and replace."
msgstr "Geavanceerd metadata zoeken en vervangen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:14
msgid ""
"The language is built around the notion of a `template`, which specifies "
"which book metadata to use, computations on that metadata, and how it is to "
"be formatted."
msgstr "De taal is gebouwd rond het concept van een `sjabloon` die specificeert welke metadata te gebruiken, berekeningen op die metadata en hoe het opgemaakt moet worden."

#: ../../__w/calibre/calibre/manual/template_lang.rst:17
msgid "Basic templates"
msgstr "Basis sjablonen"

#: ../../__w/calibre/calibre/manual/template_lang.rst:19
msgid ""
"A basic template consists one or more ``template expressions``. A ``template"
" expression`` consists of text and names in curly brackets (``{}``) that is "
"replaced by the corresponding metadata from the book being processed. For "
"example, the default template in calibre used for saving books to device has"
" 4 ``template expressions``::"
msgstr "Een basissjabloon bestaat uit één of meer ``template expressions``. Een ``template expression`` bestaat uit tekst en namen tussen accolades (``{}``) die wordt vervangen door de overeenkomende metadata van het boek in verwerking. Bv. de standaard sjabloon in calibre gebruikt voor boeken naar toestel opslaan heeft vier ``template expressions``::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:23
msgid "For the book \"The Foundation\" by \"Isaac Asimov\" the  will become::"
msgstr "Voor het boek \"The Foundation\" door \"Isaac Asimov\" wordt dit::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:27
msgid ""
"The slashes are not ``template expressions`` because they are in between in "
"``{}``. Such text is left where it appears. For example, if the template "
"is::"
msgstr "De schuine strepen zijn geen ``template expressions`` omdat ze tussen ``{}`` staan. Zulke tekst blijft waar ie is. Bv., als de sjabloon is::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:31
msgid "then for \"The Foundation\" the template produces::"
msgstr "dan voor \"The Foundation\" produceert de sjabloon::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:35
msgid ""
"A ``template expression`` can access all the metadata available in calibre, "
"including custom columns (columns you create yourself), by using a column's "
"``lookup name``. To find the lookup name for a `column` (sometimes called "
"`fields`), hover your mouse over the column header in calibre's book list. "
"Lookup names for custom columns always begin with ``#``. For series type "
"columns there is an additional field named ``#lookup name_index`` that is "
"the series index for that book in the series. For example, if you have a "
"custom series column named ``#myseries``, there will also be a column named "
"``#myseries_index``. The standard series column's index is named "
"``series_index``."
msgstr "Een ``template expression`` heeft toegang tot alle metadata in calibre, inbegrepen aangepaste kolommen (kolommen die u zelf creëerde), door de kolom z'n ``lookup name`` te gebruiken. Om een `kolom` z'n lookup name te vinden (soms `velden` genaamd), zweef met uw muis over de kolom header in calibre's boekenlijst. Lookup names voor aangepaste kolommen beginnen altijd met ``#``. Voor reeks type kolommen is er een bijkomend veld genaamd ``#lookup name_index`` wat de serie index is voor dat boek in de serie. Bv., als u een aangepaste serie hebt genaamd ``#myseries`` dan zal er ook een kolom zijn genaamd ``#myseries_index``. De standaard serie kolom index heet ``series_index``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:37
msgid "In addition to the standard column based fields, you also can use:"
msgstr "Naast de kolom gebaseerde velden, kunt u gebruik maken van:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:39
msgid ""
"``{formats}`` - A list of formats available in the calibre library for a "
"book"
msgstr "``{formats}`` - Een lijst van formaten beschikbaar in de calibre bibliotheek voor een boek"

#: ../../__w/calibre/calibre/manual/template_lang.rst:40
msgid "``{identifiers:select(isbn)}`` - The ISBN of the book"
msgstr "``{identifiers:select(isbn)}`` - De ISBN van het boek"

#: ../../__w/calibre/calibre/manual/template_lang.rst:42
msgid ""
"If the metadata for the field for a given book is not defined then the field"
" in the template is replaced by the empty string (``''``). For example, "
"consider the following template::"
msgstr "Als de metadata voor het veld voor een bepaald boek niet gedefinieerd is wordt het veld in de sjabloon vervangen door de lege string (``''``). Bv. overweeg volgende sjabloon::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:46
msgid ""
"If Asimov's book \"Second Foundation\" is in the series \"Foundation\" then "
"the template produces::"
msgstr "Als Asimov's boek \"Second Foundation\" in de serie \"Foundation\" is dan geeft de sjabloon::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:50
msgid ""
"If a series has not been entered for the book then the template produces::"
msgstr "Als er voor een boek geen serie is ingevoerd geeft de sjabloon::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:54
msgid ""
"The template processor automatically removes multiple slashes and leading or"
" trailing spaces."
msgstr "De sjabloonverwerker verwijdert automatisch meerdere schuine strepen en voorloop en volg spaties."

#: ../../__w/calibre/calibre/manual/template_lang.rst:57
msgid "Advanced formatting"
msgstr "Geavanceerde opmaak"

#: ../../__w/calibre/calibre/manual/template_lang.rst:59
msgid ""
"In addition to metadata substitution, templates can conditionally include "
"additional text and control how substituted data is formatted."
msgstr "Bovenop metadatasubstitutie kunnen sjablonen voorwaardelijk extra tekst opnemen en de opmaak van gesubstitueerde gegevens controleren."

#: ../../__w/calibre/calibre/manual/template_lang.rst:61
msgid "**Conditionally including text**"
msgstr "**Voorwaardelijk tekst opnemen**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:63
msgid ""
"Sometimes you want text to appear in the output only if a field is not "
"empty. A common case is ``series`` and ``series_index`` where you want "
"either nothing or the two values separated by a hyphen. calibre handles this"
" case using a special ``template expression`` syntax."
msgstr "Soms wilt u dat tekst enkel in de uitvoer verschijnt als een veld niet leeg is. Een veel voorkomend geval is ``series`` en ``series_index`` waar u ofwel niets wil of de twee waarden gescheiden door een streepje. calibre doet dit via een speciale ``template expression`` syntaxis."

#: ../../__w/calibre/calibre/manual/template_lang.rst:65
msgid ""
"For example and using the above Foundation example, assume you want the "
"template to produce `Foundation - 3 - Second Foundation`. This template "
"produces that output:"
msgstr "Bv. met het Foundation voorbeeld van boven, veronderstel dat u wilt dat de sjabloon `Foundation - 3 - Second Foundation` geeft. Deze sjabloon geeft die uitvoer:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:67
msgid "``{series} - {series_index} - {title}``"
msgstr "``{series} - {series_index} - {title}``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:69
msgid ""
"However, if a book has no series the template will produce `- - the title`, "
"which is probably not what you want. Generally, people want the result be "
"the title without the extraneous hyphens. You can accomplish this using the "
"following template syntax:"
msgstr "Alhoewel, als een boek geen deel van een serie is, geeft de sjabloon  `- - de titel`, wat waarschijnlijk niet is wat u wilt. Gewoonlijk willen de mensen als resultaat de titel zonder extra streepjes. Dit kan met de volgende sjabloon syntaxis:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:71
msgid "``{field:|prefix_text|suffix_text}``"
msgstr "``{field:|prefix_text|suffix_text}``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:73
msgid ""
"This ``template expression`` says that if ``field`` has the value `XXXX` "
"then the result will be `prefix_textXXXXXsuffix_text`. If ``field`` is empty"
" (has no value) then the result will be the empty string (nothing) because "
"the prefix and suffix are ignored. The prefix and suffix can contain blanks."
msgstr "Deze ``template expression`` zegt dat als ``field`` de waarde `XXXX` heeft, het resultaat `prefix_textXXXXXsuffix_text` zal zijn. Als ``field`` leeg is (heeft geen waarde) dan zal het resultaat de lege string zijn (niets) omdat voor- en achtervoegsel genegeerd worden. Het voor- en achtervoegsel kunnen lege plekken hebben."

#: ../../__w/calibre/calibre/manual/template_lang.rst:75
msgid ""
"**Do not use subtemplates (`{ ... }`) or functions (see below) in the prefix"
" or the suffix.**"
msgstr "**Gebruik geen subsjablonen (`{ ... }`) of functies (zie onder) in het voor- of achtervoegsel.**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:77
msgid ""
"Using this syntax, we can solve the above no-series problem with the "
"template::"
msgstr "Met deze syntaxis kunnen we het geen-serie probleem boven oplossen met de sjabloon::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:81
msgid ""
"The hyphens will be included only if the book has a series index, which it "
"has only if it has a series. Continuing the Foundation example again, the "
"template will produce `Foundation - 1 - Second Foundation`."
msgstr "De streepjes komen er enkel bij als het boek een serie index heeft, die het enkel heeft als het deel van een serie is. Verder weer met het Foundation voorbeeld, de sjabloon geeft `Foundation - 1 - Second Foundation`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:83
#: ../../__w/calibre/calibre/manual/template_lang.rst:289
#: ../../__w/calibre/calibre/manual/template_lang.rst:438
msgid "Notes:"
msgstr "Aantekeningen:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:85
msgid ""
"You must include the colon after the ``lookup name`` if you are using a "
"prefix or a suffix."
msgstr "U moet een dubbel punt zetten na de ``lookup name`` als u een voor- of achtervoegsel gebruikt."

#: ../../__w/calibre/calibre/manual/template_lang.rst:86
msgid ""
"You must either use either no or both ``|`` characters. Using one, as in "
"``{field:| - }``, is not allowed."
msgstr "U moet ofwel beide ofwel geen ``|`` karakters gebruiken. Eén gebruiken, zoals in ``{field:| - }``, is niet toegelaten."

#: ../../__w/calibre/calibre/manual/template_lang.rst:87
msgid ""
"It is OK to provide no text for either the prefix or the suffix, such as in "
"``{series:|| - }``. The template ``{title:||}`` is the same as ``{title}``."
msgstr "Het is oké om geen tekst te voorzien voor voor- of achtervoegsel, zoals in ``{series:|| - }``. De sjabloon ``{title:||}`` is hetzelfde als ``{title}``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:89
msgid "**Formatting**"
msgstr "**Opmaak**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:91
msgid ""
"Suppose you want the ``series_index`` to be formatted as three digits with "
"leading zeros. This does the trick:"
msgstr "Veronderstel dat u ``series_index`` opgemaakt wilt als drie cijfers met voorloopnullen. Dit doet de truc:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:93
msgid "``{series_index:0>3s}`` - Three digits with leading zeros"
msgstr "``{series_index:0>3s}`` - Drie cijfers met voorloopnullen"

#: ../../__w/calibre/calibre/manual/template_lang.rst:95
msgid "For trailing zeros, use:"
msgstr "Voor volgnullen, gebruik:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:97
msgid "``{series_index:0<3s}`` - Three digits with trailing zeros"
msgstr "``{series_index:0<3s}`` - Drie cijfers met volgnullen"

#: ../../__w/calibre/calibre/manual/template_lang.rst:99
msgid ""
"If you use series indices with fractional values, e.g., 1.1, you might want "
"the decimal points to line up. For example, you might want the indices 1 and"
" 2.5 to appear as 01.00 and 02.50 so that they will sort correctly on a "
"device that does lexical sorting. To do this, use:"
msgstr "Als u reeksindexen gebruikt met fractionele waarden, bv. 1,1, hebt u de komma's misschien graag uitgelijnd. Bv. u hebt misschien graag dat indexen 1 en 2,5 eruit zien als 01,00 en 02,50 zodat ze correct sorteren op een toestel dat lexicaal sorteert. Om dit te doen, gebruik:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:101
msgid ""
"``{series_index:0>5.2f}`` - Five characters consisting of two digits with "
"leading zeros, a decimal point, then 2 digits after the decimal point."
msgstr "``{series_index:0>5.2f}`` - Vijf karakters bestaande uit twee cijfers met voorloopnullen, een komma en twee cijfers na de komma."

#: ../../__w/calibre/calibre/manual/template_lang.rst:103
msgid "If you want only the first two letters of the data, use:"
msgstr "Als u enkel de twee eerste letters van de data wil, gebruik:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:105
msgid ""
"``{author_sort:.2}`` - Only the first two letters of the author sort name"
msgstr "``{author_sort:.2}`` - Enkel de eerste twee letters van de auteursorteernaam"

#: ../../__w/calibre/calibre/manual/template_lang.rst:107
msgid ""
"Much of the calibre template language formatting comes from Python. For more"
" details on the syntax of these advanced formatting operations see the "
"`Python documentation "
"<https://docs.python.org/3/library/string.html#formatstrings>`_."
msgstr "Veel van de calibre sjabloontaalvormgeving komt van Python. Voor meer details over de syntaxis van deze geavanceerde vormgevingsoperaties zie de `Python documentatie <https://docs.python.org/3/library/string.html#formatstrings>`_."

#: ../../__w/calibre/calibre/manual/template_lang.rst:111
msgid "Using templates to define custom columns"
msgstr "Sjablonen gebruiken om aangepaste kolommen te definiëren"

#: ../../__w/calibre/calibre/manual/template_lang.rst:113
msgid ""
"Templates can be used to display information that isn't in calibre metadata,"
" or to display metadata differently from calibre's normal format. For "
"example, you might want to show the ``ISBN``, a field that calibre does not "
"display. You can accomplish this creating a custom column with the type "
"`Column built from other columns` (hereafter called `composite columns`) and"
" providing a template to generate the displayed text. The column will "
"display the result of evaluating the template. For example, to display the "
"ISBN, create the column and enter ``{identifiers:select(isbn)}`` in the "
"template box. To display a column containing the values of two series custom"
" columns, separated by a comma, use ``{#series1:||,}{#series2}``."
msgstr "Sjablonen kunnen gebruikt worden om informatie weer te geven niet in calibre's metadata of metadata afwijkend van calibre's gewone formaat. Bv. u wilt misschien het ``ISBN`` tonen, een veld dat calibre niet weergeeft. Dit kan door een aangepaste kolom te creëren van het type `Kolom gemaakt van andere kolommen` (hierna `samengestelde kolommen`) en een sjabloon te voorzien om de weer te geven tekst te genereren. De kolom geeft het resultaat weer van het evalueren van de sjabloon. Bv. om het ISBN weer te geven, creëer de kolom en voer ``{identifiers:select(isbn)}`` in in het sjabloon vak. Om een kolom weer te geven met de waardes van twee series aangepaste kolommen, gescheiden door een komma, gebruik ``{#series1:||,}{#series2}``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:115
msgid "Composite columns can use any template option, including formatting."
msgstr "Samengestelde kolommen kunnen elke sjabloonoptie gebruiken, inclusief opmaak."

#: ../../__w/calibre/calibre/manual/template_lang.rst:117
msgid ""
"Note: You cannot edit the data displayed in a composite column. Instead you "
"edit the source columns. If you edit a composite column, for example by "
"double-clicking it, calibre will open the template for editing, not the "
"underlying data."
msgstr "Nota: U kan data getoond in een samengestelde kolom niet bewerken. U moet de bronkolommen bewerken. Als u een samengestelde kolom bewerkt, bv. door erop dubbel te klikken, zal calibre de bewerksjabloon openen, niet de onderliggende data."

#: ../../__w/calibre/calibre/manual/template_lang.rst:121
msgid "Templates and plugboards"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:123
msgid ""
"Plugboards are used for changing the metadata written into books during "
"send-to-device and save-to-disk operations. A plugboard permits you to "
"specify a template to provide the data to write into the book's metadata. "
"You can use plugboards to modify the following fields: authors, author_sort,"
" language, publisher, tags, title, title_sort. This feature helps people who"
" want to use different metadata in books on devices to solve sorting or "
"display issues."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:125
msgid ""
"When you create a plugboard, you specify the format and device for which the"
" plugboard is to be used. A special device is provided, ``save_to_disk``, "
"that is used when saving formats (as opposed to sending them to a device). "
"Once you have chosen the format and device, you choose the metadata fields "
"to change, providing templates to supply the new values. These templates are"
" `connected` to their destination fields, hence the name `plugboards`. You "
"can of course use composite columns in these templates."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:127
msgid ""
"Plugboards are quite flexible and can be written in Single Function Mode, "
"Template Program Mode, General Program Mode, or Python Template mode."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:129
msgid ""
"When a plugboard might apply (Content server, save to disk, or send to "
"device), calibre searches the defined plugboards to choose the correct one "
"for the given format and device. For example, to find the appropriate "
"plugboard for an EPUB book being sent to an ANDROID device, calibre searches"
" the plugboards using the following search order:"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:133
msgid ""
"a plugboard with an exact match on format and device, e.g., ``EPUB`` and "
"``ANDROID``"
msgstr "een adapter met een exacte overeenkomst op formaat en toestel, bv. ``EPUB`` en ``ANDROID``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:134
msgid ""
"a plugboard with an exact match on format and the special ``any device`` "
"choice, e.g., ``EPUB`` and ``any device``"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:135
msgid ""
"a plugboard with the special ``any format`` choice and an exact match on "
"device, e.g., ``any format`` and ``ANDROID``"
msgstr "een adapter met de speciale ``any format`` keuze en een exacte overeenkomst op toestel, bv. ``any format`` en ``ANDROID``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:136
msgid "a plugboard with ``any format`` and ``any device``"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:138
msgid ""
"The tags and authors fields have special treatment, because both of these "
"fields can hold more than one item. A book can have many tags and many "
"authors. When you specify that one of these two fields is to be changed, the"
" template's result is examined to see if more than one item is there. For "
"tags, the result is cut apart wherever calibre finds a comma. For example, "
"if the template produces the value ``Thriller, Horror``, then the result "
"will be two tags, ``Thriller`` and ``Horror``. There is no way to put a "
"comma in the middle of a tag."
msgstr "De labels en auteurs velden hebben een speciale behandeling omdat beide velden meer dan één item kunnen vasthouden. Een boek kan vele labels en meerdere auteurs hebben. Als u opgeeft dat één van deze twee velden gewijzigd gaat worden, wordt de template resultaat onderzocht om te zien of meer dan één item is. Voor labels wordt het resultaat gescheiden waar Calibre een komma vindt. Bijvoorbeeld, als de template de waarde `` Thriller, Horror`` produceert, dan zal het resultaat twee labels zijn, ``Thriller`` en ``Horror``. Er is geen manier om een komma in het midden van een tag te zetten."

#: ../../__w/calibre/calibre/manual/template_lang.rst:141
msgid ""
"The same thing happens for authors, but using a different character for the "
"cut, a `&` (ampersand) instead of a comma. For example, if the template "
"produces the value ``Blogs, Joe&Posts, Susan``, then the book will end up "
"with two authors, ``Blogs, Joe`` and ``Posts, Susan``. If the template "
"produces the value ``Blogs, Joe;Posts, Susan``, then the book will have one "
"author with a rather strange name."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:143
msgid ""
"Plugboards affect the metadata written into the book when it is saved to "
"disk or written to the device. Plugboards do not affect the metadata used by"
" ``save to disk`` and ``send to device`` to create the file names. Instead, "
"file names are constructed using the templates entered on the appropriate "
"preferences window."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:148
msgid "Using functions in templates - Single Function Mode"
msgstr "Functies gebruiken in sjablonen - Eén Functie Modus"

#: ../../__w/calibre/calibre/manual/template_lang.rst:150
msgid ""
"Suppose you want to display the value of a field in upper case when that "
"field is normally in title case. You can do this using `template functions`."
" For example, to display the title in upper case use the ``uppercase`` "
"function, as in ``{title:uppercase()}``. To display it in title case, use "
"``{title:titlecase()}``."
msgstr "Veronderstel dat u de waarde van een veld in hoofdletters wil tonen wanneer dat veld normaal elk woord met beginhoofdletter toont. Dit kan met `sjabloonfuncties`. Bv., om de titel in hoofdletters te tonen, gebruik de ``uppercase`` functie, zoals in ``{title:uppercase()}``. Om met beginhoofdletters te tonen, gebruik ``{title:titlecase()}``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:152
msgid ""
"Functions go into the format part of the template, after the ``:`` and "
"before the first ``|`` or the closing ``}`` if no prefix/suffix is used. If "
"you have both a format and a function reference, the function comes after a "
"second ``:``.  Functions return the value of the column specified in the "
"template, suitably modified."
msgstr "Functies gaan in het formaat deel van de sjabloon, na de ``:`` en voor de eerste ``|`` of de sluit ``}`` als geen voor- of achtervoegsel is gebruikt. Als u zowel een formaat als een functie referentie hebt, komt de functie na een tweede ``:``.  Functies geven de waarde terug van de kolom gespecificeerd in de sjabloon, gepast gewijzigd."

#: ../../__w/calibre/calibre/manual/template_lang.rst:154
msgid "The syntax for using functions is one of::"
msgstr "De syntaxis voor gebruik van functies is een van::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:161
msgid ""
"Function names must always be followed by opening and closing parentheses. "
"Some functions require extra values (arguments), and these go inside the "
"parentheses. Arguments are separated by commas. Literal commas (commas as "
"text, not argument separators) must be preceded by a backslash (``\\``) . "
"The last (or only) argument cannot contain a textual closing parenthesis."
msgstr "Functienamen moeten altijd gevolgd worden door open/sluithaakjes. Sommige functies hebben extra waarden (argumenten) nodig en deze staan tussen de haakjes. Argumenten worden gescheiden door komma's. Letterlijke komma's (als tekst, niet als argumenten scheiders) moeten vooraf gegaan worden door een achteroverhellend streepje (``\\``). Het laatste (of enige) argument kan geen tekstueel sluithaakje bevatten."

#: ../../__w/calibre/calibre/manual/template_lang.rst:163
msgid ""
"Functions are evaluated before format specifications and the prefix/suffix. "
"See further down for an example of using both a format and a function."
msgstr "Functies worden geëvalueerd voor formaat specificaties en het voor-/achtervoegsel. Kijk verder beneden voor een voorbeeld van gebruik van zowel een formaat als een functie."

#: ../../__w/calibre/calibre/manual/template_lang.rst:165
msgid ""
"**Important**: If you have programming experience, please note that the "
"syntax in `Single Function Mode` is not what you expect. Strings are not "
"quoted and spaces are significant. All arguments are considered to be "
"constants; there are no expressions."
msgstr "**Belangrijk**: Als u programmeerervaring hebt, hou er a.u.b. rekening mee dat de syntaxis in `Eén Functie Modus` niet is wat u verwacht. Strings hebben geen aanhalingstekens en spaties zijn belangrijk. Alle argumenten worden gezien als contanten; er zijn geen expressies."

#: ../../__w/calibre/calibre/manual/template_lang.rst:167
msgid ""
"**Do not use subtemplates (`{ ... }`) as function arguments.** Instead, use "
":ref:`Template Program Mode <template_mode>` and :ref:`General Program Mode "
"<general_mode>`."
msgstr "**Gebruik geen subsjablonen (`{ ... }`) als functie argumenten.** In plaats daarvan, gebruik :ref:`Sjabloon Programma Modus <template_mode>` en :ref:`Algemene Programma Modus <general_mode>`."

#: ../../__w/calibre/calibre/manual/template_lang.rst:169
msgid "Notes on calling functions in Single Function Mode:"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:171
msgid ""
"When functions are used in Single Function Mode, the first parameter, "
"``value``, is automatically replaced by the content of the field specified "
"in the template. For example, when the template ``{title:capitalize()}`` is "
"processed, the content of the ``title`` field is passed as the parameter "
"``value`` to the capitalize function."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:172
msgid ""
"In the function documentation, the notation ``[something]*`` means that "
"``something`` can be repeated zero or more times. The notation "
"``[something]+`` means that the ``something`` is repeated one or more times "
"(must exist at least one time)."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:173
msgid ""
"Some functions use regular expressions. In the template language regular "
"expression matching is case-insensitive."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:175
msgid ""
"Functions are documented in :ref:`template_functions_reference`. The "
"documentation tells you what arguments the functions require and what the "
"functions do. For example, here is the documentation of the "
":ref:`ff_ifempty` function."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:179
msgid ""
"You see that the function requires two arguments, ``value`` and "
"``text_if_empty``. However, because we are using Single Function Mode, we "
"omit the ``value`` argument, passing only ``text_if_empty``. For example, "
"this template::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:183
msgid ""
"shows the tags for a book, if any. If it has no tags then it show `No tags "
"on this book`."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:185
msgid ""
"The following functions are usable in Single Function Mode because their "
"first parameter is ``value``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:225
msgid "**Using functions and formatting in the same template**"
msgstr "**Functies en opmaak gebruiken in dezelfde sjabloon**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:227
msgid ""
"Suppose you have an integer custom column ``#myint`` that you want displayed"
" with leading zeros, as in ``003``. One way to do this is to use a format of"
" ``0>3s``. However, by default if a number (integer or float) equals zero "
"then the value is displayed as the empty string so zero values will produce "
"the empty string, not ``000``. If you want to see ``000`` values then you "
"use both the format string and the ``ifempty`` function to change the empty "
"value back to a zero. The template would be::"
msgstr "Veronderstel, u hebt een aangepaste kolom met gehele getallen ``#myint`` die u wilt weergeven met voorloopnullen, zoals in ``003``. Een manier om dit te doen is met het formaat ``003``. Hoewel, standaard, als een getal (geheel of decimaal) gelijk is aan nul wordt de waarde getoond als de lege string dus nul waardes geven de lege string, niet ``000``. Als u ``000`` waardes wilt zien, gebruikt u zowel de formaat string als de  ``ifempty`` functie om de lege waarde terug op nul te zetten. De sjabloon wordt::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:231
msgid ""
"Note that you can use the prefix and suffix as well. If you want the number "
"to appear as ``[003]`` or ``[000]``, then use the template::"
msgstr "Merk op dat u zowel het voor- als het achtervoegsel kan gebruiken. Als u wil dat het getal verschijnt als ``[003]`` of ``[000]``, gebruik dan de sjabloon:: "

#: ../../__w/calibre/calibre/manual/template_lang.rst:238
msgid "General Program Mode"
msgstr "Algemene Programma Modus"

#: ../../__w/calibre/calibre/manual/template_lang.rst:240
msgid ""
"`General Program Mode` (`GPM`) replaces `template expressions` with a "
"program written in the `template language`. The syntax of the language is "
"defined by the following grammar::"
msgstr "`Algemene Programma Modus` (`APM`) vervangt `sjabloonexpressies` door een programma geschreven in de `sjabloontaal`. De syntaxis van de taal is gedefinieerd door de volgende grammatica::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:291
msgid ""
"a ``top_expression`` always has a value. The value of an ``expression_list``"
" is the value of the last ``top_expression`` in the list. For example, the "
"value of the expression list ``1;2;'foobar';3`` is ``3``."
msgstr "een ``top_expression`` heeft altijd een waarde. De waarde van een ``expression_list`` is de waarde van de laatste ``top_expression`` in de lijst. Bv. de waarde van de expressielijst ``1;2;'foobar';3`` is ``3``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:292
msgid "In a logical context, any non-empty value is ``True``"
msgstr "In een logische context is elke niet-lege waarde ``True``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:293
msgid "In a logical context, the empty value is ``False``"
msgstr "In een logische context is de lege waarde ``False``"

#: ../../__w/calibre/calibre/manual/template_lang.rst:294
msgid ""
"Strings and numbers can be used interchangeably. For example, ``10`` and "
"``'10'`` are the same thing."
msgstr "Strings en getallen kunnen door elkaar gebruikt worden. Bv. ``10`` en ``'10'`` zijn identiek."

#: ../../__w/calibre/calibre/manual/template_lang.rst:295
msgid ""
"Comments are lines starting with a '#' character. Comments beginning later "
"in a line are not supported."
msgstr "Commentaar zijn regels die beginnen met '#'. Commentaar verder in de regel wordt niet ondersteund."

#: ../../__w/calibre/calibre/manual/template_lang.rst:297
msgid "**Operator precedence**"
msgstr "**Operator voorrang**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:299
msgid ""
"The operator precedence (order of evaluation) from highest (evaluated first)"
" to lowest (evaluated last) is:"
msgstr "De operator voorrang (volgorde van evalueren) van hoogste (eerst geëvalueerd) naar laagste (laatst geëvalueerd) is:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:301
msgid ""
"Function calls, constants, parenthesized expressions, statement expressions,"
" assignment expressions, field references."
msgstr "Functie aanroep, constanten, uitdrukkingen tussen haakjes, instructie-expressies, opdracht-expressies, veldreferenties."

#: ../../__w/calibre/calibre/manual/template_lang.rst:302
msgid ""
"Unary plus (``+``) and minus (``-``). These operators evaluate right to "
"left."
msgstr "Unary plus (``+``) en min (``-``). Deze operatoren evalueren van rechts naar links."

#: ../../__w/calibre/calibre/manual/template_lang.rst:304
msgid ""
"These and all the other arithmetic operators return integers if the "
"expression results in a fractional part equal to zero. For example, if an "
"expression returns ``3.0`` it is changed to ``3``."
msgstr "Deze en alle andere rekenkundige operatoren geven integers terug als het resultaat van de expressie een fractioneel deel gelijk aan nul is. Bv. als een expressie ``3.0`` terug geeft, wordt dit veranderd in ``3``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:305
msgid ""
"Multiply (``*``) and divide (``/``). These operators are associative and "
"evaluate left to right. Use parentheses if you want to change the order of "
"evaluation."
msgstr "Vermenigvuldigen (``*``) en delen (``/``). Deze operatoren zijn associatief en evalueren van links naar rechts. Gebruik haakjes als u de volgorde van evaluatie wilt veranderen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:306
msgid ""
"Add (``+``) and subtract (``-``). These operators are associative and "
"evaluate left to right."
msgstr "Optellen (``+``) en aftrekken (``-``). Deze operatoren zijn associatief en evalueren van links naar rechts."

#: ../../__w/calibre/calibre/manual/template_lang.rst:307
msgid ""
"Numeric and string comparisons. These operators return ``'1'`` if the "
"comparison succeeds, otherwise the empty string (``''``). Comparisons are "
"not associative: ``a < b < c`` is a syntax error."
msgstr "Numerieke en string vergelijkingen. Deze operatoren geven ``'1'`` terug als de vergelijking door gaat, anders de lege string (``''``). Vergelijkingen zijn niet associatief: ``a < b < c`` is  een syntaxis fout."

#: ../../__w/calibre/calibre/manual/template_lang.rst:308
msgid ""
"String concatenation (``&``). The ``&`` operator returns a string formed by "
"concatenating the left-hand and right-hand expressions. Example: ``'aaa' & "
"'bbb'`` returns ``'aaabbb'``. The operator is associative and evaluates left"
" to right."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:309
msgid ""
"Unary logical not (``!``). This operator returns ``'1'`` if the expression "
"is False (evaluates to the empty string), otherwise ``''``."
msgstr "Unary logisch niet (``!``). Deze operator geeft ``'1'`` terug als de expressie Vals is (evalueert naar de lege string), anders ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:310
msgid ""
"Logical and (``&&``). This operator returns '1' if both the left-hand and "
"right-hand expressions are True, or the empty string ``''`` if either is "
"False. It is associative, evaluates left to right, and does `short-"
"circuiting <https://chortle.ccsu.edu/java5/Notes/chap40/ch40_2.html>`_."
msgstr "Logisch en (``&&``). Deze operator geeft '1' terug als zowel de linker- als de rechter-kant expressies Waar zijn, of de lege string ``''`` als een van beide Vals is. Het is associatief, evalueert van links naar rechts en doet aan `kort-sluiten <https://chortle.ccsu.edu/java5/Notes/chap40/ch40_2.html>`_."

#: ../../__w/calibre/calibre/manual/template_lang.rst:311
msgid ""
"Logical or (``||``). This operator returns ``'1'`` if either the left-hand "
"or right-hand expression is True, or ``''`` if both are False. It is "
"associative, evaluates left to right, and does `short-circuiting "
"<https://chortle.ccsu.edu/java5/Notes/chap40/ch40_2.html>`_. It is an "
"`inclusive or`, returning ``'1'`` if both the left- and right-hand "
"expressions are True."
msgstr "Logische of (``||``). Deze operator geeft ``'1'`` terug als ofwel de linker- ofwel de rechterkant expressie Waar is, of ``''`` als beide Vals zijn. Hij is associatief, evalueert van links naar rechts en doet aan `kort-sluiten <https://chortle.ccsu.edu/java5/Notes/chap40/ch40_2.html>`_. Het is een `inclusieve of`, geeft ``'1'`` terug als zowel de linker- en rechterkant expressies Waar zijn."

#: ../../__w/calibre/calibre/manual/template_lang.rst:313
msgid "**Field references**"
msgstr "**Veldreferenties**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:315
msgid ""
"A ``field_reference`` evaluates to the value of the metadata field named by "
"lookup name that follows the ``$`` or ``$$``. Using ``$`` is equivalent to "
"using the :ref:`ff_field` function. Using ``$$`` is equivalent to using the "
":ref:`ff_raw_field` function. Examples::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:322
msgid "**If expressions**"
msgstr "**If expressies**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:324
msgid ""
"``If`` expressions first evaluate the ``condition``. If the ``condition`` is"
" True (a non-empty value) then the ``expression_list`` in the ``then`` "
"clause is evaluated. If it is False then if present the ``expression_list`` "
"in the ``elif`` or ``else`` clause is evaluated. The ``elif`` and ``else`` "
"parts are optional. The words ``if``, ``then``, ``elif``, ``else``, and "
"``fi`` are reserved; you cannot use them as identifier names. You can put "
"newlines and white space wherever they make sense. The ``condition`` is a "
"``top_expression`` not an ``expression_list``; semicolons are not allowed. "
"The ``expression_lists`` are semicolon-separated sequences of "
"``top_expressions``. An ``if`` expression returns the result of the last "
"``top_expression`` in the evaluated ``expression_list``, or the empty string"
" if no expression list was evaluated."
msgstr "``If`` expressies evalueren eerst de ``condition``. Als de ``condition`` Waar is (een niet-lege waarde) wordt de ``expression_list`` in de ``then`` clausule geëvalueerd. Als ze Onwaar is wordt, indien aanwezig, de ``expression_list`` in de ``elif`` of ``else`` clausule geëvalueerd. De ``elif`` en ``else`` delen zijn optioneel. De woorden ``if``, ``then``, ``elif``, ``else``, en ``fi`` zijn gereserveerd; U kan ze niet gebruiken als identificator namen. U kan nieuwe regels en spaties zetten overal waar het zin heeft. De ``condition`` is een ``top_expression`` geen ``expression_list``; puntkomma's zijn niet toegelaten. De ``expression_lists`` zijn puntkomma gescheiden reeksen met ``top_expressions``. Een ``if`` expressie geeft het resultaat terug van de laatste ``top_expression`` in de geëvalueerde ``expression_list``, of de lege string als geen expressie lijst werd geëvalueerd."

#: ../../__w/calibre/calibre/manual/template_lang.rst:326
msgid "Examples::"
msgstr "Voorbeelden::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:339
msgid "Nested ``if`` example::"
msgstr "Genest ``if`` voorbeeld::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:352
msgid ""
"As said above, an ``if`` produces a value. This means that all the following"
" are equivalent::"
msgstr "Zoals boven gezegd, een ``if`` geeft een waarde. Dat betekent dat al de volgenden equivalent zijn::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:358
msgid ""
"For example, this program returns the value of the ``series`` column if the "
"book has a series, otherwise the value of the ``title`` column::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:362
msgid "**For expressions**"
msgstr "**For expressies**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:364
msgid ""
"The ``for`` expression iterates over a list of values, processing them one "
"at a time. The ``list_expression`` must evaluate either to a metadata field "
"``lookup name`` e.g., ``tags`` or ``#genre``, or to a list of values. The "
":ref:`ff_range` generates a list of numbers. If the result is a valid "
"``lookup name`` then the field's value is fetched and the separator "
"specified for that field type is used. If the result isn't a valid lookup "
"name then it is assumed to be a list of values. The list is assumed to be "
"separated by commas unless the optional keyword ``separator`` is supplied, "
"in which case the list values must be separated by the result of evaluating "
"the ``separator_expr``. A separator cannot be used if the list is generated "
"by ``range()``. Each value in the list is assigned to the specified variable"
" then the ``expression_list`` is evaluated. You can use ``break`` to jump "
"out of the loop, and ``continue`` to jump to the beginning of the loop for "
"the next iteration."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:366
msgid ""
"Example: This template removes the first hierarchical name for each value in"
" Genre (``#genre``), constructing a list with the new names::"
msgstr "Voorbeeld: Deze sjabloon verwijdert de eerste hiërarchische naam voor elke waarde in Genre (``#genre``), een lijst opbouwend met de nieuwe namen::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:376
msgid ""
"If the original Genre is `History.Military, Science Fiction.Alternate "
"History, ReadMe` then the template returns `Military, Alternate History, "
"ReadMe`. You could use this template in calibre's :guilabel:`Edit metadata "
"in bulk -> Search & replace` with :guilabel:`Search for` set to ``template``"
" to strip off the first level of the hierarchy and assign the resulting "
"value to Genre."
msgstr "Als het originele Genre `History.Military, Science Fiction.Alternate History, ReadMe` is dan geeft de sjabloon `Military, Alternate History, ReadMe` terug. U kan deze sjabloon gebruiken in calibre's :guilabel:`Metadata bewerken in bulk -> Zoeken & vervangen` met :guilabel:`Zoeken naar` ingesteld op ``template`` om het eerste niveau van de hiërarchie te verwijderen en de resulterende waarde aan Genre toe te wijzen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:379
msgid ""
"Note: the last line in the template, ``new_tags``, isn't strictly necessary "
"in this case because ``for`` returns the value of the last top_expression in"
" the expression list. The value of an assignment is the value of its "
"expression, so the value of the ``for`` statement is what was assigned to "
"``new_tags``."
msgstr "Merk op: de laatste regel in de sjabloon, ``new_tags``, is niet strikt nodig in dit geval omdat ``for`` de waarde van de laatste top_expression terug geeft in de expressie lijst. De waarde van een opdracht is de waarde van zijn expressie, dus de waarde van het ``for`` bericht is wat was toegewezen aan ``new_tags``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:381
msgid "**Function definition**"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:383
msgid ""
"If you have repeated code in a template then you can put that code into a "
"local function. The ``def`` keyword starts the definition. It is followed by"
" the function name, the argument list, then the code in the function. The "
"function definition ends with the ``fed`` keyword."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:385
msgid ""
"Arguments are positional. When a function is called the supplied arguments "
"are matched left to right against the defined parameters, with the value of "
"the argument assigned to the parameter. It is an error to provide more "
"arguments than defined parameters. Parameters can have default values, such "
"as ``a = 25``. If an argument is not supplied for that parameter then the "
"default value is used, otherwise the parameter is set to the empty string."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:387
msgid "The ``return`` statement can be used in a local function."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:389
msgid "A function must be defined before it can be used."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:391
msgid ""
"Example: This template computes an approximate duration in years, months, "
"and days from a number of days. The function ``to_plural()`` formats the "
"computed values. Note that the example also uses the ``&`` operator::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:406
msgid "**Relational operators**"
msgstr "**Relationele operatoren**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:408
msgid ""
"Relational operators return ``'1'`` if the comparison is true, otherwise the"
" empty string (``''``)."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:410
msgid ""
"There are two forms of relational operators: string comparisons and numeric "
"comparisons."
msgstr "Er zijn twee soorten relationele operatoren: string vergelijkingen en numerieke vergelijkingen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:412
msgid ""
"String comparisons do case-insensitive string comparison using lexical "
"order. The supported string comparison operators are ``==``, ``!=``, ``<``, "
"``<=``, ``>``, ``>=``, ``in``, ``inlist``, and ``inlist_field``. For the "
"``in`` operator, the result of the left hand expression is interpreted as a "
"regular expression pattern. The ``in`` operator is True if the value of "
"left-hand regular expression matches the value of the right hand expression."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:415
msgid ""
"The ``inlist`` operator is true if the left hand regular expression matches "
"any one of the items in the right hand list where the items in the list are "
"separated by commas. The ``inlist_field`` operator is true if the left hand "
"regular expression matches any of the items in the field (column) named by "
"the right hand expression, using the separator defined for the field. NB: "
"the ``inlist_field`` operator requires the right hand expression to evaluate"
" to a field name, while the ``inlist`` operator requires the right hand "
"expression to evaluate to a string containing a comma-separated list. "
"Because of this difference, ``inlist_field`` is substantially faster than "
"``inlist`` because no string conversions or list constructions are done. The"
" regular expressions are case-insensitive."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:417
msgid ""
"The numeric comparison operators are ``==#``, ``!=#``, ``<#``, ``<=#``, "
"``>#``, ``>=#``. The left and right expressions must evaluate to numeric "
"values with two exceptions: both the string value \"None\" (undefined field)"
" and the empty string evaluate to the value zero."
msgstr "De numerieke vergelijkingsoperatoren zijn ``==#``, ``!=#``, ``<#``, ``<=#``, ``>#``, ``>=#``. De links en rechts expressies moeten evalueren naar numerieke waarden met twee uitzonderingen: zowel de string waarde \"None\" (niet gedefinieerd veld) en de lege string evalueren naar de waarde nul."

#: ../../__w/calibre/calibre/manual/template_lang.rst:419
msgid "Examples:"
msgstr "Voorbeelden:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:421
msgid ""
"``program: field('series') == 'foo'`` returns ``'1'`` if the book's series "
"is `foo`, otherwise ``''``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:422
msgid ""
"``program: 'f.o' in field('series')`` returns ``'1'`` if the book's series "
"matches the regular expression ``f.o`` (e.g., `foo`, `Off Onyx`, etc.), "
"otherwise ``''``."
msgstr "``program: 'f.o' in field('series')`` geeft ``'1'`` terug als het boek z'n serie overeenkomt met de reguliere expressie ``f.o`` (bv., `foo`, `Off Onyx`, enz.), anders ``''``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:423
msgid ""
"``program: 'science' inlist $#genre`` returns ``'1'`` if any of the values "
"retrieved from the book's genres match the regular expression ``science``, "
"e.g., `Science`, `History of Science`, `Science Fiction` etc., otherwise "
"``''``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:424
msgid ""
"``program: '^science$' inlist $#genre`` returns ``'1'`` if any of the book's"
" genres exactly match the regular expression ``^science$``, e.g., `Science`,"
" otherwise ``''``. The genres `History of Science` and `Science Fiction` "
"don't match."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:425
msgid ""
"``program: 'asimov' inlist $authors`` returns ``'1'`` if any author matches "
"the regular expression ``asimov``, e.g., `Asimov, Isaac` or `Isaac Asimov`, "
"otherwise ``''``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:426
msgid ""
"``program: 'asimov' inlist_field 'authors'`` returns ``'1'`` if any author "
"matches the regular expression ``asimov``, e.g., `Asimov, Isaac` or `Isaac "
"Asimov`, otherwise ``''``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:427
msgid ""
"``program: 'asimov$' inlist_field 'authors'`` returns ``'1'`` if any author "
"matches the regular expression ``asimov$``, e.g., `Isaac Asimov`, otherwise "
"``''``. It doesn't match `Asimov, Isaac` because of the ``$`` anchor in the "
"regular expression."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:428
msgid ""
"``program: if field('series') != 'foo' then 'bar' else 'mumble' fi`` returns"
" ``'bar'`` if the book's series is not `foo`. Otherwise it returns "
"``'mumble'``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:429
msgid ""
"``program: if field('series') == 'foo' || field('series') == '1632' then "
"'yes' else 'no' fi`` returns ``'yes'`` if series is either `foo` or `1632`, "
"otherwise ``'no'``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:430
msgid ""
"``program: if '^(foo|1632)$' in field('series') then 'yes' else 'no' fi`` "
"returns ``'yes'`` if series is either `foo` or `1632`, otherwise ``'no'``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:431
msgid ""
"``program: if 11 > 2 then 'yes' else 'no' fi`` returns ``'no'`` because the "
"``>`` operator does a lexical comparison."
msgstr "``program: if 11 > 2 then 'yes' else 'no' fi`` geeft ``'no'`` omdat de ``>`` operator een lexicale vergelijking doet."

#: ../../__w/calibre/calibre/manual/template_lang.rst:432
msgid ""
"``program: if 11 ># 2 then 'yes' else 'no' fi`` returns ``'yes'`` because "
"the ``>#`` operator does a numeric comparison."
msgstr "``program: if 11 ># 2 then 'yes' else 'no' fi`` geeft ``'yes'`` terug omdat de ``>#`` operator een numerieke vergelijking doet."

#: ../../__w/calibre/calibre/manual/template_lang.rst:434
msgid "**Functions in General Program Mode**"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:436
msgid ""
"See :ref:`template_functions_reference` for the list of functions built into"
" the template language."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:440
msgid ""
"As opposed to :ref:`Single Function Mode <single_mode>`, in General Program "
"Mode you must specify the first parameter ``value``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:441
msgid "All parameters are expression_lists (see the grammar above)."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:446
msgid "More complex programs in template expressions - Template Program Mode"
msgstr "Meer complexe programma's in sjabloonexpressies - Sjabloon Programma Modus"

#: ../../__w/calibre/calibre/manual/template_lang.rst:448
msgid ""
"`Template Program Mode` (`TPM`) is a blend of :ref:`General Program Mode "
"<general_mode>` and :ref:`Single Function Mode <single_mode>`. `TPM` differs"
" from Single Function Mode in that it permits writing template expressions "
"that refer to other metadata fields, use nested functions, modify variables,"
" and do arithmetic. It differs from `General Program Mode` in that the "
"template is contained between ``{`` and ``}`` characters and doesn't begin "
"with the word ``program:``. The program portion of the template is a General"
" Program Mode expression list."
msgstr "`Sjabloon Programma Modus` (`SPM`) is een mengeling van :ref:`Algemene Programma Modus <general_mode>` en :ref:`Eén Functie Modus <single_mode>`. `TPM` verschilt van Eén Functie Modus in dat het toelaat sjabloon expressies te schrijven die verwijzen naar andere metadata velden, geneste functies gebruikt, variabelen wijzigt, en rekenkunde doet. Het verschilt van `Algemene Programma Modus` in dat de sjabloon gevat wordt tussen ``{`` en ``}`` karakters en niet begint met het woord ``program:``. Het programma deel van de sjabloon is een Algemene Programma Modus expressie lijst."

#: ../../__w/calibre/calibre/manual/template_lang.rst:451
msgid ""
"Example: assume you want a template to show the series for a book if it has "
"one, otherwise show the value of a custom field #genre. You cannot do this "
"in the :ref:`Single Function Mode <single_mode>` because you cannot make "
"reference to another metadata field within a template expression. In `TPM` "
"you can, as the following expression demonstrates::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:456
msgid "The example shows several things:"
msgstr "Het voorbeeld toont meerdere dingen:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:458
msgid ""
"`TPM` is used if the expression begins with ``:'`` and ends with ``'}``. "
"Anything else is assumed to be in :ref:`Single Function Mode <single_mode>`."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:460
msgid ""
"If the template contains a prefix and suffix, the expression ends with "
"``'|`` where the ``|`` is the delimiter for the prefix. Example::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:464
msgid ""
"Functions must be given all their arguments. For example, the standard "
"built-in functions must be given the initial parameter ``value``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:465
msgid ""
"The variable ``$`` is usable as the ``value`` argument and stands for the "
"value of the field named in the template, ``series_index`` in this case."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:466
msgid "white space is ignored and can be used anywhere within the expression."
msgstr "spaties worden genegeerd en kunnen eender waar in de expressie gebruikt worden"

#: ../../__w/calibre/calibre/manual/template_lang.rst:467
msgid ""
"constant strings are enclosed in matching quotes, either ``'`` or ``\"``."
msgstr "constante strings zijn omringd door overeenkomende aanhalingstekens, ofwel ``'`` ofwel ``\"``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:469
msgid ""
"In `TPM`, using ``{`` and ``}`` characters in string literals can lead to "
"errors or unexpected results because they confuse the template processor. It"
" tries to treat them as template expression boundaries, not characters. In "
"some but not all cases you can replace a ``{`` with ``[[`` and a ``}`` with "
"`]]`. Generally, if your program contains ``{`` and ``}`` characters then "
"you should use `General Program Mode`."
msgstr "In `TPM`, met ``{`` en ``}`` karakters in string literals kan leiden tot fouten of onverwachte resultaten omdat ze de sjabloonprocessor in verwarring brengen. Het probeert ze te behandelen als sjabloon expressie grenzen, niet karakters. In sommige maar niet alle gevallen kan u een ``{`` vervangen door ``[[`` en een ``}`` door `]]`. In het algemeen, als uw programma ``{`` en ``}`` karakters bevat, moet u `Algemene Programma Modus` gebruiken."

#: ../../__w/calibre/calibre/manual/template_lang.rst:474
msgid "Python Template Mode"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:476
msgid ""
"Python Template Mode (PTM) lets you write templates using native Python and "
"the `calibre API <https://manual.calibre-ebook.com/develop.html#api-"
"documentation-for-various-parts-of-calibre>`_. The database API will be of "
"most use; further discussion is beyond the scope of this manual. PTM "
"templates are faster and can do more complicated operations but you must "
"know how to write code in Python using the calibre API."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:478
msgid "A PTM template begins with:"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:496
msgid ""
"You can add the above text to your template using the context menu, usually "
"accessed with a right click. The comments are not significant and can be "
"removed. You must use python indenting."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:498
msgid ""
"The context object supports ``str(context)`` that returns a string of the "
"context's contents, and ``context.attributes`` that returns a list of the "
"attribute names in the context."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:500
msgid ""
"The ``context.funcs`` attribute allows calling Built-in and User template "
"functions, and Stored GPM/Python templates, so that you can execute them "
"directly in your code. The functions are retrieved using their names. If the"
" name conflicts with a Python keyword, add an underscore to the end of the "
"name. Examples:"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:507
msgid ""
"Here is an example of a PTM template that produces a list of all the authors"
" for a series. The list is stored in a `Column built from other columns, "
"behaves like tags`. It shows in :guilabel:`Book details` and has the "
":guilabel:`on separate lines` checked (in :guilabel:`Preferences->Look & "
"feel->Book details`). That option requires the list to be comma-separated. "
"To satisfy that requirement the template converts commas in author names to "
"semicolons then builds a comma-separated list of authors. The authors are "
"then sorted, which is why the template uses author_sort."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:528
msgid "The output in :guilabel:`Book details` looks like this:"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:530
msgid "E-book conversion dialog"
msgstr "E-boek conversie dialoog"

#: ../../__w/calibre/calibre/manual/template_lang.rst:536
msgid "Stored templates"
msgstr "Opgeslagen sjablonen"

#: ../../__w/calibre/calibre/manual/template_lang.rst:538
msgid ""
"Both :ref:`General Program Mode <general_mode>` and :ref:`Python Template "
"Mode <python_mode>` support saving templates and calling those templates "
"from another template, much like calling stored functions. You save "
"templates using :guilabel:`Preferences->Advanced->Template functions`. More "
"information is provided in that dialog. You call a template the same way you"
" call a function, passing positional arguments if desired. An argument can "
"be any expression. Examples of calling a template, assuming the stored "
"template is named ``foo``:"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:540
msgid "``foo()`` -- call the template passing no arguments."
msgstr "``foo()`` -- roep de sjabloon aan zonder argumenten door te geven."

#: ../../__w/calibre/calibre/manual/template_lang.rst:541
msgid ""
"``foo(a, b)`` call the template passing the values of the two variables "
"``a`` and ``b``."
msgstr "``foo(a, b)`` roep de sjabloon aan met doorgeven van de waardes van de twee variabelen ``a`` en ``b``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:542
msgid ""
"``foo(if field('series') then field('series_index') else 0 fi)`` -- if the "
"book has a ``series`` then pass the ``series_index``, otherwise pass the "
"value ``0``."
msgstr "``foo(if field('series') then field('series_index') else 0 fi)`` -- als het boek een ``series`` heeft, passeer de ``series_index``, anders de waarde ``0``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:544
msgid ""
"In GPM you retrieve the arguments passed in the call to the stored template "
"using the ``arguments`` function. It both declares and initializes local "
"variables, effectively parameters. The variables are positional; they get "
"the value of the parameter given in the call in the same position. If the "
"corresponding parameter is not provided in the call then ``arguments`` "
"assigns that variable the provided default value. If there is no default "
"value then the variable is set to the empty string. For example, the "
"following ``arguments`` function declares 2 variables, ``key``, "
"``alternate``::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:548
msgid "Examples, again assuming the stored template is named ``foo``:"
msgstr "Voorbeelden, er weer vanuit gaand dat de opgeslagen sjabloon ``foo`` heet:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:550
msgid ""
"``foo('#myseries')`` -- argument ``key`` is assigned the value "
"``'myseries'`` and the argument ``alternate`` is assigned the default value "
"``'series'``."
msgstr "``foo('#myseries')`` -- argument ``key`` krijgt de waarde ``'myseries'`` toegewezen en het argument ``alternate`` krijgt de standaard waarde ``'series'`` toegewezen."

#: ../../__w/calibre/calibre/manual/template_lang.rst:551
msgid ""
"``foo('series', '#genre')`` the variable ``key`` is assigned the value "
"``'series'`` and the variable ``alternate`` is assigned the value "
"``'#genre'``."
msgstr "``foo('series', '#genre')`` de variabele ``key`` krijgt de waarde ``'series'`` toegewezen en de variabele ``alternate`` de waarde ``'#genre'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:552
msgid ""
"``foo()`` -- the variable ``key`` is assigned the empty string and the "
"variable ``alternate`` is assigned the value ``'series'``."
msgstr "``foo()`` -- de variabele ``key`` krijgt de lege string toegewezen en de variabele ``alternate`` de waarde ``'series'``."

#: ../../__w/calibre/calibre/manual/template_lang.rst:554
msgid ""
"In PTM the arguments are passed in the ``arguments`` parameter, which is a "
"list of strings. There isn't any way to specify default values. You must "
"check the length of the ``arguments`` list to be sure that the number of "
"arguments is what you expect."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:556
msgid ""
"An easy way to test stored templates is using the ``Template tester`` "
"dialog. For ease of access give it a keyboard shortcut in "
":guilabel:`Preferences->Advanced->Keyboard shortcuts->Template tester`. "
"Giving the ``Stored templates`` dialog a shortcut will help switching more "
"rapidly between the tester and editing the stored template's source code."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:559
msgid "Providing additional information to templates"
msgstr "Bijkomende informatie voor sjablonen voorzien"

#: ../../__w/calibre/calibre/manual/template_lang.rst:561
msgid ""
"A developer can choose to pass additional information to the template "
"processor, such as application-specific book metadata or information about "
"what the processor is being asked to do. A template can access this "
"information and use it during the evaluation."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:563
msgid "**Developer: how to pass additional information**"
msgstr "**Ontwikkelaar: hoe bijkomende informatie doorgeven**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:565
msgid ""
"The additional information is a Python dictionary containing pairs "
"``variable_name: variable_value`` where the values must be strings. The "
"template can access the dictionary, creating template local variables named "
"``variable_name`` containing the value ``variable_value``. The user cannot "
"change the name so it is best to use names that won't collide with other "
"template local variables, for example by prefixing the name with an "
"underscore."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:567
msgid ""
"This dictionary is passed to the template processor (the ``formatter``) "
"using the named parameter ``global_vars=your_dict``. The full method "
"signature is::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:575
msgid "**Template writer: how to access the additional information**"
msgstr "**Sjabloon schrijver: hoe toegang krijgen tot de bijkomende informatie**"

#: ../../__w/calibre/calibre/manual/template_lang.rst:577
msgid ""
"You access the additional information (the ``globals`` dictionary) in a "
"template using the template function::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:581
msgid ""
"where ``id`` is any legal variable name. This function checks whether the "
"additional information provided by the developer contains the name. If it "
"does then the function assigns the provided value to a template local "
"variable with that name. If the name is not in the additional information "
"and if an ``expression`` is provided, the ``expression`` is evaluated and "
"the result is assigned to the local variable. If neither a value nor an "
"expression is provided, the function assigns the empty string (``''``) to "
"the local variable."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:583
msgid ""
"A template can set a value in the ``globals`` dictionary using the template "
"function::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:587
msgid ""
"This function sets the ``globals`` dictionary key:value pair ``id:value`` "
"where ``value`` is the value of the template local variable ``id``. If that "
"local variable doesn't exist then ``value`` is set to the result of "
"evaluating ``expression``."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:590
msgid "Notes on the difference between modes"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:592
msgid ""
"The three program modes, :ref:`Single Function Mode <single_mode>` (SFM), "
":ref:`Template Program Mode <template_mode>` (`TPM`), and :ref:`General "
"Program Mode <general_mode>` (`GPM`), work differently. SFM is intended to "
"be 'simple' so it hides a lot of programming language bits."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:594
msgid "Differences:"
msgstr "Verschillen:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:596
msgid ""
"In SFM the value of the column is always passed as an 'invisible' first "
"argument to a function included in the template."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:597
msgid ""
"SFM doesn't support the difference between variables and strings; all values"
" are strings."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:598
msgid ""
"The following SFM template returns either the series name or the string \"no"
" series\"::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:602
msgid "The equivalent template in `TPM` is ::"
msgstr "De soortgelijke sjabloon in `SPM` is::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:606
msgid "The equivalent template in `GPM` is::"
msgstr "De soortgelijke sjabloon in `APM` is::"

#: ../../__w/calibre/calibre/manual/template_lang.rst:610
msgid ""
"The first argument to ``ifempty`` is the value of the field ``series``. The "
"second argument is the string ``no series``. In SFM the first argument, the "
"value of the field, is automatically passed (the invisible argument)."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:611
msgid ""
"Several template functions, for example ``booksize()`` and "
"``current_library_name()``, take no arguments. Because of the 'invisible "
"argument' you cannot use these functions in SFM."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:612
msgid ""
"Nested functions, where a function calls another function to compute an "
"argument, cannot be used in SFM. For example this template, intended to "
"return the first 5 characters of the series value uppercased, won't work in "
"SFM::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:616
msgid ""
"`TPM` and `GPM` support nested functions. The above template in `TPM` would "
"be::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:620
msgid "In `GPM` it would be::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:624
msgid ""
"As noted in the above :ref:`Template Program Mode <template_mode>` section, "
"using ``{`` and ``}`` characters in `TPM` string literals can lead to errors"
" or unexpected results because they confuse the template processor. It tries"
" to treat them as template boundaries, not characters. In some but not all "
"cases you can replace a ``{`` with ``[[`` and a ``}`` with `]]`. Generally, "
"if your program contains ``{`` and ``}`` characters then you should use "
"`General Program Mode`."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:628
msgid "User-defined Python template functions"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:630
msgid ""
"You can add your own Python functions to the template processor. Such "
"functions can be used in any of the three template programming modes. The "
"functions are added by going to :guilabel:`Preferences -> Advanced -> "
"Template functions`. Instructions are shown in that dialog. Note that you "
"can use `Python Templates` for a similar purpose. As calling user-defined "
"functions is faster than calling a Python template, user-defined functions "
"might be more efficient depending on the complexity of what the function or "
"template does."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:633
msgid "Special notes for save/send templates"
msgstr "Extra opmerkingen voor opslaan/versturen van sjablonen"

#: ../../__w/calibre/calibre/manual/template_lang.rst:635
msgid ""
"Special processing is applied when a template is used in a `save to disk` or"
" `send to device` template. The values of the fields are cleaned, replacing "
"characters that are special to file systems with underscores, including "
"slashes. This means that field text cannot be used to create folders. "
"However, slashes are not changed in prefix or suffix strings, so slashes in "
"these strings will cause folders to be created. Because of this, you can "
"create variable-depth folder structure."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:637
msgid ""
"For example, assume we want the folder structure `series/series_index - "
"title`, with the caveat that if series does not exist, then the title should"
" be in the top folder. The template to do this is::"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:641
msgid "The slash and the hyphen appear only if series is not empty."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:643
msgid ""
"The lookup function lets us do even fancier processing. For example, assume "
"that if a book has a series, then we want the folder structure "
"`series/series index - title.fmt`. If the book does not have a series then "
"we want the folder structure `genre/author_sort/title.fmt`. If the book has "
"no genre then we want to use 'Unknown'. We want two completely different "
"paths, depending on the value of series."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:645
msgid "To accomplish this, we:"
msgstr "Om dit te bereiken:"

#: ../../__w/calibre/calibre/manual/template_lang.rst:647
msgid ""
"Create a composite field (give it lookup name #aa) containing "
"``{series}/{series_index} - {title}``. If the series is not empty, then this"
" template will produce `series/series_index - title`."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:648
msgid ""
"Create a composite field (give it lookup name #bb) containing "
"``{#genre:ifempty(Unknown)}/{author_sort}/{title}``. This template produces "
"`genre/author_sort/title`, where an empty genre is replaced with `Unknown`."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:649
msgid ""
"Set the save template to ``{series:lookup(.,#aa,#bb)}``. This template "
"chooses composite field ``#aa`` if series is not empty and composite field "
"``#bb`` if series is empty. We therefore have two completely different save "
"paths, depending on whether or not `series` is empty."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:652
msgid "Tips"
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:654
msgid ""
"Use the Template Tester to test templates. Add the tester to the context "
"menu for books in the library and/or give it a keyboard shortcut."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:655
msgid ""
"Templates can use other templates by referencing composite columns built "
"with the desired template. Alternatively, you can use Stored Templates."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:656
msgid ""
"In a plugboard, you can set a field to empty (or whatever is equivalent to "
"empty) by using the special template ``{}``. This template will always "
"evaluate to an empty string."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:657
msgid ""
"The technique described above to show numbers even if they have a zero value"
" works with the standard field series_index."
msgstr ""

#: ../../__w/calibre/calibre/manual/template_lang.rst:662
msgid "Template function reference"
msgstr "Sjabloon functie referenties"
