# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# math1985 <transifex@matthijsmelissen.nl>, 2016
# M. de Boer <de.boer.melle@gmail.com>, 2018-2019
# Meteor 0id, 2019
# Rodolfo_Jadon, 2015
# Rodolfo_Jadon, 2015
# math1985 <transifex@matthijsmelissen.nl>, 2016
# Volluta <volluta@tutanota.com>, 2016
# W.P.M.E. Hofland <wpme.hofland@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-17 16:00+0530\n"
"PO-Revision-Date: 2019-09-16 05:46+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Dutch (http://www.transifex.com/calibre/calibre/language/nl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: nl\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../home/kovid/work/calibre/manual/develop.rst:4
msgid "Setting up a calibre development environment"
msgstr "Opzetten van Calibre in een development omgeving"

#: ../../home/kovid/work/calibre/manual/develop.rst:6
msgid ""
"calibre is completely open source, licensed under the `GNU GPL v3 "
"<https://www.gnu.org/licenses/gpl.html>`_. This means that you are free to "
"download and modify the program to your heart's content. In this section, "
"you will learn how to get a calibre development environment set up on the "
"operating system of your choice. calibre is written primarily in `Python "
"<https://www.python.org>`_ with some C/C++ code for speed and system "
"interfacing. Note that calibre is not compatible with Python 3 and requires "
"at least Python 2.7.9."
msgstr "Calibre is volledig open source, gelicenseerd onder de `GNU GPL v3 <https://www.gnu.org/licenses/gpl.html>` _. Dit betekent dat u vrij bent om het programma naar hartenlust te downloaden en aan te passen. In dit gedeelte leert u hoe u een Calibre ontwikkelingsomgeving kunt instellen voor het besturingssysteem van uw keuze. Calibre wordt voornamelijk geschreven in `Python <https://www.python.org>` _ met enkele C/C++ code voor snelheid en systeeminterface. Merk op dat Calibre niet compatibel is met Python 3 en op zijn minst Python 2.7.9 vereist."

#: ../../home/kovid/work/calibre/manual/develop.rst:14
msgid "Contents"
msgstr "Inhoud"

#: ../../home/kovid/work/calibre/manual/develop.rst:17
msgid "Design philosophy"
msgstr "Ontwerp filosofie"

#: ../../home/kovid/work/calibre/manual/develop.rst:19
msgid ""
"calibre has its roots in the Unix world, which means that its design is "
"highly modular. The modules interact with each other via well defined "
"interfaces. This makes adding new features and fixing bugs in calibre very "
"easy, resulting in a frenetic pace of development. Because of its roots, "
"calibre has a comprehensive command line interface for all its functions, "
"documented in :doc:`generated/en/cli-index`."
msgstr "Calibre heeft zijn wortels in de Unix-wereld, wat betekent dat het design bijzonder modulair is. De modules werken samen met elkaar via precies gedefinieerde interfaces. Hierdoor wordt het toevoegen van nieuwe features en het oplossen van bugs in Calibre erg eenvoudig, wat resulteert in een snel ontwikkelingstempo. Vanwege deze wortels heeft Calibre een uitgebreide command line interface voor al zijn functies, welke gedocumenteerd zijn in  :doc:`generated/nl/cli-index`."

#: ../../home/kovid/work/calibre/manual/develop.rst:24
msgid ""
"The modular design of calibre is expressed via ``Plugins``. There is a "
":ref:`tutorial <customize>` on writing calibre plugins. For example, adding "
"support for a new device to calibre typically involves writing less than a "
"100 lines of code in the form of a device driver plugin. You can browse the "
"`built-in drivers "
"<https://github.com/kovidgoyal/calibre/tree/master/src/calibre/devices>`_. "
"Similarly, adding support for new conversion formats involves writing "
"input/output format plugins. Another example of the modular design is the "
":ref:`recipe system <news>` for fetching news. For more examples of plugins "
"designed to add features to calibre, see the `Index of plugins "
"<https://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr "Het modulaire ontwerp van Calibre wordt uitgedrukt via `` Plugins``. Er is een: ref :`handleiding <customize>` over het schrijven van Calibre plug-ins. Als u bijvoorbeeld ondersteuning toevoegt voor een nieuw Calibre apparaat, heeft dit meestal betrekking op het schrijven van minder dan 100 regels code in de vorm van een plug-in voor apparaatstuurprogramma's. U kunt bladeren door de `ingebouwde stuurprogramma's <https://github.com/kovidgoyal/Calibre/tree/master/src/Calibre/devices>`_. Op dezelfde manier houdt het toevoegen van ondersteuning voor nieuwe conversie-indelingen het schrijven van invoeg- / uitvoerformatenplug-ins in. Een ander voorbeeld van het modulaire ontwerp is de: ref: `receptuursysteem <news>` voor het ophalen van nieuws. Zie de `Index van plug-ins <https://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>` _ voor meer voorbeelden van plug-ins die zijn ontworpen om functies aan Calibre toe te voegen."

#: ../../home/kovid/work/calibre/manual/develop.rst:34
msgid "Code layout"
msgstr "Code opmaak"

#: ../../home/kovid/work/calibre/manual/develop.rst:36
msgid ""
"All the calibre python code is in the ``calibre`` package. This package "
"contains the following main sub-packages"
msgstr "Alle  de Calibre python code staat in het ``Calibre`` pakket. Dit pakket bevat de volgende hoofddeel pakketten"

#: ../../home/kovid/work/calibre/manual/develop.rst:38
msgid ""
"devices - All the device drivers. Just look through some of the built-in "
"drivers to get an idea for how they work."
msgstr "apparaten - Alle apparaatstuurprogramma's. Bekijk enkele van de ingebouwde stuurprogramma's om een ​​idee te krijgen hoe ze werken."

#: ../../home/kovid/work/calibre/manual/develop.rst:40
msgid ""
"For details, see: ``devices.interface`` which defines the interface "
"supported by device drivers and ``devices.usbms`` which defines a generic "
"driver that connects to a USBMS device. All USBMS based drivers in calibre "
"inherit from it."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:43
msgid ""
"e-books  - All the e-book conversion/metadata code. A good starting point is"
" ``calibre.ebooks.conversion.cli`` which is the module powering the :command"
":`ebook-convert` command. The conversion process is controlled via "
"``conversion.plumber``. The format independent code is all in ``ebooks.oeb``"
" and the format dependent code is in ``ebooks.format_name``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:47
msgid ""
"Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr "Metagegevens lezen, schrijven en downloaden staat allemaal in `` ebooks.metagegevans``"

#: ../../home/kovid/work/calibre/manual/develop.rst:48
msgid ""
"Conversion happens in a pipeline, for the structure of the pipeline, see "
":ref:`conversion-introduction`. The pipeline consists of an input plugin, "
"various transforms and an output plugin. The code that constructs and drives"
" the pipeline is in :file:`plumber.py`. The pipeline works on a "
"representation of an e-book that is like an unzipped epub, with manifest, "
"spine, toc, guide, html content, etc. The class that manages this "
"representation is OEBBook in ``ebooks.oeb.base``. The various "
"transformations that are applied to the book during conversions live in "
":file:`oeb/transforms/*.py`. And the input and output plugins live in "
":file:`conversion/plugins/*.py`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:58
msgid ""
"E-book editing happens using a different container object. It is documented "
"in :ref:`polish_api`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:61
msgid ""
"db - The database back-end. See :ref:`db_api` for the interface to the "
"calibre library."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:63
msgid "Content server: ``srv`` is the calibre Content server."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:65
msgid ""
"gui2 - The Graphical User Interface. GUI initialization happens in "
"``gui2.main`` and ``gui2.ui``. The e-book-viewer is in ``gui2.viewer``. The "
"e-book editor is in ``gui2.tweak_book``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:67
msgid ""
"If you want to locate the entry points for all the various calibre "
"executables, look at the ``entry_points`` structure in `linux.py "
"<https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:71
msgid ""
"If you need help understanding the code, post in the `development forum "
"<https://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will "
"most likely get help from one of calibre's many developers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:75
msgid "Getting the code"
msgstr "De code verkrijgen"

#: ../../home/kovid/work/calibre/manual/develop.rst:77
msgid ""
"You can get the calibre source code in two ways, using a version control "
"system or directly downloading a `tarball <https://calibre-"
"ebook.com/dist/src>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:80
msgid ""
"calibre uses `Git <https://www.git-scm.com/>`_, a distributed version "
"control system. Git is available on all the platforms calibre supports.  "
"After installing Git, you can get the calibre source code with the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:86
msgid ""
"On Windows you will need the complete path name, that will be something like"
" :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr "Op Windows heb je de volledige padnaam nodig, dat zal ongeveer zo zijn: bestand: `C:\\\\Program Files\\\\Git\\\\git.exe`."

#: ../../home/kovid/work/calibre/manual/develop.rst:88
msgid ""
"calibre is a very large project with a very long source control history, so "
"the above can take a while (10 mins to an hour depending on your internet "
"speed)."
msgstr "Calibre is een zeer groot project met een zeer lange versiebeheergeschiedenis, dus het bovenstaande kan een tijd duren (10 minuten tot een uur, afhankelijk van je internetsnelheid)."

#: ../../home/kovid/work/calibre/manual/develop.rst:91
msgid ""
"If you want to get the code faster, the source code for the latest release "
"is always available as an `archive <https://calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:94
msgid "To update a branch to the latest code, use the command::"
msgstr "Om een ​​vertakking bij te werken naar de nieuwste code, gebruik de volgende opdracht: "

#: ../../home/kovid/work/calibre/manual/develop.rst:98
msgid ""
"You can also browse the code at `GitHub "
"<https://github.com/kovidgoyal/calibre>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:101
msgid "Submitting your changes to be included"
msgstr "Uw aanpassingen insturen voor productie"

#: ../../home/kovid/work/calibre/manual/develop.rst:103
msgid ""
"If you only plan to make a few small changes, you can make your changes and "
"create a \"merge directive\" which you can then attach to a ticket in the "
"calibre `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, "
"make your changes, then run::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:111
msgid ""
"This will create a :file:`my-changes` file in the current directory, simply "
"attach that to a ticket on the calibre `bug tracker "
"<https://bugs.launchpad.net/calibre>`_. Note that this will include *all* "
"the commits you have made. If you only want to send some commits, you have "
"to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:119
msgid ""
"To send the last *n* commits, replace *1* with *n*, for example, for the "
"last 3 commits::"
msgstr "Als u de laatste *n* commentaren wilt verzenden, vervangt u *1* door *n*, bijvoorbeeld voor de laatste 3 commentaren::"

#: ../../home/kovid/work/calibre/manual/develop.rst:124
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr "Zorg dat u geen samenvoegingen opneemt bij het gebruik van ``HEAD~n``."

#: ../../home/kovid/work/calibre/manual/develop.rst:126
msgid ""
"If you plan to do a lot of development on calibre, then the best method is "
"to create a `GitHub <https://github.com>`__ account. Below is a basic guide "
"to setting up your own fork of calibre in a way that will allow you to "
"submit pull requests for inclusion into the main calibre repository:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:131
msgid ""
"Setup git on your machine as described in this article: `Setup Git "
"<https://help.github.com/articles/set-up-git>`_"
msgstr "Stel git in op uw machine zoals beschreven in dit artikel: `Setup Git <https://help.github.com/articles/set-up-git>`_"

#: ../../home/kovid/work/calibre/manual/develop.rst:132
msgid ""
"Setup ssh keys for authentication to GitHub, as described here: `Generating "
"SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr "Stel ssh-sleutels in voor authenticatie naar GitHub, zoals hier beschreven: `SSH-sleutels genereren <https://help.github.com/articles/generating-ssh-keys>` _"

#: ../../home/kovid/work/calibre/manual/develop.rst:133
msgid ""
"Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` "
"button."
msgstr "Ga naar https://github.com/kovidgoyal/Calibre en klik op de :guilabel:`Fork` button."

#: ../../home/kovid/work/calibre/manual/develop.rst:134
msgid "In a Terminal do::"
msgstr "In een terminalvenster doe::"

#: ../../home/kovid/work/calibre/manual/develop.rst:139
msgid ""
"Replace <username> above with your github username. That will get your fork "
"checked out locally."
msgstr "Vervang <username> hierboven door uw github-gebruikersnaam. Dat zorgt ervoor dat uw vork lokaal wordt uitgecheckt."

#: ../../home/kovid/work/calibre/manual/develop.rst:140
msgid ""
"You can make changes and commit them whenever you like. When you are ready "
"to have your work merged, do a::"
msgstr "U kunt wijzigingen aanbrengen en deze toewijzen wanneer u maar wilt. Wanneer je klaar bent om je werk samen te voegen, doe dan een:"

#: ../../home/kovid/work/calibre/manual/develop.rst:144
msgid ""
"and go to ``https://github.com/<username>/calibre`` and click the "
":guilabel:`Pull Request` button to generate a pull request that can be "
"merged."
msgstr "en ga naar ``https://github.com/<username>/Calibre`` en klik op :guilabel:`Pull Request` button om een pull request te generen die samengevoegd kan worden."

#: ../../home/kovid/work/calibre/manual/develop.rst:145
msgid ""
"You can update your local copy with code from the main repo at any time by "
"doing::"
msgstr "U kunt uw lokale exemplaar op elk gewenst moment bijwerken met code van de hoofdrepo door te doen:"

#: ../../home/kovid/work/calibre/manual/develop.rst:150
msgid ""
"You should also keep an eye on the calibre `development forum "
"<https://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making "
"major changes, you should discuss them in the forum or contact Kovid "
"directly (his email address is all over the source code)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:156
msgid "Windows development environment"
msgstr "Windows ontwikkel omgeving"

#: ../../home/kovid/work/calibre/manual/develop.rst:158
#: ../../home/kovid/work/calibre/manual/develop.rst:192
#: ../../home/kovid/work/calibre/manual/develop.rst:228
msgid ""
"You must also get the calibre source code separately as described above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:160
msgid ""
"Install calibre normally, using the Windows installer. Then open a Command "
"Prompt and change to the previously checked out calibre code directory. For "
"example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:165
#: ../../home/kovid/work/calibre/manual/develop.rst:240
msgid ""
"calibre is the directory that contains the src and resources sub-"
"directories."
msgstr "Calibre is de map die de subdirectory's src en resources bevat."

#: ../../home/kovid/work/calibre/manual/develop.rst:167
msgid ""
"The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to"
" the absolute path of the src directory. So, following the example above, it"
" would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide "
"<https://docs.python.org/2/using/windows.html#excursus-setting-environment-"
"variables>`_ to setting environment variables on Windows."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:172
msgid ""
"Once you have set the environment variable, open a new command prompt and "
"check that it was correctly set by using the command::"
msgstr "Nadat u de omgevingsvariabele hebt ingesteld, opent u een nieuwe opdrachtprompt en controleert u of deze correct is ingesteld met de opdracht::"

#: ../../home/kovid/work/calibre/manual/develop.rst:177
#: ../../home/kovid/work/calibre/manual/develop.rst:251
msgid ""
"Setting this environment variable means that calibre will now load all its "
"Python code from the specified location."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:179
msgid ""
"That's it! You are now ready to start hacking on the calibre code. For "
"example, open the file :file:`src\\\\calibre\\\\__init__.py` in your "
"favorite editor and add the line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:184
#: ../../home/kovid/work/calibre/manual/develop.rst:258
msgid ""
"near the top of the file. Now run the command :command:`calibredb`. The very"
" first line of output should be ``Hello, world!``."
msgstr "in de buurt van de bovenkant van het bestand. Voer nu de opdracht: opdracht uit: `calibredb`. De allereerste regel van de uitvoer zou moeten zijn `` Hallo, wereld! ``."

#: ../../home/kovid/work/calibre/manual/develop.rst:186
msgid ""
"You can also setup a calibre development environment inside the free "
"Microsoft Visual Studio, if you like, following the instructions `here "
"<https://www.mobileread.com/forums/showthread.php?t=251201>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:190
msgid "macOS development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:194
msgid ""
"Install calibre normally using the provided .dmg. Then open a Terminal and "
"change to the previously checked out calibre code directory, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:199
msgid ""
"calibre is the directory that contains the src and resources sub-"
"directories. The calibre command line tools are found inside the calibre app"
" bundle, in :file:`/Applications/calibre.app/Contents/MacOS` you should add "
"this directory to your PATH environment variable, if you want to run the "
"command line tools easily."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:205
msgid ""
"The next step is to create a bash script that will set the environment "
"variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory "
"when running calibre in debug mode."
msgstr "De volgende stap is het maken van een bash-script dat de omgevingsvariabele `` CALIBRE_DEVELOP_FROM`` op het absolute pad van de src-locatie plaatst bij het uitvoeren van Calibre in debug-modus."

#: ../../home/kovid/work/calibre/manual/develop.rst:207
msgid "Create a plain text file::"
msgstr "Maak een platte-tekst bestand::"

#: ../../home/kovid/work/calibre/manual/develop.rst:213
msgid ""
"Save this file as ``/usr/bin/calibre-develop``, then set its permissions so "
"that it can be executed::"
msgstr "Sla dit bestand op als ``/usr/bin/Calibre-develop``, stel vervolgens de rechten in zodat het kan worden uitgevoerd::"

#: ../../home/kovid/work/calibre/manual/develop.rst:217
msgid "Once you have done this, run::"
msgstr "Als u dit heeft gedaan, voer uit::"

#: ../../home/kovid/work/calibre/manual/develop.rst:221
msgid ""
"You should see some diagnostic information in the Terminal window as calibre"
" starts up, and you should see an asterisk after the version number in the "
"GUI window, indicating that you are running from source."
msgstr "U zou wat diagnostische informatie in het Terminal-venster moeten zien als Calibre opstart, en u zou een asterisk na het versienummer in het GUI-venster moeten zien, om aan te geven dat u vanuit de bron loopt."

#: ../../home/kovid/work/calibre/manual/develop.rst:226
msgid "Linux development environment"
msgstr "Linux ontwikkel omgeving"

#: ../../home/kovid/work/calibre/manual/develop.rst:230
msgid ""
"calibre is primarily developed on Linux. You have two choices in setting up "
"the development environment. You can install the calibre binary as normal "
"and use that as a runtime environment to do your development. This approach "
"is similar to that used in Windows and macOS. Alternatively, you can install"
" calibre from source. Instructions for setting up a development environment "
"from source are in the INSTALL file in the source tree. Here we will address"
" using the binary as a runtime, which is the recommended method."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:236
msgid ""
"Install calibre using the binary installer. Then open a terminal and change "
"to the previously checked out calibre code directory, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:242
msgid ""
"The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to"
" the absolute path of the src directory. So, following the example above, it"
" would be ``/home/kovid/work/calibre/src``. How to set environment variables"
" depends on your Linux distribution and what shell you are using."
msgstr "De volgende stap is om de omgevingsvariabele `` CALIBRE_DEVELOP_FROM`` in te stellen op het absolute pad van de src-locatie. Dus, in navolging van het bovenstaande voorbeeld, zou het ``/home/kovid/work/Calibre/src`` zijn. Het instellen van omgevingsvariabelen is afhankelijk van je Linux-distributie en welke shell je gebruikt."

#: ../../home/kovid/work/calibre/manual/develop.rst:246
msgid ""
"Once you have set the environment variable, open a new terminal and check "
"that it was correctly set by using the command::"
msgstr "Nadat u de omgevingsvariabele hebt ingesteld, opent u een nieuwe terminal en controleert u of deze correct is ingesteld met de opdracht::"

#: ../../home/kovid/work/calibre/manual/develop.rst:253
msgid ""
"That's it! You are now ready to start hacking on the calibre code. For "
"example, open the file :file:`src/calibre/__init__.py` in your favorite "
"editor and add the line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:261
msgid ""
"Having separate \"normal\" and \"development\" calibre installs on the same "
"computer"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:263
msgid ""
"The calibre source tree is very stable and rarely breaks, but if you feel "
"the need to run from source on a separate test library and run the released "
"calibre version with your everyday library, you can achieve this easily "
"using .bat files or shell scripts to launch calibre. The example below shows"
" how to do this on Windows using .bat files (the instructions for other "
"platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:268
msgid "To launch the release version of calibre with your everyday library:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:270
msgid "calibre-normal.bat::"
msgstr "Calibre-normal.bat::"

#: ../../home/kovid/work/calibre/manual/develop.rst:274
msgid "calibre-dev.bat::"
msgstr "Calibre-dev.bat::"

#: ../../home/kovid/work/calibre/manual/develop.rst:281
msgid "Debugging tips"
msgstr "Debug tips"

#: ../../home/kovid/work/calibre/manual/develop.rst:283
msgid ""
"Python is a dynamically typed language with excellent facilities for "
"introspection. Kovid wrote the core calibre code without once using a "
"debugger. There are many strategies to debug calibre code:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:288
msgid "Using print statements"
msgstr "Gebruik van print statements"

#: ../../home/kovid/work/calibre/manual/develop.rst:290
msgid ""
"This is Kovid's favorite way to debug. Simply insert print statements at "
"points of interest and run your program in the terminal. For example, you "
"can start the GUI from the terminal as::"
msgstr "Dit is de favoriete manier van Kovid om te debuggen. Voeg eenvoudig afdrukinstructies in op interessante plaatsen en voer uw programma uit in de terminal. U kunt de GUI bijvoorbeeld vanuit de terminal starten als::"

#: ../../home/kovid/work/calibre/manual/develop.rst:295
msgid "Similarly, you can start the e-book-viewer as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:299
msgid "The e-book-editor can be started as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:304
msgid "Using an interactive Python interpreter"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:306
msgid ""
"You can insert the following two lines of code to start an interactive "
"Python session at that point::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:311
msgid ""
"When running from the command line, this will start an interactive Python "
"interpreter with access to all locally defined variables (variables in the "
"local scope). The interactive prompt even has TAB completion for object "
"properties and you can use the various Python facilities for introspection, "
"such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr "Bij het uitvoeren van de opdrachtregel start hiermee een interactieve Python-interpreter met toegang tot alle lokaal gedefinieerde variabelen (variabelen in de lokale scope). De interactieve prompt heeft zelfs TAB-voltooiing voor objecteigenschappen en je kunt de verschillende Python-faciliteiten gebruiken voor introspectie, zoals: func: `dir`, :func:` type`, :func:`repr`, etc."

#: ../../home/kovid/work/calibre/manual/develop.rst:317
msgid "Using the Python debugger as a remote debugger"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:319
msgid ""
"You can use the builtin Python debugger (pdb) as a remote debugger from the "
"command line. First, start the remote debugger at the point in the calibre "
"code you are interested in, like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:326
msgid ""
"Then run calibre, either as normal, or using one of the calibre-debug "
"commands described in the previous section. Once the above point in the code"
" is reached, calibre will freeze, waiting for the debugger to connect."
msgstr "Voer vervolgens Calibre uit, hetzij als normaal, of met behulp van een van de Calibre-debug-opdrachten die in de vorige sectie zijn beschreven. Zodra het bovenstaande punt in de code is bereikt, zal Calibre bevriezen, wachtend totdat de foutopsporing verbinding maakt."

#: ../../home/kovid/work/calibre/manual/develop.rst:330
msgid ""
"Now open a terminal or command prompt and use the following command to start"
" the debugging session::"
msgstr "Open nu een terminal of opdrachtprompt en gebruik de volgende opdracht om de foutopsporingssessie te starten:"

#: ../../home/kovid/work/calibre/manual/develop.rst:335
msgid ""
"You can read about how to use the Python debugger in the `Python stdlib docs"
" for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-"
"commands>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:339
msgid ""
"By default, the remote debugger will try to connect on port 4444. You can "
"change it, by passing the port parameter to both the set_trace() and the "
"cli() functions above, like this: ``set_trace(port=1234)`` and "
"``cli(port=1234)``."
msgstr "Standaard probeert de debugger op afstand verbinding te maken op poort 4444. Je kunt dit wijzigen door de parameter port naar zowel de set_trace() als de cli() -functies hierboven door te geven, zoals deze: ``set_trace(port=1234)``en``cli(port = 1234)``."

#: ../../home/kovid/work/calibre/manual/develop.rst:345
msgid ""
"The Python debugger cannot handle multiple threads, so you have to call "
"set_trace once per thread, each time with a different port number."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:349
msgid "Using the debugger in your favorite Python IDE"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:351
msgid ""
"It is possible to use the builtin debugger in your favorite Python IDE, if "
"it supports remote debugging. The first step is to add the calibre src "
"checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory "
"you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the "
"``PYTHONPATH`` of your IDE."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:356
msgid ""
"Then place the IDE's remote debugger module into the :file:`src` "
"subdirectory of the calibre source code checkout. Add whatever code is "
"needed to launch the remote debugger to calibre at the point of interest, "
"for example in the main function. Then run calibre as normal. Your IDE "
"should now be able to connect to the remote debugger running inside calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:363
msgid "Executing arbitrary scripts in the calibre Python environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:365
msgid ""
"The :command:`calibre-debug` command provides a couple of handy switches to "
"execute your own code, with access to the calibre modules::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:370
msgid ""
"is great for testing a little snippet of code on the command line. It works "
"in the same way as the -c switch to the Python interpreter::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:374
msgid ""
"can be used to execute your own Python script. It works in the same way as "
"passing the script to the Python interpreter, except that the calibre "
"environment is fully initialized, so you can use all the calibre code in "
"your script. To use command line arguments with your script, use the form::"
msgstr "kan worden gebruikt om je eigen Python-script uit te voeren. Het werkt op dezelfde manier als het doorgeven van het script aan de Python-interpreter, behalve dat de Calibre omgeving volledig is geïnitialiseerd, zodat u alle Calibre code in uw script kunt gebruiken. om opdrachtregelargumenten te gebruiken met uw script, gebruik de vorm: "

#: ../../home/kovid/work/calibre/manual/develop.rst:379
msgid ""
"The ``--`` causes all subsequent arguments to be passed to your script."
msgstr "De `` --`` zorgt ervoor dat alle volgende argumenten aan je script worden doorgegeven."

#: ../../home/kovid/work/calibre/manual/develop.rst:383
msgid "Using calibre in your projects"
msgstr "Calibre gebruiken in uw projecten"

#: ../../home/kovid/work/calibre/manual/develop.rst:385
msgid ""
"It is possible to directly use calibre functions/code in your Python "
"project. Two ways exist to do this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:388
msgid "Binary install of calibre"
msgstr "Binaire installatie van Calibre"

#: ../../home/kovid/work/calibre/manual/develop.rst:390
msgid ""
"If you have a binary install of calibre, you can use the Python interpreter "
"bundled with calibre, like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:395
msgid "Source install on Linux"
msgstr "Broncode installatie op Linux"

#: ../../home/kovid/work/calibre/manual/develop.rst:397
msgid ""
"In addition to using the above technique, if you do a source install on "
"Linux, you can also directly import calibre, as follows::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:405
msgid ""
"It is essential that you import the init_calibre module before any other "
"calibre modules/packages as it sets up the interpreter to run calibre code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:409
msgid "API documentation for various parts of calibre"
msgstr "API installatie voor diverse onderdelen van Calibre"
