# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# Ben Liao <weibin.liao@gmail.com>, 2016
# Kevin Jin <kevin.defan@gmail.com>, 2016
# tony shen <anthanny@hotmail.com>, 2020,2024
# 小恐龙 <lhgtop@gmail.com>, 2017
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-13 15:20+0000\n"
"PO-Revision-Date: 2014-06-17 08:35+0000\n"
"Last-Translator: tony shen <anthanny@hotmail.com>, 2020,2024\n"
"Language-Team: Chinese (China) (http://app.transifex.com/calibre/calibre/language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../__w/calibre/calibre/manual/plugins.rst:4
msgid "API documentation for plugins"
msgstr "插件API文档"

#: ../../__w/calibre/calibre/manual/plugins.rst:9
msgid ""
"Defines various abstract base classes that can be subclassed to create "
"powerful plugins. The useful classes are:"
msgstr "定义了各种抽象的基类，它们的子类可以创建功能强大的插件。这些有用的类包括："

#: ../../__w/calibre/calibre/manual/plugins.rst:19
msgid "Plugin"
msgstr "插件"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:1
msgid "A calibre plugin. Useful members include:"
msgstr "一个 calibre 插件。重要的成员包括："

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:3
msgid "``self.installation_type``: Stores how the plugin was installed."
msgstr "``self.installation_type``：存储插件的安装方式。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:5
msgid "``self.plugin_path``: Stores path to the ZIP file that contains"
msgstr "``self.plugin_path``：存储包含以下内容的 ZIP 文件的路径"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:5
msgid "this plugin or None if it is a builtin plugin"
msgstr "如果它是内置插件，则此插件或无"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:8
msgid "``self.site_customization``: Stores a customization string entered"
msgstr "``self.site_customization``: 存储一个用户输入的自定义字符串"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:8
msgid "by the user."
msgstr "由用户。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:10
msgid "Methods that should be overridden in sub classes:"
msgstr "在子类中应当重写的方法："

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:12
msgid ":meth:`initialize`"
msgstr "`初始化`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:13
msgid ":meth:`customization_help`"
msgstr "`定制_帮助`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:15
msgid "Useful methods:"
msgstr "有用的方法："

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:17
msgid ":meth:`temporary_file`"
msgstr "`临时文件`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:18
msgid ":meth:`__enter__`"
msgstr "`__输入__`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:19
msgid ":meth:`load_resources`"
msgstr "`加载资源`"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.supported_platforms:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.supported_platforms:1
msgid ""
"List of platforms this plugin works on. For example: ``['windows', 'osx', "
"'linux']``"
msgstr "该插件适用的平台列表。 例如：``['windows', 'osx', 'linux']``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.name:1
msgid ""
"The name of this plugin. You must set it something other than Trivial Plugin"
" for it to work."
msgstr "该插件的名称。 您必须将其设置为 Trivial Plugin 以外的其他内容才能正常工作。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.version:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.version:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.version:1
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr "此插件的版本为三-元组（主要、次要、修订版）"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.description:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.description:1
msgid "A short string describing what this plugin does"
msgstr "描述此插件功能的短字符串"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.author:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.author:1
msgid "The author of this plugin"
msgstr "这个插件的作者"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.priority:1
msgid ""
"When more than one plugin exists for a filetype, the plugins are run in "
"order of decreasing priority. Plugins with higher priority will be run "
"first. The highest possible priority is ``sys.maxsize``. Default priority is"
" 1."
msgstr "当一种文件类型存在多个插件时，插件将按优先级降序运行。 优先级较高的插件将首先运行。 可能的最高优先级是“sys.maxsize”。 默认优先级为 1。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.minimum_calibre_version:1
msgid "The earliest version of calibre this plugin requires"
msgstr "该插件需要的最早版本的 calibre"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.installation_type:1
msgid "The way this plugin is installed"
msgstr "这个插件的安装方式"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.can_be_disabled:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.can_be_disabled:1
msgid ""
"If False, the user will not be able to disable this plugin. Use with care."
msgstr "如果为 False，用户将无法禁用此插件。 小心使用。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.InterfaceActionBase.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.Plugin.type:1 ../../__w/calibre/calibre/manual/docstring
#: of calibre.customize.PreferencesPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.type:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.type:1
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr "该插件的类型。 用于在 GUI 中对插件进行分类"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:1
msgid ""
"Called once when calibre plugins are initialized.  Plugins are re-"
"initialized every time a new plugin is added. Also note that if the plugin "
"is run in a worker process, such as for adding books, then the plugin will "
"be initialized for every new worker process."
msgstr "当 calibre 插件初始化时调用一次。 每次添加新插件时，插件都会重新初始化。 另请注意，如果插件在工作进程中运行，例如用于添加书籍，则将为每个新工作进程初始化该插件。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:6
msgid ""
"Perform any plugin specific initialization here, such as extracting "
"resources from the plugin ZIP file. The path to the ZIP file is available as"
" ``self.plugin_path``."
msgstr "在此执行任何特定于插件的初始化，例如从插件 ZIP 文件中提取资源。 ZIP 文件的路径可用作“self.plugin_path”。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:10
msgid ""
"Note that ``self.site_customization`` is **not** available at this point."
msgstr "请注意，“self.site_customization”此时**不**可用。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:1
msgid ""
"Implement this method and :meth:`save_settings` in your plugin to use a "
"custom configuration dialog, rather then relying on the simple string based "
"default customization."
msgstr "在插件中实现此方法和“save_settings”以使用自定义配置对话框，而不是依赖于基于简单字符串的默认自定义。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:5
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:5
msgid ""
"This method, if implemented, must return a QWidget. The widget can have an "
"optional method validate() that takes no arguments and is called immediately"
" after the user clicks OK. Changes are applied if and only if the method "
"returns True."
msgstr "此方法如果实现，必须返回一个 QWidget。 该小部件可以有一个可选方法 validate()，该方法不带任何参数，并在用户单击“确定”后立即调用。 当且仅当该方法返回 True 时才会应用更改。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:10
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.config_widget:10
msgid ""
"If for some reason you cannot perform the configuration at this time, return"
" a tuple of two strings (message, details), these will be displayed as a "
"warning dialog to the user and the process will be aborted."
msgstr "如果由于某种原因此时无法执行配置，请返回两个字符串（消息、详细信息）的元组，这些将作为警告对话框显示给用户，并且进程将中止。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:1
msgid "Save the settings specified by the user with config_widget."
msgstr "使用 config_widget 保存用户指定的设置。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postconvert:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postdelete:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:0
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:0
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:0
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.set_progress_reporter:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.sync_booklists:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:0
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:0
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:0
msgid "Parameters"
msgstr "参数"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:3
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.save_settings:3
msgid "The widget returned by :meth:`config_widget`."
msgstr "`config_widget` 返回的小部件。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.do_user_config:1
msgid ""
"This method shows a configuration dialog for this plugin. It returns True if"
" the user clicks OK, False otherwise. The changes are automatically applied."
msgstr "此方法显示该插件的配置对话框。 如果用户单击“确定”，则返回 True，否则返回 False。 更改会自动应用。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:1
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:1
msgid ""
"If this plugin comes in a ZIP file (user added plugin), this method will "
"allow you to load resources from the ZIP file."
msgstr "如果此插件位于 ZIP 文件（用户添加的插件）中，则此方法将允许您从 ZIP 文件加载资源。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:4
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:4
msgid "For example to load an image::"
msgstr "例如加载图像："

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:10
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:10
msgid "List of paths to resources in the ZIP file using / as separator"
msgstr "ZIP 文件中资源的路径列表，使用 / 作为分隔符"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:0
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.get_device_information:0
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:0
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:0
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:0
msgid "Returns"
msgstr "返回"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:12
msgid ""
"A dictionary of the form ``{name: file_contents}``. Any names that were not "
"found in the ZIP file will not be present in the dictionary."
msgstr "形式为“{name: file_contents}”的字典。 ZIP 文件中未找到的任何名称都不会出现在字典中。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:1
msgid ""
"Return a string giving help on how to customize this plugin. By default "
"raise a :class:`NotImplementedError`, which indicates that the plugin does "
"not require customization."
msgstr "返回一个字符串，提供有关如何自定义此插件的帮助。 默认情况下会引发“NotImplementedError”，这表明该插件不需要自定义。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:5
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:5
msgid ""
"If you re-implement this method in your subclass, the user will be asked to "
"enter a string as customization for this plugin. The customization string "
"will be available as ``self.site_customization``."
msgstr "如果您在子类中重新实现此方法，系统将要求用户输入一个字符串作为此插件的自定义。 自定义字符串将以“self.site_customization”形式提供。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:10
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:10
msgid ""
"Site customization could be anything, for example, the path to a needed "
"binary on the user's computer."
msgstr "站点自定义可以是任何内容，例如用户计算机上所需二进制文件的路径。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:13
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.customization_help:13
msgid "If True return HTML help, otherwise return plain text help."
msgstr "如果 True 返回 HTML 帮助，否则返回纯文本帮助。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:1
msgid ""
"Return a file-like object that is a temporary file on the file system. This "
"file will remain available even after being closed and will only be removed "
"on interpreter shutdown. Use the ``name`` member of the returned object to "
"access the full path to the created temporary file."
msgstr "返回一个类似文件的对象，它是文件系统上的临时文件。 即使关闭后，该文件仍然可用，并且仅在解释器关闭时才会被删除。 使用返回对象的“name”成员来访问创建的临时文件的完整路径。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:6
msgid "The suffix that the temporary file will have."
msgstr "临时文件将具有的后缀。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.cli_main:1
msgid ""
"This method is the main entry point for your plugins command line interface."
" It is called when the user does: calibre-debug -r \"Plugin Name\". Any "
"arguments passed are present in the args variable."
msgstr "此方法是插件命令行界面的主要入口点。 当用户执行以下操作时调用它：calibre-debug -r“插件名称”。 传递的任何参数都存在于 args 变量中。"

#: ../../__w/calibre/calibre/manual/plugins.rst:28
msgid "FileTypePlugin"
msgstr "文件类型插件"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.InterfaceActionBase:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:1
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin:1
#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source:1
msgid "Bases: :py:class:`~calibre.customize.Plugin`"
msgstr "基础：`~calibre.customize.Plugin`"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin:1
msgid "A plugin that is associated with a particular set of file types."
msgstr "与一组特定文件类型关联的插件。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run. Use '*' for all file "
"types. For example: ``{'lit', 'mobi', 'prc'}``"
msgstr "应运行此插件的文件类型集。 对所有文件类型使用“*”。 例如：``{'lit', 'mobi', 'prc'}``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_import:1
msgid "If True, this plugin is run when books are added to the database"
msgstr "如果为 True，则在将书籍添加到数据库时运行此插件"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_postimport:1
msgid ""
"If True, this plugin is run after books are added to the database. In this "
"case the postimport and postadd methods of the plugin are called."
msgstr "如果为 True，则在将书籍添加到数据库后运行此插件。 在这种情况下，将调用插件的 post import 和 post add 方法。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_postconvert:1
msgid ""
"If True, this plugin is run after a book is converted. In this case the "
"postconvert method of the plugin is called."
msgstr "如果为 True，则该插件将在书籍转换后运行。 在这种情况下，调用插件的 post convert 方法。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_postdelete:1
msgid ""
"If True, this plugin is run after a book file is deleted from the database. "
"In this case the postdelete method of the plugin is called."
msgstr "如果为 True，则在从数据库中删除书籍文件后运行此插件。 在这种情况下，将调用插件的 post delete 方法。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_preprocess:1
msgid "If True, this plugin is run just before a conversion"
msgstr "如果为 True，则该插件将在转换之前运行"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.FileTypePlugin.on_postprocess:1
msgid ""
"If True, this plugin is run after conversion on the final file produced by "
"the conversion output plugin."
msgstr "如果为 True，则在转换输出插件生成的最终文件后运行此插件。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should perform "
"whatever modifications are required on the e-book and return the absolute "
"path to the modified e-book. If no modifications are needed, it should "
"return the path to the original e-book. If an error is encountered it should"
" raise an Exception. The default implementation simply return the path to "
"the original e-book. Note that the path to the original file (before any "
"file type plugins are run, is available as self.original_path_to_file)."
msgstr "运行插件。 必须在子类中实现。 它应该对电子书执行所需的任何修改，并返回修改后的电子书的绝对路径。 如果不需要修改，它应该返回原始电子书的路径。 如果遇到错误，它应该引发异常。 默认实现只是返回原始电子书的路径。 请注意，原始文件的路径（在运行任何文件类型插件之前，可用作 self.original_path_to_file）。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:11
msgid ""
"The modified e-book file should be created with the :meth:`temporary_file` "
"method."
msgstr "修改后的电子书文件应使用“temporary_file”方法创建。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:14
msgid "Absolute path to the e-book."
msgstr "电子书的绝对路径。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:16
msgid "Absolute path to the modified e-book."
msgstr "修改后的电子书的绝对路径。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:1
msgid ""
"Called post import, i.e., after the book file has been added to the "
"database. Note that this is different from :meth:`postadd` which is called "
"when the book record is created for the first time. This method is called "
"whenever a new file is added to a book record. It is useful for modifying "
"the book record based on the contents of the newly added file."
msgstr "称为导入后，即在将书籍文件添加到数据库之后。 请注意，这与第一次创建图书记录时调用的“post add”不同。 每当新文件添加到图书记录时都会调用此方法。 它对于根据新添加的文件的内容修改图书记录非常有用。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:8
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postconvert:5
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postdelete:6
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:6
msgid "Database id of the added book."
msgstr "添加的图书的数据库id。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postconvert:6
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postdelete:7
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:7
msgid "The file type of the book that was added."
msgstr "添加的书籍的文件类型。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postconvert:7
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postdelete:8
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:8
msgid "Library database."
msgstr "图书馆数据库。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postconvert:1
msgid ""
"Called post conversion, i.e., after the conversion output book file has been"
" added to the database. Note that it is run after a conversion only, not "
"after a book is added. It is useful for modifying the book record based on "
"the contents of the newly added file."
msgstr "称为转换后，即转换后输出的书籍文件已添加到数据库中。 请注意，它仅在转换后运行，而不是在添加书籍后运行。 它对于根据新添加的文件的内容修改图书记录非常有用。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postdelete:1
msgid ""
"Called post deletion, i.e., after the book file has been deleted from the "
"database. Note that it is not run when a book record is deleted, only when "
"one or more formats from the book are deleted. It is useful for modifying "
"the book record based on the format of the deleted file."
msgstr "称为删除后，即书籍文件从数据库中删除后。 请注意，删除图书记录时不会运行它，仅当删除图书中的一种或多种格式时才会运行。 它对于根据已删除文件的格式修改图书记录非常有用。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:1
msgid ""
"Called post add, i.e. after a book has been added to the db. Note that this "
"is different from :meth:`postimport`, which is called after a single book "
"file has been added to a book. postadd() is called only when an entire book "
"record with possibly more than one book file has been created for the first "
"time. This is useful if you wish to modify the book record in the database "
"when the book is first added to calibre."
msgstr "称为后添加，即在将一本书添加到数据库之后。 请注意，这与 post import 不同，post import 在将单个书籍文件添加到书籍后调用。 仅当第一次创建可能包含多个图书文件的整个图书记录时，才会调用 postadd()。 如果您希望在书籍首次添加到 calibre 时修改数据库中的书籍记录，这非常有用。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:9
msgid ""
"Map of file format to path from which the file format was added. Note that "
"this might or might not point to an actual existing file, as sometimes files"
" are added as streams. In which case it might be a dummy value or a non-"
"existent path."
msgstr "文件格式到添加文件格式的路径的映射。 请注意，这可能指向也可能不指向实际存在的文件，因为有时文件会作为流添加。 在这种情况下，它可能是虚拟值或不存在的路径。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postadd:13
msgid "Library database"
msgstr "图书馆数据库"

#: ../../__w/calibre/calibre/manual/plugins.rst:39
msgid "Metadata plugins"
msgstr "元数据插件"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin:1
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin:1
msgid "A plugin that implements reading metadata from a set of file types."
msgstr "一个实现从一组文件类型读取元数据的插件。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.MetadataWriterPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run. For example: "
"``set(['lit', 'mobi', 'prc'])``"
msgstr "应运行此插件的文件类型集。 例如：``set(['lit', 'mobi', 'prc'])``"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:1
msgid ""
"Return metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data."
msgstr "返回流表示的文件的元数据（支持读取的类似文件的对象）。 当输入数据有错误时引发异常。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:5
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:5
msgid ""
"The type of file. Guaranteed to be one of the entries in :attr:`file_types`."
msgstr "文件类型。 保证是“file_types”中的条目之一。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:7
#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:7
msgid "A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr "一个 `calibre.ebooks.metadata.book.Metadata` 对象"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:1
msgid ""
"Set metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data."
msgstr "为流（支持读取的类似文件的对象）表示的文件设置元数据。 当输入数据有错误时引发异常。"

#: ../../__w/calibre/calibre/manual/plugins.rst:54
msgid "Catalog plugins"
msgstr "书目插件"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin:1
msgid "A plugin that implements a catalog generator."
msgstr "实现目录生成器的插件。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.file_types:1
msgid ""
"Output file type for which this plugin should be run. For example: 'epub' or"
" 'xml'"
msgstr "应运行此插件的输出文件类型。 例如：“epub”或“xml”"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.cli_options:1
msgid ""
"CLI parser options specific to this plugin, declared as `namedtuple` "
"`Option`:"
msgstr "特定于此插件的 CLI 解析器选项，声明为 `namedtuple` `Option`："

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.CatalogPlugin.cli_options:3
msgid ""
"from collections import namedtuple Option = namedtuple('Option', 'option, "
"default, dest, help') cli_options = [Option('--catalog-title', default = 'My"
" Catalog', dest = 'catalog_title', help = (_('Title of generated catalog. "
"\\nDefault:') + \" '\" + '%default' + \"'\"))] cli_options parsed in "
"calibre.db.cli.cmd_catalog:option_parser()"
msgstr "从集合导入namedtuple Option=namedtupel（'Option'，'Option，default，dest，help'）cli_options=[选项（'-目录标题'，default='我的目录'，dest='catalog_title'，help=（_（'生成的目录的标题。\\n默认值：'）+“'”+'%ddefault'+\"'\"))]在calible.db.cli.cmd_catalog:Option_parser（）中解析的cli_options"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.initialize:1
msgid ""
"If plugin is not a built-in, copy the plugin's .ui and .py files from the "
"ZIP file to $TMPDIR. Tab will be dynamically generated and added to the "
"Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr "如果插件不是内置插件，请将插件的 .ui 和 .py 文件从 ZIP 文件复制到 $TMPDIR。 选项卡将动态生成并添加到 calibre.gui2.dialogs.catalog.py:Catalog 中的“目录选项”对话框"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should generate the "
"catalog in the format specified in file_types, returning the absolute path "
"to the generated catalog file. If an error is encountered it should raise an"
" Exception."
msgstr "运行插件。 必须在子类中实现。 它应该以 file_types 中指定的格式生成目录，并返回生成的目录文件的绝对路径。 如果遇到错误，它应该引发异常。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:7
msgid ""
"The generated catalog file should be created with the :meth:`temporary_file`"
" method."
msgstr "生成的目录文件应使用“temporary_file”方法创建。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:10
msgid "Absolute path to the generated catalog file."
msgstr "生成的目录文件的绝对路径。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:11
msgid "A dictionary of keyword arguments"
msgstr "关键字参数字典"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:12
msgid "A LibraryDatabase2 object"
msgstr "LibraryDatabase2 对象"

#: ../../__w/calibre/calibre/manual/plugins.rst:64
msgid "Metadata download plugins"
msgstr "元数据下载插件"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.capabilities:1
msgid ""
"Set of capabilities supported by this plugin. Useful capabilities are: "
"'identify', 'cover'"
msgstr "该插件支持的功能集。 有用的功能有：“识别”、“覆盖”"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.touched_fields:1
msgid ""
"List of metadata fields that can potentially be download by this plugin "
"during the identify phase"
msgstr "该插件在识别阶段可能下载的元数据字段列表"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr "如果您的插件返回 HTML 格式的注释，请将此设置为 True"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
msgid ""
"Setting this to True means that the browser object will indicate that it "
"supports gzip transfer encoding. This can speedup downloads but make sure "
"that the source actually supports gzip transfer encoding correctly first"
msgstr "将其设置为 True 意味着浏览器对象将指示它支持 gzip 传输编码。 这可以加快下载速度，但首先要确保源实际上正确支持 gzip 传输编码"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.ignore_ssl_errors:1
msgid ""
"Set this to True to ignore HTTPS certificate errors when connecting to this "
"source."
msgstr "将其设置为 True 可在连接到此源时忽略 HTTPS 证书错误。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
msgid ""
"Cached cover URLs can sometimes be unreliable (i.e. the download could fail "
"or the returned image could be bogus). If that is often the case with this "
"source, set to False"
msgstr "缓存的封面 URL 有时可能不可靠（即下载可能失败或返回的图像可能是伪造的）。 如果此源经常出现这种情况，请设置为 False"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.options:1
msgid ""
"A list of :class:`Option` objects. They will be used to automatically "
"construct the configuration widget for this plugin"
msgstr "`Option` 对象的列表。 它们将用于自动构建该插件的配置小部件"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.config_help_message:1
msgid ""
"A string that is displayed at the top of the config widget for this plugin"
msgstr "显示在该插件的配置小部件顶部的字符串"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
msgid "If True this source can return multiple covers for a given query"
msgstr "如果为 True，则此源可以为给定查询返回多个封面"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
msgid ""
"If set to True covers downloaded by this plugin are automatically trimmed."
msgstr "如果设置为 True，此插件下载的封面将自动修剪。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.ebooks.metadata.sources.base.Source.prefer_results_with_isbn:1
msgid ""
"If set to True, and this source returns multiple results for a query, some "
"of which have ISBNs and some of which do not, the results without ISBNs will"
" be ignored"
msgstr "如果设置为 True，并且此源返回查询的多个结果，其中一些有 ISBN，一些没有，则没有 ISBN 的结果将被忽略"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.is_configured:1
msgid ""
"Return False if your plugin needs to be configured before it can be used. "
"For example, it might need a username/password/API key."
msgstr "如果您的插件需要先配置才能使用，则返回 False。 例如，它可能需要用户名/密码/API 密钥。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
msgid ""
"Take a list of authors and return a list of tokens useful for an AND search "
"query. This function tries to return tokens in first name middle names last "
"name order, by assuming that if a comma is in the author name, the name is "
"in lastname, other names form."
msgstr "获取作者列表并返回对 AND 搜索查询有用的标记列表。 此函数尝试按名字、中间名、姓氏顺序返回标记，假设如果作者姓名中包含逗号，则该名称采用姓氏、其他名称的形式。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
msgid ""
"Take a title and return a list of tokens useful for an AND search query. "
"Excludes connectives(optionally) and punctuation."
msgstr "获取标题并返回对 AND 搜索查询有用的标记列表。 不包括连接词（可选）和标点符号。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr "将作业列表尽可能均匀地拆分为最多 num 个组"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.test_fields:1
msgid ""
"Return the first field from self.touched_fields that is null on the mi "
"object"
msgstr "返回 self.touched_fields 中 mi 对象上为 null 的第一个字段"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
msgid ""
"Call this method in your plugin's identify method to normalize metadata "
"before putting the Metadata object into result_queue. You can of course, use"
" a custom algorithm suited to your metadata source."
msgstr "在将元数据对象放入 result_queue 之前，在插件的识别方法中调用此方法来规范元数据。 当然，您可以使用适合您的元数据源的自定义算法。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
msgid ""
"Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, "
"identifier_value, URL). The URL is the URL for the book identified by "
"identifiers at this source. identifier_type, identifier_value specify the "
"identifier corresponding to the URL. This URL must be browsable to by a "
"human using a browser. It is meant to provide a clickable link for the user "
"to easily visit the books page at this source. If no URL is found, return "
"None. This method must be quick, and consistent, so only implement it if it "
"is possible to construct the URL from a known scheme given identifiers."
msgstr "返回 3 元组或 None。 3 元组的形式为：（identifier_type、identifier_value、URL）。 URL 是由该源中的标识符标识的书籍的 URL。 identifier_type、identifier_value指定URL对应的标识符。 该 URL 必须可供使用浏览器的人员浏览。 它旨在为用户提供一个可点击的链接，以便轻松访问此来源的书籍页面。 如果没有找到 URL，则返回 None。 此方法必须快速且一致，因此仅当可以根据给定标识符的已知方案构造 URL 时才实施它。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
msgid "Return a human readable name from the return value of get_book_url()."
msgstr "从 get_book_url() 的返回值返回一个人类可读的名称。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_book_urls:1
msgid ""
"Override this method if you would like to return multiple URLs for this "
"book. Return a list of 3-tuples. By default this method simply calls "
":func:`get_book_url`."
msgstr "如果您想返回本书的多个 URL，请重写此方法。 返回 3 元组的列表。 默认情况下，此方法仅调用 get_book_url。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
msgid ""
"Return cached cover URL for the book identified by the identifiers "
"dictionary or None if no such URL exists."
msgstr "返回由标识符字典标识的书籍的缓存封面 URL，如果不存在此类 URL，则返回 None。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
msgid ""
"Note that this method must only return validated URLs, i.e. not URLS that "
"could result in a generic cover image or a not found error."
msgstr "请注意，此方法必须仅返回经过验证的 URL，即不能返回可能导致通用封面图像或未找到错误的 URL。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.id_from_url:1
msgid ""
"Parse a URL and return a tuple of the form: (identifier_type, "
"identifier_value). If the URL does not match the pattern for the metadata "
"source, return None."
msgstr "解析 URL 并返回以下形式的元组：（identifier_type，identifier_value）。 如果 URL 与元数据源的模式不匹配，则返回 None。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
msgid ""
"Return a function that is used to generate a key that can sort Metadata "
"objects by their relevance given a search query (title, authors, "
"identifiers)."
msgstr "返回一个函数，该函数用于生成一个关键词，该关键词可以根据给定搜索查询（标题、作者、标识符）的相关性对元数据对象进行排序。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr "这些关键词用于对“identify”调用的结果进行排序。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
msgid ""
"For details on the default algorithm see "
":class:`InternalMetadataCompareKeyGen`. Re-implement this function in your "
"plugin if the default algorithm is not suitable."
msgstr "有关默认算法的详细信息，请参阅“InternalMetadataCompareKeyGen”。 如果默认算法不合适，请在您的插件中重新实现此功能。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:1
msgid "Identify a book by its Title/Author/ISBN/etc."
msgstr "通过书名/作者/ISBN/等识别一本书。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:3
msgid ""
"If identifiers(s) are specified and no match is found and this metadata "
"source does not store all related identifiers (for example, all ISBNs of a "
"book), this method should retry with just the title and author (assuming "
"they were specified)."
msgstr "如果指定了标识符(s)但未找到匹配项，并且此元数据源未存储所有相关标识符（例如，一本书的所有 ISBN），则此方法应仅使用标题和作者（假设已指定）重试。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:8
msgid ""
"If this metadata source also provides covers, the URL to the cover should be"
" cached so that a subsequent call to the get covers API with the same "
"ISBN/special identifier does not need to get the cover URL again. Use the "
"caching API for this."
msgstr "如果此元数据源还提供封面，则应缓存封面的 URL，以便后续使用相同 ISBN/特殊标识符调用获取封面 API 时无需再次获取封面 URL。 为此，请使用缓存 API。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:13
msgid ""
"Every Metadata object put into result_queue by this method must have a "
"`source_relevance` attribute that is an integer indicating the order in "
"which the results were returned by the metadata source for this query. This "
"integer will be used by :meth:`compare_identify_results`. If the order is "
"unimportant, set it to zero for every result."
msgstr "通过此方法放入 result_queue 的每个元数据对象都必须具有“source_relevance”属性，该属性是一个整数，指示元数据源为此查询返回结果的顺序。 该整数将由“compare_identify_results”使用。 如果顺序不重要，请将每个结果的顺序设置为零。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:19
msgid ""
"Make sure that any cover/ISBN mapping information is cached before the "
"Metadata object is put into result_queue."
msgstr "确保在将元数据对象放入 result_queue 之前缓存所有封面/ISBN 映射信息。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:22
msgid "A log object, use it to output debugging information/errors"
msgstr "一个日志对象，用它来输出调试信息/错误"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:23
msgid ""
"A result Queue, results should be put into it. Each result is a Metadata "
"object"
msgstr "一个结果队列，结果应该放入其中。 每个结果都是一个元数据对象"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:25
msgid ""
"If abort.is_set() returns True, abort further processing and return as soon "
"as possible"
msgstr "如果 abort.is_set() 返回 True，则中止进一步处理并尽快返回"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:27
msgid "The title of the book, can be None"
msgstr "书名，可以为 None"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:28
msgid "A list of authors of the book, can be None"
msgstr "本书的作者列表，可以是 None"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:29
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr "其他标识符的字典，最常见的是 {'isbn':'1234...'}"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:31
msgid ""
"Timeout in seconds, no network request should hang for longer than timeout."
msgstr "超时，以秒为单位，网络请求挂起时间不应超过超时。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.identify:33
msgid ""
"None if no errors occurred, otherwise a unicode representation of the error "
"suitable for showing to the user"
msgstr "如果没有发生错误，则为 None，否则为适合向用户显示的错误的 unicode 表示形式"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:1
msgid ""
"Download a cover and put it into result_queue. The parameters all have the "
"same meaning as for :meth:`identify`. Put (self, cover_data) into "
"result_queue."
msgstr "下载封面并将其放入 result_queue 中。 所有参数的含义与“identify”相同。 将 (self, cover_data) 放入 result_queue 中。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:5
msgid ""
"This method should use cached cover URLs for efficiency whenever possible. "
"When cached data is not present, most plugins simply call identify and use "
"its results."
msgstr "此方法应尽可能使用缓存的封面 URL 以提高效率。 当缓存数据不存在时，大多数插件只需调用识别并使用其结果。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.Source.download_cover:9
msgid ""
"If the parameter get_best_cover is True and this plugin can get multiple "
"covers, it should only get the \"best\" one."
msgstr "如果参数 get_best_cover 为 True 并且该插件可以获取多个封面，则它应该只获取“最佳”封面。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
msgid ""
"Generate a sort key for comparison of the relevance of Metadata objects, "
"given a search query. This is used only to compare results from the same "
"metadata source, not across different sources."
msgstr "给定搜索查询，生成排序键以比较元数据对象的相关性。 这仅用于比较来自同一元数据源的结果，而不用于比较不同源的结果。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
msgid ""
"The sort key ensures that an ascending order sort is a sort by order of "
"decreasing relevance."
msgstr "排序键确保升序排序是按相关性递减的顺序排序。"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
msgid "The algorithm is:"
msgstr "算法是："

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
msgid ""
"Prefer results that have at least one identifier the same as for the query"
msgstr "首选具有至少一个与查询相同的标识符的结果"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
msgid "Prefer results with a cached cover URL"
msgstr "首选带有缓存封面 URL 的结果"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
msgid "Prefer results with all available fields filled in"
msgstr "首选已填写所有可用字段的结果"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
msgid ""
"Prefer results with the same language as the current user interface language"
msgstr "首选与当前用户界面语言相同的结果"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
msgid "Prefer results that are an exact title match to the query"
msgstr "首选与查询标题完全匹配的结果"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr "优先选择评论较长的结果（长度超过 10%）"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
msgid ""
"Use the relevance of the result as reported by the metadata source's search"
msgstr "使用元数据源搜索报告的结果的相关性"

#: ../../__w/calibre/calibre/src/calibre/ebooks/metadata/sources/base.pydocstring
#: of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:17
msgid "engine"
msgstr "引擎"

#: ../../__w/calibre/calibre/manual/plugins.rst:76
msgid "Conversion plugins"
msgstr "转换插件"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin:1
msgid ""
"InputFormatPlugins are responsible for converting a document into "
"HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. "
"The main action happens in :meth:`convert`."
msgstr "engineInputFormatPlugins 负责将文档转换为 HTML+OPF+CSS+等。 转换结果*必须*采用 UTF-8 编码。 主要操作发生在“convert”中。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run For example: "
"``set(['azw', 'mobi', 'prc'])``"
msgstr "应运行此插件的文件类型集例如：``set(['azw', 'mobi', 'prc'])``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
msgid ""
"If True, this input plugin generates a collection of images, one per HTML "
"file. This can be set dynamically, in the convert method if the input files "
"can be both image collections and non-image collections. If you set this to "
"True, you must implement the get_images() method that returns a list of "
"images."
msgstr "如果为 True，则此输入插件会生成一组图像，每个 HTML 文件一个。 如果输入文件可以是图像集合和非图像集合，则可以在转换方法中动态设置。 如果将此设置为 True，则必须实现返回图像列表的 get_images() 方法。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.core_usage:1
msgid ""
"Number of CPU cores used by this plugin. A value of -1 means that it uses "
"all available cores"
msgstr "该插件使用的 CPU 核心数。 值为 -1 表示它使用所有可用核心"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.for_viewer:1
msgid ""
"If set to True, the input plugin will perform special processing to make its"
" output suitable for viewing"
msgstr "如果设置为 True，输入插件将执行特殊处理，使其输出适合查看"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.output_encoding:1
msgid ""
"The encoding that this input plugin creates files in. A value of None means "
"that the encoding is undefined and must be detected individually"
msgstr "此输入插件创建文件所采用的编码。 None 值表示编码未定义，该值必须单独检测"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.common_options:1
msgid ""
"Options shared by all Input format plugins. Do not override in sub-classes. "
"Use :attr:`options` instead. Every option must be an instance of "
":class:`OptionRecommendation`."
msgstr "所有输入格式插件共享的选项。 不要在子类中重写。 请改用“选项”。 每个选项都必须是“OptionRecommendation”的实例。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.options:1
msgid ""
"Options to customize the behavior of this plugin. Every option must be an "
"instance of :class:`OptionRecommendation`."
msgstr "自定义此插件行为的选项。 每个选项都必须是 :`OptionRecommendation` 的实例。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.recommendations:1
msgid ""
"A set of 3-tuples of the form (option_name, recommended_value, "
"recommendation_level)"
msgstr "一组形式为（选项名称、推荐值、推荐级别）的三元组"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.get_images:1
msgid ""
"Return a list of absolute paths to the images, if this input plugin "
"represents an image collection. The list of images is in the same order as "
"the spine and the TOC."
msgstr "如果此输入插件代表图像集合，则返回图像的绝对路径列表。 图像列表的顺序与书脊和目录的顺序相同。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:1
msgid ""
"This method must be implemented in sub-classes. It must return the path to "
"the created OPF file or an :class:`OEBBook` instance. All output should be "
"contained in the current folder. If this plugin creates files outside the "
"current folder they must be deleted/marked for deletion before this method "
"returns."
msgstr "该方法必须在子类中实现。 它必须返回创建的 OPF 文件或“OEBBook”实例的路径。 所有输出应包含在当前文件夹中。 如果此插件在当前文件夹之外创建文件，则必须在此方法返回之前将其删除/标记为删除。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:8
msgid "A file like object that contains the input file."
msgstr "包含输入文件的类似文件的对象。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:9
msgid ""
"Options to customize the conversion process. Guaranteed to have attributes "
"corresponding to all the options declared by this plugin. In addition, it "
"will have a verbose attribute that takes integral values from zero upwards. "
"Higher numbers mean be more verbose. Another useful attribute is "
"``input_profile`` that is an instance of "
":class:`calibre.customize.profiles.InputProfile`."
msgstr "自定义转换过程的选项。 保证具有与该插件声明的所有选项相对应的属性。 此外，它还有一个详细属性，该属性采用从零开始的整数值。 数字越大意味着越详细。 另一个有用的属性是“input_profile”，它是“calibre.customize.profiles.InputProfile”的实例。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:17
msgid ""
"The extension (without the .) of the input file. It is guaranteed to be one "
"of the `file_types` supported by this plugin."
msgstr "输入文件的扩展名（不带 .）。 它保证是该插件支持的“file_types”之一。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:20
msgid ""
"A :class:`calibre.utils.logging.Log` object. All output should use this "
"object."
msgstr "一个 `calibre.utils.logging.Log` 对象。 所有输出都应使用该对象。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:22
msgid ""
"A dictionary of various information that the input plugin can get easily "
"that would speed up the subsequent stages of the conversion."
msgstr "输入插件可以轻松获取的各种信息的字典，这将加快转换的后续阶段。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
msgid ""
"Called to allow the input plugin to perform postprocessing after the book "
"has been parsed."
msgstr "调用以允许输入插件在解析书籍后执行后处理。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.specialize:1
msgid ""
"Called to allow the input plugin to specialize the parsed book for a "
"particular output format. Called after postprocess_book and before any "
"transforms are performed on the parsed book."
msgstr "调用以允许输入插件将解析的书籍专门用于特定的输出格式。 在 postprocess_book 之后且在解析的书上执行任何转换之前调用。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builtin input plugins for examples."
msgstr "调用以创建用于在 calibre GUI 中配置此插件的小部件。 该小部件必须是 PluginWidget 类的实例。 有关示例，请参阅内置输入插件。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:1
msgid ""
"OutputFormatPlugins are responsible for converting an OEB document "
"(OPF+HTML) into an output e-book."
msgstr "OutputFormatPlugins 负责将 OEB 文档（OPF+HTML）转换为输出电子书。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:4
msgid ""
"The OEB document can be assumed to be encoded in UTF-8. The main action "
"happens in :meth:`convert`."
msgstr "可以假定 OEB 文档采用 UTF-8 编码。 主要操作发生在“convert”中。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.conversion.OutputFormatPlugin.file_type:1
msgid ""
"The file type (extension without leading period) that this plugin outputs"
msgstr "该插件输出的文件类型（扩展名不带前导句点）"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.description:1
msgid ""
"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str"
msgstr "str(对象='') -> str str(bytes_or_buffer[, 编码[, 错误]]) -> str"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.description:4
msgid ""
"Create a new string object from the given object. If encoding or errors is "
"specified, then the object must expose a data buffer that will be decoded "
"using the given encoding and error handler. Otherwise, returns the result of"
" object.__str__() (if defined) or repr(object). encoding defaults to "
"sys.getdefaultencoding(). errors defaults to 'strict'."
msgstr "从给定对象创建一个新的字符串对象。如果指定了编码或错误，则对象必须公开将使用给定编码和错误处理程序解码的数据缓冲区。否则，返回返回object.__str__()(如果已定义)或repr(对象)的结果。编码默认为sys.getdefaultencoding()。错误默认为“严格”。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:1
msgid ""
"Render the contents of `oeb_book` (which is an instance of "
":class:`calibre.ebooks.oeb.OEBBook`) to the file specified by output."
msgstr "将“oeb_book”（它是“calibre.ebooks.oeb.OEBBook”的实例）的内容渲染到输出指定的文件中。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:4
msgid ""
"Either a file like object or a string. If it is a string it is the path to a"
" folder that may or may not exist. The output plugin should write its output"
" into that folder. If it is a file like object, the output plugin should "
"write its output into the file."
msgstr "类似文件的对象或字符串。 如果它是字符串，则它是可能存在或可能不存在的文件夹的路径。 输出插件应将其输出写入该文件夹。 如果它是类似文件的对象，则输出插件应将其输出写入文件中。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:8
msgid ""
"The input plugin that was used at the beginning of the conversion pipeline."
msgstr "在转换传输途径开始时使用的输入插件。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:10
msgid ""
"Conversion options. Guaranteed to have attributes corresponding to the "
"OptionRecommendations of this plugin."
msgstr "转换选项。 保证具有与该插件的 OptionRecommendations 相对应的属性。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:12
msgid "The logger. Print debug/info messages etc. using this."
msgstr "记录器。 使用它打印调试/信息消息等。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_options:1
msgid ""
"Can be used to change the values of conversion options, as used by the "
"conversion pipeline."
msgstr "可用于更改转换传输途径使用的转换选项的值。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
msgid ""
"Can be used to make changes to the CSS during the CSS flattening process."
msgstr "可用于在 CSS 扁平化过程中对 CSS 进行更改。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
msgid "The item (HTML file) being processed"
msgstr "正在处理的项目（HTML 文件）"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
msgid ""
"A Stylizer object containing the flattened styles for item. You can get the "
"style for any element by stylizer.style(element)."
msgstr "包含项目的展平样式的 Stylizer 对象。 您可以通过 stylizer.style(element) 获取任何元素的样式。"

#: ../../__w/calibre/calibre/src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builtin output plugins for examples."
msgstr "调用以创建用于在 calibre GUI 中配置此插件的小部件。 该小部件必须是 PluginWidget 类的实例。 有关示例，请参阅内置输出插件。"

#: ../../__w/calibre/calibre/manual/plugins.rst:91
msgid "Device drivers"
msgstr "设备驱动程序"

#: ../../__w/calibre/calibre/manual/plugins.rst:95
msgid ""
"The base class for all device drivers is :class:`DevicePlugin`. However, if "
"your device exposes itself as a USBMS drive to the operating system, you "
"should use the USBMS class instead as it implements all the logic needed to "
"support these kinds of devices."
msgstr "所有设备驱动程序的基类是“DevicePlugin”。 但是，如果您的设备将自身作为 USBMS 驱动器公开给操作系统，则您应该使用 USBMS 类，因为它实现了支持此类设备所需的所有逻辑。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin:1
msgid ""
"Defines the interface that should be implemented by backends that "
"communicate with an e-book reader."
msgstr "定义与电子书阅读器通信的后端应实现的接口。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.FORMATS:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.FORMATS:1
msgid "Ordered list of supported formats"
msgstr "支持格式的有序列表"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.VENDOR_ID:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.VENDOR_ID:1
msgid ""
"VENDOR_ID can be either an integer, a list of integers or a dictionary If it"
" is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr "VENDOR_ID 可以是整数、整数列表或字典。如果它是字典，则它必须是字典的字典，其形式为："

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.PRODUCT_ID:1
msgid "An integer or a list of integers"
msgstr "一个整数或一个整数列表"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.BCD:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.BCD:1
msgid ""
"BCD can be either None to not distinguish between devices based on BCD, or "
"it can be a list of the BCD numbers of all devices supported by this driver."
msgstr "BCD 可以是 None，不区分基于 BCD 的设备，也可以是该驱动程序支持的所有设备的 BCD 编号的列表。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
msgid "Height for thumbnails on the device"
msgstr "设备上缩略图的高度"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
msgid ""
"Compression quality for thumbnails. Set this closer to 100 to have better "
"quality thumbnails with fewer compression artifacts. Of course, the "
"thumbnails get larger as well."
msgstr "缩略图的压缩质量。 将其设置为接近 100 可以获得质量更好、压缩伪影更少的缩略图。 当然，缩略图也会变大。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
msgid ""
"Set this to True if the device supports updating cover thumbnails during "
"sync_booklists. Setting it to true will ask device.py to refresh the cover "
"thumbnails during book matching"
msgstr "如果设备支持在sync_booklists期间更新封面缩略图，则将此设置为True。 将其设置为 true 将要求 device.py 在书籍匹配期间刷新封面缩略图"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.driver.USBMS.CAN_SET_METADATA:1
msgid "Whether the metadata on books can be set via the GUI."
msgstr "是否可以通过操作界面设置书籍的元数据。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
msgid "Whether the device can handle device_db metadata plugboards"
msgstr "设备是否可以处理 device_db 元数据插件板"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.path_sep:1
msgid "Path separator for paths to books on device"
msgstr "设备上图书路径的路径分隔符"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.icon:1
msgid "Icon for this device"
msgstr "设备图标"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
msgid ""
"GUI displays this as a message if not None in the status bar. Useful if "
"opening can take a long time"
msgstr "如果状态栏中没有“无”，GUI 会将其显示为消息。 如果打开需要很长时间，则很有用"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
msgid ""
"Set of extensions that are \"virtual books\" on the device and therefore "
"cannot be viewed/saved/added to library. For example: "
"``frozenset(['kobo'])``"
msgstr "一组扩展是设备上的“虚拟书籍”，因此无法查看/保存/添加到书库。 例如：``frozenset(['kobo'])``"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSION_MESSAGE:1
msgid "Message to display to user for virtual book extensions."
msgstr "向用户显示虚拟图书扩展的消息。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
msgid ""
"Whether to nuke comments in the copy of the book sent to the device. If not "
"None this should be short string that the comments will be replaced by."
msgstr "是否删除发送到设备的书籍副本中的评论。 如果不是“无”，这应该是注释将被替换的短字符串。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
msgid ""
"If True indicates that  this driver completely manages device detection, "
"ejecting and so forth. If you set this to True, you *must* implement the "
"detect_managed_devices and debug_managed_device_detection methods. A driver "
"with this set to true is responsible for detection of devices, managing a "
"blacklist of devices, a list of ejected devices and so forth. calibre will "
"periodically call the detect_managed_devices() method and if it returns a "
"detected device, calibre will call open(). open() will be called every time "
"a device is returned even if previous calls to open() failed, therefore the "
"driver must maintain its own blacklist of failed devices. Similarly, when "
"ejecting, calibre will call eject() and then assuming the next call to "
"detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr "如果为True，则表示该驱动程序完全管理设备检测、弹出等。 如果将此设置为 True，则*必须*实现 detector_managed_devices 和 debug_management_device_detection 方法。 将此设置为 true 的驱动程序负责检测设备、管理设备黑名单、弹出设备列表等。 calibre 将定期调用 detector_management_devices() 方法，如果返回检测到的设备，calibre 将调用 open()。 每次返回设备时都会调用 open()，即使之前对 open() 的调用失败，因此驱动程序必须维护自己的失败设备黑名单。 类似地，当弹出时，calibre将调用eject()，然后假设下一次调用Detect_management_devices()返回None，它将调用post_yank_cleanup()。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
msgid ""
"If set the True, calibre will call the :meth:`get_driveinfo()` method after "
"the books lists have been loaded to get the driveinfo."
msgstr "如果设置为 True，calibre 将在加载书籍列表后调用 `get_driveinfo()` 方法来获取驱动器信息。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
msgid ""
"If set to True, calibre will ask the user if they want to manage the device "
"with calibre, the first time it is detected. If you set this to True you "
"must implement :meth:`get_device_uid()` and "
":meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` "
"and :meth:`set_user_blacklisted_devices`"
msgstr "如果设置为 True，calibre 将在第一次检测到设备时询问用户是否要使用 calibre 管理设备。 如果将此设置为 True，则必须实现 `get_device_uid()` 和 `ignore_connected_device()` 以及 `get_user_blacklisted_devices` 和 `set_user_blacklisted_devices`"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
msgid ""
"Set this to a dictionary of the form {'title':title, 'msg':msg, "
"'det_msg':detailed_msg} to have calibre popup a message to the user after "
"some callbacks are run (currently only upload_books). Be careful to not spam"
" the user with too many messages. This variable is checked after *every* "
"callback, so only set it when you really need to."
msgstr "将其设置为 {'title':title, 'msg':msg, 'det_msg':detailed_msg} 形式的字典，以便 calibre 在运行一些回调后向用户弹出一条消息（当前仅 upload_books）。 请注意不要向用户发送过多的垃圾邮件。 在*每个*回调后都会检查此变量，因此仅在真正需要时才设置它。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_open_popup_message:1
msgid ""
"GUI displays this as a non-modal popup. Should be an instance of "
"OpenPopupMessage"
msgstr "GUI 将其显示为非模式弹出窗口。 应该是 OpenPopupMessage 的实例"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:1
msgid ""
"Return True, device_info if a device handled by this plugin is currently "
"connected."
msgstr "如果此插件处理的设备当前已连接，则返回 True，device_info。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:3
msgid "List of devices currently connected"
msgstr "当前连接的设备列表"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:1
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr "仅当 MANAGES_DEVICE_PRESENCE 为 True 时调用。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:3
msgid ""
"Scan for devices that this driver can handle. Should return a device object "
"if a device is found. This object will be passed to the open() method as the"
" connected_device. If no device is found, return None. The returned object "
"can be anything, calibre does not use it, it is only passed to open()."
msgstr "扫描该驱动程序可以处理的设备。 如果找到设备，则应返回设备对象。 该对象将作为connected_device 传递给open() 方法。 如果没有找到设备，则返回 None。 返回的对象可以是任何东西，calibre 不使用它，它只传递给 open()。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:9
msgid ""
"This method is called periodically by the GUI, so make sure it is not too "
"resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr "此方法由 GUI 定期调用，因此请确保它不会占用太多资源。 使用缓存以避免重复扫描系统。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:13
msgid "Set of USB devices found on the system."
msgstr "系统上找到的 USB 设备集。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:15
msgid ""
"If True and the driver uses a cache to prevent repeated scanning, the cache "
"must be flushed."
msgstr "如果为 True 并且驱动程序使用缓存来防止重复扫描，则必须刷新缓存。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
msgid ""
"Should write information about the devices detected on the system to output,"
" which is a file like object."
msgstr "应该写入有关系统上检测到的设备的信息以输出，这是一个类似文件的对象。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
msgid ""
"Should return True if a device was detected and successfully opened, "
"otherwise False."
msgstr "如果检测到并成功打开设备，则应返回 True，否则返回 False。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:1
msgid "The key to unlock the device"
msgstr "解锁设备的密钥"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:2
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:2
msgid "If true the packet stream to/from the device is logged"
msgstr "如果为 true，则记录传入/传出设备的数据包流"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:3
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.set_progress_reporter:3
msgid ""
"Function that is called with a % progress (number between 0 and 100) for "
"various tasks. If it is called with -1 that means that the task does not "
"have any progress information"
msgstr "针对各种任务以百分比进度（0 到 100 之间的数字）调用的函数。 如果以-1调用则表示该任务没有任何进度信息"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:7
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.reset:7
msgid "Device information from the device scanner"
msgstr "来自设备扫描仪的设备信息"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:1
msgid ""
"Optional method to perform further checks on a device to see if this driver "
"is capable of handling it. If it is not it should return False. This method "
"is only called after the vendor, product ids and the bcd have matched, so it"
" can do some relatively time intensive checks. The default implementation "
"returns True. This method is called only on Windows. See also "
":meth:`can_handle`."
msgstr "对设备执行进一步检查以查看该驱动程序是否能够处理它的可选方法。 如果不是，则应返回 False。 该方法仅在供应商、产品 ID 和 bcd 匹配后调用，因此它可以执行一些相对耗时的检查。 默认实现返回 True。 该方法仅在 Windows 上调用。 另请参见“can_handle”。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:8
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:8
msgid ""
"Note that for devices based on USBMS this method by default delegates to "
":meth:`can_handle`.  So you only need to override :meth:`can_handle` in your"
" subclass of USBMS."
msgstr "请注意，对于基于 USBMS 的设备，此方法默认委托给“can_handle”。 因此，您只需要在 USBMS 的子类中重写“can_handle”即可。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:12
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.can_handle_windows:12
msgid ""
"A usbdevice as returned by :func:`calibre.devices.winusb.scan_usb_devices`"
msgstr "由`calibre.devices.winusb.scan_usb_devices`返回的usbdevice"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:1
msgid "Unix version of :meth:`can_handle_windows`."
msgstr "`can_handle_windows` 的 Unix 版本。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:3
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr "是一个元组（vid、pid、bcd、制造商、产品、序列号）"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:1
msgid ""
"Perform any device specific initialization. Called after the device is "
"detected but before any other functions that communicate with the device. "
"For example: For devices that present themselves as USB Mass storage "
"devices, this method would be responsible for mounting the device or if the "
"device has been automounted, for finding out where it has been mounted. The "
"method :meth:`calibre.devices.usbms.device.Device.open` has an "
"implementation of this function that should serve as a good example for USB "
"Mass storage devices."
msgstr "执行任何设备特定的初始化。 在检测到设备之后但在与设备通信的任何其他函数之前调用。 例如：对于将自身呈现为 USB 大容量存储设备的设备，此方法将负责安装该设备，或者如果该设备已自动安装，则负责查找其已安装的位置。 方法 `calibre.devices.usbms.device.Device.open` 具有此函数的实现，应该作为 USB 大容量存储设备的一个很好的示例。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:11
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:11
msgid ""
"This method can raise an OpenFeedback exception to display a message to the "
"user."
msgstr "此方法可以引发 OpenFeedback 异常以向用户显示消息。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:14
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:14
msgid ""
"The device that we are trying to open. It is a tuple of (vendor id, product "
"id, bcd, manufacturer name, product name, device serial number). However, "
"some devices have no serial number and on Windows only the first three "
"fields are present, the rest are None."
msgstr "我们正在尝试打开的设备。 它是（供应商 id、产品 id、bcd、制造商名称、产品名称、设备序列号）的元组。 但是，某些设备没有序列号，并且在 Windows 上仅存在前三个字段，其余字段均为“无”。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:20
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.open:20
msgid ""
"The UUID of the current calibre library. Can be None if there is no library "
"(for example when used from the command line)."
msgstr "当前 calibre 库的 UUID。 如果没有库（例如从命令行使用时），则可以为 None。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.eject:1
msgid ""
"Un-mount / eject the device from the OS. This does not check if there are "
"pending GUI jobs that need to communicate with the device."
msgstr "从操作系统中卸载/弹出设备。 这不会检查是否有需要与设备通信的待处理 GUI 作业。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.eject:4
msgid ""
"NOTE: That this method may not be called on the same thread as the rest of "
"the device methods."
msgstr "注意：此方法可能无法与其余设备方法在同一线程上调用。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.post_yank_cleanup:1
msgid "Called if the user yanks the device without ejecting it first."
msgstr "如果用户拉动设备而不先弹出它，则调用。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.set_progress_reporter:1
msgid "Set a function to report progress information."
msgstr "设置报告进度信息的功能。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.get_device_information:1
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr "向设备询问设备信息。 请参阅 L{DeviceInfoQuery}。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.get_device_information:3
msgid ""
"(device name, device version, software version on device, MIME type) The "
"tuple can optionally have a fifth element, which is a drive information "
"dictionary. See usbms.driver for an example."
msgstr "（设备名称、设备版本、设备上的软件版本、MIME 类型）元组可以选择包含第五个元素，它是驱动器信息字典。 有关示例，请参阅 usbms.driver。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_driveinfo:1
msgid ""
"Return the driveinfo dictionary. Usually called from "
"get_device_information(), but if loading the driveinfo is slow for this "
"driver, then it should set SLOW_DRIVEINFO. In this case, this method will be"
" called by calibre after the book lists have been loaded. Note that it is "
"not called on the device thread, so the driver should cache the drive info "
"in the books() method and this function should return the cached data."
msgstr "返回driveinfo字典。 通常从 get_device_information() 调用，但如果加载该驱动程序的驱动信息很慢，则应设置 SLOW_DRIVEINFO。 在这种情况下，该方法将在书籍列表加载后由 calibre 调用。 请注意，它不是在设备线程上调用的，因此驱动程序应在 books() 方法中缓存驱动器信息，并且该函数应返回缓存的数据。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.card_prefix:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.card_prefix:1
msgid ""
"Return a 2 element list of the prefix to paths on the cards. If no card is "
"present None is set for the card's prefix. E.G. ('/place', '/place2') (None,"
" 'place2') ('place', None) (None, None)"
msgstr "返回卡上路径前缀的 2 元素列表。 如果不存在任何内存卡，则不会为内存卡的前缀设置“无”。 例如。 ('/place', '/place2') (无, 'place2') ('place', 无) (无, 无)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:4
msgid "Get total space available on the mountpoints:"
msgstr "获取安装设备上的可用总空间："

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:2
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:2
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:2
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:2
msgid "Main memory"
msgstr "主内存"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:3
msgid "Memory Card A"
msgstr "存储卡A"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:4
msgid "Memory Card B"
msgstr "存储卡B"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:6
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.total_space:6
msgid ""
"A 3 element list with total space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return 0."
msgstr "一个 3 元素列表，总空间（以字节为单位）为 (1, 2, 3)。 如果特定设备没有任何这些位置，则应返回 0。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:4
msgid "Get free space available on the mountpoints:"
msgstr "获取挂载点上的可用空间："

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:3
msgid "Card A"
msgstr "存储卡 A"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:4
msgid "Card B"
msgstr "存储卡 B"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:6
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.free_space:6
msgid ""
"A 3 element list with free space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return -1."
msgstr "一个 3 元素列表，其可用空间以字节为单位 (1, 2, 3)。 如果特定设备没有任何这些位置，则应返回 -1。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:1
msgid "Return a list of e-books on the device."
msgstr "返回设备上的电子书列表。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:3
msgid ""
"If 'carda' or 'cardb' return a list of e-books on the specific storage card,"
" otherwise return list of e-books in main memory of device. If a card is "
"specified and no books are on the card return empty list."
msgstr "如果“carda”或“cardb”返回特定存储卡上的电子书列表，否则返回设备主内存中的电子书列表。 如果指定了卡片并且卡片上没有书籍，则返回空列表。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:8
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.books:8
msgid "A BookList."
msgstr "书单。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:1
msgid ""
"Upload a list of books to the device. If a file already exists on the "
"device, it should be replaced. This method should raise a "
":class:`FreeSpaceError` if there is not enough free space on the device. The"
" text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is"
" not None otherwise it must contain the word \"memory\"."
msgstr "将图书列表上传到设备。 如果设备上已存在文件，则应替换该文件。 如果设备上没有足够的可用空间，此方法应该引发“FreeSpaceError”。 如果 ``on_card`` 不是 None，则 FreeSpaceError 的文本必须包含单词“card”，否则它必须包含单词“memory”。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:7
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:7
msgid "A list of paths"
msgstr "路径列表"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:8
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:8
msgid ""
"A list of file names that the books should have once uploaded to the device."
" len(names) == len(files)"
msgstr "书籍应上传到设备的文件名列表。 len(名称) == len(文件)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:10
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:10
msgid ""
"If not None, it is a list of :class:`Metadata` objects. The idea is to use "
"the metadata to determine where on the device to put the book. len(metadata)"
" == len(files). Apart from the regular cover (path to cover), there may also"
" be a thumbnail attribute, which should be used in preference. The thumbnail"
" attribute is of the form (width, height, cover_data as jpeg)."
msgstr "如果不是 None，则它是“Metadata”对象的列表。 这个想法是使用元数据来确定将书籍放置在设备上的位置。 len(元数据) == len(文件). 除了常规封面（封面路径）之外，还可能存在缩略图属性，应优先使用该属性。 缩略图属性的形式为（宽度、高度、cover_data as jpeg）。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:17
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_books:17
msgid ""
"A list of 3-element tuples. The list is meant to be passed to "
":meth:`add_books_to_metadata`."
msgstr "三元素元组的列表。 该列表旨在传递给“add_books_to_metadata”。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:1
msgid ""
"Add locations to the booklists. This function must not communicate with the "
"device."
msgstr "将位置添加到书单中。 此功能不得与设备通信。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:4
msgid "Result of a call to L{upload_books}"
msgstr "调用 L{upload_books} 的结果"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:5
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr "`Metadata` 对象列表，与 `upload_books` 相同。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:3
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.add_books_to_metadata:7
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:5
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.sync_booklists:3
msgid ""
"A tuple containing the result of calls to (:meth:`books(oncard=None)`, "
":meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr "包含调用结果的元组 (`books(oncard=None)`、`books(oncard='carda')`、`books(oncard='cardb')`)。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.delete_books:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.delete_books:1
msgid "Delete books at paths on device."
msgstr "删除设备上路径中的书籍。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:1
msgid ""
"Remove books from the metadata list. This function must not communicate with"
" the device."
msgstr "从元数据列表中删除书籍。 此功能不得与设备通信。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.remove_books_from_metadata:4
msgid "paths to books on the device."
msgstr "设备上书籍的路径。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.sync_booklists:1
msgid "Update metadata on device."
msgstr "更新设备上的元数据。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:1
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr "读取设备上“path”处的文件并将其写入输出文件。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:3
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr "文件对象，如“sys.stdout”或“open”调用的结果。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.config_widget:1
msgid ""
"Should return a QWidget. The QWidget contains the settings for the device "
"interface"
msgstr "应该返回一个 QWidget。 QWidget 包含设备界面的设置"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.save_settings:1
msgid ""
"Should save settings to disk. Takes the widget created in "
":meth:`config_widget` and saves all settings to disk."
msgstr "应将设置保存到磁盘。 获取在`config_widget`中创建的小部件并将所有设置保存到磁盘。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.settings:1
msgid ""
"Should return an opts object. The opts object should have at least one "
"attribute `format_map` which is an ordered list of formats for the device."
msgstr "应该返回一个 opts 对象。 opts 对象应该至少有一个属性“format_map”，它是设备格式的有序列表。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:1
msgid ""
"provide the driver the current set of plugboards and a function to select a "
"specific plugboard. This method is called immediately before add_books and "
"sync_booklists."
msgstr "为驱动程序提供当前的一组插板以及选择特定插板的函数。 该方法在 add_books 和sync_booklists 之前立即调用。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "pb_func is a callable with the following signature::"
msgstr "pb_func 是具有以下签名的可调用函数："

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "def pb_func(device_name, format, plugboards)"
msgstr "def pb_func(设备名称、格式、插件板)"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:8
msgid ""
"You give it the current device name (either the class name or "
"DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or"
" 'device_db'), and the plugboards (you were given those by set_plugboards, "
"the same place you got this method)."
msgstr "您为其提供当前设备名称（类名或 DEVICE_PLUGBOARD_NAME）、您感兴趣的格式（“真实”格式或“device_db”）以及插件板（这些都是由set_plugboard提供的，与您获得此方法的位置相同）。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:13
msgid "None or a single plugboard instance."
msgstr "无或单个插件板实例。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.set_driveinfo_name:1
msgid ""
"Set the device name in the driveinfo file to 'name'. This setting will "
"persist until the file is re-created or the name is changed again."
msgstr "将driveinfo 文件中的设备名称设置为“name”。 此设置将持续存在，直到重新创建文件或再次更改名称。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.set_driveinfo_name:4
msgid ""
"Non-disk devices should implement this method based on the location codes "
"returned by the get_device_information() method."
msgstr "非磁盘设备应根据 get_device_information() 方法返回的位置代码来实现此方法。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:1
msgid ""
"Given a list of paths, returns another list of paths. These paths point to "
"addable versions of the books."
msgstr "给定一个路径列表，返回另一个路径列表。 这些路径指向书籍的可添加版本。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:4
msgid ""
"If there is an error preparing a book, then instead of a path, the position "
"in the returned list for that book should be a three tuple: (original_path, "
"the exception instance, traceback)"
msgstr "如果准备一本书时出现错误，则该书返回的列表中的位置应为三元组，而不是路径：（original_path、异常实例、traceback）"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.startup:1
msgid ""
"Called when calibre is starting the device. Do any initialization required. "
"Note that multiple instances of the class can be instantiated, and thus "
"__init__ can be called multiple times, but only one instance will have this "
"method called. This method is called on the device thread, not the GUI "
"thread."
msgstr "当 calibre 启动设备时调用。 执行任何所需的初始化。 请注意，可以实例化该类的多个实例，因此可以多次调用 __init__ ，但只有一个实例会调用此方法。 该方法在设备线程上调用，而不是在 GUI 线程上调用。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.shutdown:1
msgid ""
"Called when calibre is shutting down, either for good or in preparation to "
"restart. Do any cleanup required. This method is called on the device "
"thread, not the GUI thread."
msgstr "当 calibre 关闭时调用，无论是永久关闭还是准备重新启动。 进行任何所需的清理。 该方法在设备线程上调用，而不是在 GUI 线程上调用。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_uid:1
msgid ""
"Must return a unique id for the currently connected device (this is called "
"immediately after a successful call to open()). You must implement this "
"method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr "必须返回当前连接设备的唯一 ID（这在成功调用 open() 后立即调用）。 如果设置 ASK_TO_ALLOW_CONNECT = True，则必须实现此方法"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.ignore_connected_device:1
msgid ""
"Should ignore the device identified by uid (the result of a call to "
"get_device_uid()) in the future. You must implement this method if you set "
"ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately "
"after open(), so if open() caches some state, the driver should reset that "
"state."
msgstr "将来应该忽略 uid（调用 get_device_uid() 的结果）标识的设备。 如果设置 ASK_TO_ALLOW_CONNECT = True，则必须实现此方法。 请注意，此函数在 open() 之后立即调用，因此如果 open() 缓存某些状态，驱动程序应重置该状态。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
msgid ""
"Return map of device uid to friendly name for all devices that the user has "
"asked to be ignored."
msgstr "将设备 uid 映射返回到用户要求忽略的所有设备的友好名称。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
msgid "Set the list of device uids that should be ignored by this driver."
msgstr "设置该驱动程序应忽略的设备 uid 列表。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
msgid ""
"Implement this method if your device wants to override a particular "
"preference. You must ensure that all call sites that want a preference that "
"can be overridden use device_prefs['something'] instead of "
"prefs['something']. Your method should call "
"device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: "
"metadata management (prefs['manage_device_metadata'])"
msgstr "如果您的设备想要覆盖特定首选项，请实现此方法。 您必须确保所有需要可覆盖首选项的调用站点都使用 device_prefs['something'] 而不是 prefs['something']。 您的方法应调用 device_prefs.set_overrides(pref=val, pref=val, ...)。 目前用于：元数据管理(prefs['manage_device_metadata'])"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_library_info:1
msgid ""
"Implement this method if you want information about the current calibre "
"library. This method is called at startup and when the calibre library "
"changes while connected."
msgstr "如果您想要有关当前 calibre 库的信息，请实现此方法。 该方法在启动时以及连接时 calibre 库发生更改时调用。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
msgid ""
"Called by the device manager when starting plugins. If this method returns a"
" string, then a) it supports the device manager's dynamic control interface,"
" and b) that name is to be used when talking to the plugin."
msgstr "启动插件时由设备管理器调用。 如果此方法返回一个字符串，则 a) 它支持设备管理器的动态控制接口，b) 与插件对话时将使用该名称。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:3
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:4
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:6
msgid ""
"This method can be called on the GUI thread. A driver that implements this "
"method must be thread safe."
msgstr "该方法可以在GUI线程上调用。 实现此方法的驱动程序必须是线程安全的。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:1
msgid ""
"This method is called to start the plugin. The plugin should begin to accept"
" device connections however it does that. If the plugin is already accepting"
" connections, then do nothing."
msgstr "调用此方法来启动插件。 该插件应该开始接受设备连接，但它确实这样做了。 如果插件已经接受连接，则不执行任何操作。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:1
msgid ""
"This method is called to stop the plugin. The plugin should no longer accept"
" connections, and should cleanup behind itself. It is likely that this "
"method should call shutdown. If the plugin is already not accepting "
"connections, then do nothing."
msgstr "调用此方法来停止插件。 该插件不应再接受连接，并且应在其自身后面进行清理。 这个方法很可能应该调用 shutdown。 如果插件已经不接受连接，则不执行任何操作。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:1
msgid ""
"Return the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started. Return None if the option does not "
"exist."
msgstr "返回 opt_string 指示的选项的值。 该方法可以在插件未启动时调用。 如果选项不存在，则返回 None。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:1
msgid ""
"Set the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started."
msgstr "设置 opt_string 指示的选项的值。 该方法可以在插件未启动时调用。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:1
msgid "Return True if the plugin is started, otherwise false"
msgstr "如果插件启动则返回 True，否则返回 false"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:1
msgid ""
"Called during book matching when a book on the device is matched with a book"
" in calibre's db. The method is responsible for synchronizing data from the "
"device to calibre's db (if needed)."
msgstr "当设备上的书籍与 calibre 数据库中的书籍匹配时在书籍匹配期间调用。 该方法负责将数据从设备同步到 calibre 的数据库（如果需要）。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:5
msgid ""
"The method must return a two-value tuple. The first value is a set of "
"calibre book ids changed if calibre's database was changed or None if the "
"database was not changed. If the first value is an empty set then the "
"metadata for the book on the device is updated with calibre's metadata and "
"given back to the device, but no GUI refresh of that book is done. This is "
"useful when the calibre data is correct but must be sent to the device."
msgstr "该方法必须返回一个二值元组。 第一个值是一组 calibre 书籍 ID，如果 calibre 的数据库已更改，如果数据库未更改，则为“无”。 如果第一个值是空集，则设备上书籍的元数据将使用 calibre 的元数据进行更新并返回给设备，但不会对该书籍进行 GUI 刷新。 当口径数据正确但必须发送到设备时，这非常有用。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:13
msgid ""
"The second value is itself a 2-value tuple. The first value in the tuple "
"specifies whether a book format should be sent to the device. The intent is "
"to permit verifying that the book on the device is the same as the book in "
"calibre. This value must be None if no book is to be sent, otherwise return "
"the base file name on the device (a string like foobar.epub). Be sure to "
"include the extension in the name. The device subsystem will construct a "
"send_books job for all books with not- None returned values. Note: other "
"than to later retrieve the extension, the name is ignored in cases where the"
" device uses a template to generate the file name, which most do. The second"
" value in the returned tuple indicated whether the format is future-dated. "
"Return True if it is, otherwise return False. calibre will display a dialog "
"to the user listing all future dated books."
msgstr "第二个值本身就是一个 2 值元组。 元组中的第一个值指定是否应将书籍格式发送到设备。 目的是允许验证设备上的书与书的口径相同。 如果不发送书籍，则该值必须为 None，否则返回设备上的基本文件名（类似 foobar.epub 的字符串）。 请务必在名称中包含扩展名。 设备子系统将为所有返回值非 None 的书籍构造一个 send_books 作业。 注意：除了稍后检索扩展名之外，在设备使用模板生成文件名的情况下（大多数设备都会这样做），该名称将被忽略。 返回元组中的第二个值指示格式是否是未来的。 如果是则返回 True，否则返回 False。 calibre 将向用户显示一个对话框，列出所有未来日期的书籍。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:27
msgid ""
"Extremely important: this method is called on the GUI thread. It must be "
"threadsafe with respect to the device manager's thread."
msgstr "极其重要：该方法在 GUI 线程上调用。 对于设备管理器的线程来说，它必须是线程安全的。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:30
msgid ""
"book_id: the calibre id for the book in the database. book_metadata: the "
"Metadata object for the book coming from the device. first_call: True if "
"this is the first call during a sync, False otherwise"
msgstr "book_id：数据库中书籍的 calibre id。 book_metadata：来自设备的书籍的元数据对象。 first_call：如果这是同步期间的第一次调用，则为 True，否则为 False"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:1
msgid "Bases: :py:class:`list`"
msgstr "基础：`列表`"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:1
msgid "A list of books. Each Book object must have the fields"
msgstr "书籍清单。 每个 Book 对象必须具有字段"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:3
msgid "title"
msgstr "书名"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:4
msgid "authors"
msgstr "作者"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:5
msgid "size (file size of the book)"
msgstr "大小（书籍文件大小）"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:6
msgid "datetime (a UTC time tuple)"
msgstr "日期时间（UTC 时间元组）"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:7
msgid "path (path on the device to the book)"
msgstr "路径（设备上书籍的路径）"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:8
msgid ""
"thumbnail (can be None) thumbnail is either a str/bytes object with the "
"image data or it should have an attribute image_path that stores an absolute"
" (platform native) path to the image"
msgstr "缩略图（可以为 None）缩略图是带有图像数据的 str/bytes 对象，或者它应该有一个属性 image_path 来存储图像的绝对（平台本机）路径"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:11
msgid "tags (a list of strings, can be empty)."
msgstr "标签（字符串列表，可以为空）。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.supports_collections:1
msgid "Return True if the device supports collections for this book list."
msgstr "如果设备支持此图书列表的集合，则返回 True。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.add_book:1
msgid ""
"Add the book to the booklist. Intent is to maintain any device-internal "
"metadata. Return True if booklists must be sync'ed"
msgstr "将书添加到书单中。 目的是维护任何设备内部元数据。 如果必须同步书单则返回 True"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.remove_book:1
msgid ""
"Remove a book from the booklist. Correct any device metadata at the same "
"time"
msgstr "从书单中删除一本书。 同时更正任何设备元数据"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:1
msgid ""
"Return a dictionary of collections created from collection_attributes. Each "
"entry in the dictionary is of the form collection name:[list of books]"
msgstr "返回从 collection_attributes 创建的集合的字典。 字典中的每个条目的形式为集合名称：[书籍列表]"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:5
msgid ""
"The list of books is sorted by book title, except for collections created "
"from series, in which case series_index is used."
msgstr "书籍列表按书名排序，但从系列创建的集合除外，在这种情况下使用 series_index。"

#: ../../__w/calibre/calibre/src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:8
msgid "A list of attributes of the Book object"
msgstr "Book 对象的属性列表"

#: ../../__w/calibre/calibre/manual/plugins.rst:110
msgid "USB Mass Storage based devices"
msgstr "基于USB大容量存储的设备"

#: ../../__w/calibre/calibre/manual/plugins.rst:112
msgid ""
"The base class for such devices is "
":class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits "
"some of its functionality from its bases, documented below. A typical basic "
"USBMS based driver looks like this:"
msgstr "此类设备的基类是“calibre.devices.usbms.driver.USBMS”。 该类又从其基类继承了一些功能，如下所述。 典型的基于 USBMS 的驱动程序如下所示："

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device:1
msgid ""
"Bases: :py:class:`~calibre.devices.usbms.deviceconfig.DeviceConfig`, "
":py:class:`~calibre.devices.interface.DevicePlugin`"
msgstr "基础：`~calibre.devices.usbms.deviceconfig.DeviceConfig`、`~calibre.devices.interface.DevicePlugin`"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device:1
msgid ""
"This class provides logic common to all drivers for devices that export "
"themselves as USB Mass Storage devices. Provides implementations for "
"mounting/ejecting of USBMS devices on all platforms."
msgstr "此类为将自身导出为 USB 大容量存储设备的设备的所有驱动程序提供通用逻辑。 提供在所有平台上安装/弹出 USBMS 设备的实现。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
msgid ""
"String identifying the main memory of the device in the Windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "Windows PnP id 字符串中标识设备主内存的字符串 这可以是 None、字符串、字符串列表或已编译的正则表达式"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
msgid ""
"String identifying the first card of the device in the Windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "标识 Windows PnP id 字符串中设备的第一张卡的字符串 这可以是 None、字符串、字符串列表或已编译的正则表达式"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
msgid ""
"String identifying the second card of the device in the Windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr "标识 Windows PnP id 字符串中设备的第二张卡的字符串 这可以是 None、字符串、字符串列表或已编译的正则表达式"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
msgid ""
"Used by the new driver detection to disambiguate main memory from storage "
"cards. Should be a regular expression that matches the main memory mount "
"point assigned by macOS"
msgstr "新驱动程序检测使用它来区分主内存和存储卡。 应该是与 macOS 分配的主内存挂载点匹配的正则表达式"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
msgid "The maximum length of paths created on the device"
msgstr "设备上创建的路径的最大长度"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
msgid "Put news in its own folder"
msgstr "将新闻放在自己的文件夹中"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.windows_sort_drives:1
msgid ""
"Called to disambiguate main memory and storage card for devices that do not "
"distinguish between them on the basis of `WINDOWS_CARD_NAME`. For example: "
"The EB600"
msgstr "调用以消除不根据“WINDOWS_CARD_NAME”区分主内存和存储卡的设备的歧义。 例如：EB600"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.sanitize_callback:1
msgid ""
"Callback to allow individual device drivers to override the path "
"sanitization used by :meth:`create_upload_path`."
msgstr "允许各个设备驱动程序覆盖“create_upload_path”使用的路径清理的回调。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.filename_callback:1
msgid ""
"Callback to allow drivers to change the default file name set by "
":meth:`create_upload_path`."
msgstr "允许驱动程序更改“create_upload_path”设置的默认文件名的回调。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.sanitize_path_components:1
msgid ""
"Perform any device specific sanitization on the path components for files to"
" be uploaded to the device"
msgstr "对要上传到设备的文件的路径组件执行任何设备特定的清理"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.get_annotations:1
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr "将设备上找到的文件的path_map解析为annotation_map"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.add_annotation_to_library:1
msgid "Add an annotation to the calibre library"
msgstr "向 calibre 书库添加注释"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS:1
msgid ""
"Bases: :py:class:`~calibre.devices.usbms.cli.CLI`, "
":py:class:`~calibre.devices.usbms.device.Device`"
msgstr "基础：`~calibre.devices.usbms.cli.CLI`、`~calibre.devices.usbms.device.Device`"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS:1
msgid ""
"The base class for all USBMS devices. Implements the logic for "
"sending/getting/updating metadata/caching metadata/etc."
msgstr "所有 USBMS 设备的基类。 实现发送/获取/更新元数据/缓存元数据等的逻辑。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:1
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr "将书籍封面上传到设备。 默认实现不执行任何操作。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:3
msgid "The full path to the folder where the associated book is located."
msgstr "关联书籍所在文件夹的完整路径。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:4
msgid "The name of the book file without the extension."
msgstr "不带扩展名的图书文件的名称。"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:5
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr "属于本书的元数据。 使用metadata.thumbnail作为封面"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:7
msgid "The full path to the e-book file"
msgstr "电子书文件的完整路径"

#: ../../__w/calibre/calibre/src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.normalize_path:1
msgid "Return path with platform native path separators"
msgstr "带有平台本机路径分隔符的返回路径"

#: ../../__w/calibre/calibre/manual/plugins.rst:157
msgid "User interface actions"
msgstr "用户界面操作"

#: ../../__w/calibre/calibre/manual/plugins.rst:159
msgid ""
"If you are adding your own plugin in a ZIP file, you should subclass both "
"InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` "
"method of your InterfaceActionBase subclass must return an instantiated "
"object of your InterfaceBase subclass."
msgstr "如果您要在 ZIP 文件中添加自己的插件，则应该对 InterfaceActionBase 和 InterfaceAction 进行子类化。 InterfaceActionBase 子类的 load_actual_plugin 方法必须返回 InterfaceBase 子类的实例化对象。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:1
msgid "Bases: :py:class:`~PyQt6.QtCore.QObject`"
msgstr "基础：`~PyQt6.QtCore.QObject`"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:1
msgid ""
"A plugin representing an \"action\" that can be taken in the graphical user "
"interface. All the items in the toolbar and context menus are implemented by"
" these plugins."
msgstr "代表可以在图形用户界面中执行的“操作”的插件。 工具栏和上下文菜单中的所有项目都是由这些插件实现的。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:5
msgid ""
"Note that this class is the base class for these plugins, however, to "
"integrate the plugin with calibre's plugin system, you have to make a "
"wrapper class that references the actual plugin. See the "
":mod:`calibre.customize.builtins` module for examples."
msgstr "请注意，此类是这些插件的基类，但是，要将插件与 calibre 的插件系统集成，您必须创建一个引用实际插件的包装类。 有关示例，请参阅“calibre.customize.builtins”模块。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:10
msgid ""
"If two :class:`InterfaceAction` objects have the same name, the one with "
"higher priority takes precedence."
msgstr "如果两个“InterfaceAction”对象具有相同的名称，则优先级较高的对象优先。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:13
msgid ""
"Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, "
":meth:`location_selected`, :meth:`shutting_down`, "
":meth:`initialization_complete` and :meth:`tag_browser_context_action` "
"methods."
msgstr "子类应该实现 `genesis`、`library_changed`、`location_selected`、`shutting_down`、`initialization_complete` 和 `tag_browser_context_action` 方法。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:17
msgid ""
"Once initialized, this plugin has access to the main calibre GUI via the "
":attr:`gui` member. You can access other plugins by name, for example::"
msgstr "初始化后，该插件可以通过“gui”成员访问主 calibre GUI。 您可以通过名称访问其他插件，例如："

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:22
msgid ""
"To access the actual plugin, use the :attr:`interface_action_base_plugin` "
"attribute, this attribute only becomes available after the plugin has been "
"initialized. Useful if you want to use methods from the plugin class like "
"do_user_config()."
msgstr "要访问实际的插件，请使用“interface_action_base_plugin”属性，该属性仅在插件初始化后才可用。 如果您想使用插件类中的方法，例如 do_user_config()，则很有用。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:27
msgid ""
"The QAction specified by :attr:`action_spec` is automatically create and "
"made available as ``self.qaction``."
msgstr "由“action_spec”指定的 QAction 会自动创建并以“self.qaction”形式提供。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.name:1
msgid ""
"The plugin name. If two plugins with the same name are present, the one with"
" higher priority takes precedence."
msgstr "插件名称。 如果存在两个同名插件，则优先级较高的插件优先。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.priority:1
msgid ""
"The plugin priority. If two plugins with the same name are present, the one "
"with higher priority takes precedence."
msgstr "插件优先级。 如果存在两个同名插件，则优先级较高的插件优先。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.popup_type:1
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr "将此插件添加到工具栏时的菜单弹出类型"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.auto_repeat:1
msgid ""
"Whether this action should be auto repeated when its shortcut key is held "
"down."
msgstr "按住快捷键时是否自动重复此操作。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_spec:1
msgid ""
"Of the form: (text, icon_path, tooltip, keyboard shortcut). icon, tooltip "
"and keyboard shortcut can be None. keyboard shortcut must be either a "
"string, None or tuple of shortcuts. If None, a keyboard shortcut "
"corresponding to the action is not registered. If you pass an empty tuple, "
"then the shortcut is registered with no default key binding."
msgstr "形式为：（文本、图标路径、工具提示、键盘快捷键）。 图标、工具提示和键盘快捷键可以为“无”。 键盘快捷键必须是字符串、None 或快捷键元组。 如果为“无”，则不会注册与该操作对应的键盘快捷键。 如果传递空元组，则注册快捷方式时没有默认键绑定。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_shortcut_name:1
msgid ""
"If not None, used for the name displayed to the user when customizing the "
"keyboard shortcuts for the above action spec instead of action_spec[0]"
msgstr "如果不是 None，则用于在自定义上述操作规范的键盘快捷键时向用户显示的名称，而不是 action_spec[0]"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_add_menu:1
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr "如果为 True，则会自动创建菜单并将其添加到 self.qaction"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
msgid ""
"If True, a clone of self.qaction is added to the menu of self.qaction If you"
" want the text of this action to be different from that of self.qaction, set"
" this variable to the new text"
msgstr "如果为 True，则将 self.qaction 的克隆添加到 self.qaction 的菜单中。如果您希望此操作的文本与 self.qaction 的文本不同，请将此变量设置为新文本"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.dont_add_to:1
msgid ""
"Set of locations to which this action must not be added. See "
":attr:`all_locations` for a list of possible locations"
msgstr "不得添加此操作的位置集。 请参阅“all_locations”以获取可能位置的列表"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.dont_remove_from:1
msgid ""
"Set of locations from which this action must not be removed. See "
":attr:`all_locations` for a list of possible locations"
msgstr "不得删除此操作的一组位置。 请参阅“all_locations”以获取可能位置的列表"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.action_type:1
msgid ""
"Type of action 'current' means acts on the current view 'global' means an "
"action that does not act on the current view, but rather on calibre as a "
"whole"
msgstr "操作类型 “当前”表示作用于当前视图 “全局”表示操作不作用于当前视图，而是作用于整个 calibre"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.actions.InterfaceAction.accepts_drops:1
msgid ""
"If True, then this InterfaceAction will have the opportunity to interact "
"with drag and drop events. See the methods, :meth:`accept_enter_event`, "
":meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr "如果为 True，则此 InterfaceAction 将有机会与拖放事件进行交互。 有关详细信息，请参阅方法“accept_enter_event”、“accept_drag_move_event”、“drop_event”。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accept_enter_event:1
msgid ""
"This method should return True iff this interface action is capable of "
"handling the drag event. Do not call accept/ignore on the event, that will "
"be taken care of by the calibre UI."
msgstr "当且仅当此界面操作能够处理拖动事件时，此方法应返回 True。 不要对事件调用接受/忽略，这将由 calibre UI 处理。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.drop_event:1
msgid ""
"This method should perform some useful action and return True iff this "
"interface action is capable of handling the drop event. Do not call "
"accept/ignore on the event, that will be taken care of by the calibre UI. "
"You should not perform blocking/long operations in this function. Instead "
"emit a signal or use QTimer.singleShot and return quickly. See the builtin "
"actions for examples."
msgstr "当且仅当该接口操作能够处理放置事件时，此方法应该执行一些有用的操作并返回 True。 不要对事件调用接受/忽略，这将由 calibre UI 处理。 您不应在此函数中执行阻塞/长操作。 相反，发出信号或使用 QTimer.singleShot 并快速返回。 请参阅内置操作的示例。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:1
msgid ""
"Convenience method to easily add actions to a QMenu. Returns the created "
"QAction. This action has one extra attribute calibre_shortcut_unique_name "
"which if not None refers to the unique name under which this action is "
"registered with the keyboard manager."
msgstr "轻松向 QMenu 添加操作的便捷方法。 返回创建的 QAction。 此操作有一个额外的属性 calibre_shortcut_unique_name，如果不是 None，则指的是此操作在键盘管理器中注册的唯一名称。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:6
msgid "The QMenu the newly created action will be added to"
msgstr "新创建的操作将添加到 QMenu"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:7
msgid ""
"A unique name for this action, this must be globally unique, so make it as "
"descriptive as possible. If in doubt, add an UUID to it."
msgstr "此操作的唯一名称，必须是全局唯一的，因此请使其尽可能具有描述性。 如果有疑问，请添加 UUID。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:10
msgid "The text of the action."
msgstr "操作的文本。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:11
msgid ""
"Either a QIcon or a file name. The file name is passed to the QIcon.ic() "
"builtin, so you do not need to pass the full path to the images folder."
msgstr "QIcon 或文件名。 文件名将传递给 QIcon.ic() 内置函数，因此您无需传递图像文件夹的完整路径。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:14
msgid ""
"A string, a list of strings, None or False. If False, no keyboard shortcut "
"is registered for this action. If None, a keyboard shortcut with no default "
"keybinding is registered. String and list of strings register a shortcut "
"with default keybinding as specified."
msgstr "一个字符串、字符串列表、None 或 False。 如果为 False，则不会为此操作注册键盘快捷键。 如果为“无”，则注册没有默认键绑定的键盘快捷键。 字符串和字符串列表使用指定的默认键绑定注册快捷方式。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:18
msgid "A description for this action. Used to set tooltips."
msgstr "此操作的描述。 用于设置工具提示。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:20
msgid ""
"A callable which is connected to the triggered signal of the created action."
msgstr "连接到所创建操作的触发信号的可调用对象。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:22
msgid ""
"The text displayed to the user when customizing the keyboard shortcuts for "
"this action. By default it is set to the value of ``text``."
msgstr "自定义此操作的键盘快捷键时向用户显示的文本。 默认情况下，它设置为“text”的值。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:25
msgid ""
"Shortcuts for actions that don't always appear, or are library dependent, "
"may disappear when other keyboard shortcuts are edited unless "
"```persist_shortcut``` is set True."
msgstr "编辑其他键盘快捷键时，并不总是出现或依赖于库的操作的快捷键可能会消失，除非将 ```persist_shortcut``` 设置为 True。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:12
msgid ""
"A dictionary of the form ``{name : file_contents}``. Any names that were not"
" found in the ZIP file will not be present in the dictionary."
msgstr "形式为“{name : file_contents}”的字典。 ZIP 文件中未找到的任何名称都不会出现在字典中。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.genesis:1
msgid ""
"Setup this plugin. Only called once during initialization. self.gui is "
"available. The action specified by :attr:`action_spec` is available as "
"``self.qaction``."
msgstr "设置这个插件。 仅在初始化期间调用一次。 self.gui 可用。 `action_spec` 指定的操作可作为 ``self.qaction`` 使用。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.location_selected:1
msgid ""
"Called whenever the book list being displayed in calibre changes. Currently "
"values for loc are: ``library, main, card and cardb``."
msgstr "每当以 calibre 显示的图书列表发生变化时调用。 当前 loc 的值为：“library、main、card 和 cardb”。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.location_selected:4
msgid ""
"This method should enable/disable this action and its sub actions as "
"appropriate for the location."
msgstr "此方法应根据位置启用/禁用此操作及其子操作。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:1
#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:1
msgid "Called whenever the current library is changed."
msgstr "每当当前库发生更改时调用。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:3
msgid "The LibraryDatabase corresponding to the previous library."
msgstr "与之前的库对应的LibraryDatabase。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_about_to_change:4
msgid "The LibraryDatabase corresponding to the new library."
msgstr "新书库对应的LibraryDatabase。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:3
msgid "The LibraryDatabase corresponding to the current library."
msgstr "当前书库对应的LibraryDatabase。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
msgid ""
"Called once per action when the layout of the main GUI is completed. If your"
" action needs to make changes to the layout, they should be done here, "
"rather than in :meth:`initialization_complete`."
msgstr "当主 GUI 布局完成时，每个操作调用一次。 如果您的操作需要对布局进行更改，则应该在此处完成，而不是在“initialization_complete”中完成。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.initialization_complete:1
msgid ""
"Called once per action when the initialization of the main GUI is completed."
msgstr "当主 GUI 初始化完成时，每个操作调用一次。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.tag_browser_context_action:1
msgid ""
"Called when displaying the context menu in the Tag browser. ``index`` is the"
" QModelIndex that points to the Tag browser item that was right clicked. "
"Test it for validity with index.valid() and get the underlying TagTreeItem "
"object with index.data(Qt.ItemDataRole.UserRole). Any action objects yielded"
" by this method will be added to the context menu."
msgstr "在标签浏览器中显示上下文菜单时调用。 ``index`` 是指向右键单击的标签浏览器项的 QModelIndex。 使用index.valid()测试其有效性，并使用index.data(Qt.ItemDataRole.UserRole)获取底层TagTreeItem对象。 此方法生成的任何操作对象都将添加到上下文菜单中。"

#: ../../__w/calibre/calibre/src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.shutting_down:1
msgid ""
"Called once per plugin when the main GUI is in the process of shutting down."
" Release any used resources, but try not to block the shutdown for long "
"periods of time."
msgstr "当主 GUI 正在关闭时，每个插件调用一次。 释放所有使用的资源，但尽量不要长时间阻止关闭。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.InterfaceActionBase.load_actual_plugin:1
msgid "This method must return the actual interface action plugin object."
msgstr "该方法必须返回实际的界面操作插件对象。"

#: ../../__w/calibre/calibre/manual/plugins.rst:175
msgid "Preferences plugins"
msgstr "首选项插件"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:1
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr "代表“首选项”对话框中显示的小部件的插件。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:3
msgid ""
"This plugin has only one important method :meth:`create_widget`. The various"
" fields of the plugin control how it is categorized in the UI."
msgstr "这个插件只有一个重要的方法“create_widget”。 插件的各个字段控制它在 UI 中的分类方式。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.config_widget:1
msgid ""
"Import path to module that contains a class named ConfigWidget which "
"implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr "包含名为 ConfigWidget 的类（实现 ConfigWidgetInterface）的模块的导入路径。 由“create_widget”使用。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.category_order:1
msgid ""
"Where in the list of categories the :attr:`category` of this plugin should "
"be."
msgstr "该插件的“类别”应位于类别列表中的位置。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.name_order:1
msgid ""
"Where in the list of names in a category, the :attr:`gui_name` of this "
"plugin should be"
msgstr "在类别中的名称列表中，该插件的“gui_name”应该是"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.category:1
msgid "The category this plugin should be in"
msgstr "该插件应该属于的类别"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.gui_category:1
msgid "The category name displayed to the user for this plugin"
msgstr "该插件向用户显示的类别名称"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.gui_name:1
msgid "The name displayed to the user for this plugin"
msgstr "该插件向用户显示的名称"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.icon:1
msgid "The icon for this plugin, should be an absolute path"
msgstr "该插件的图标应该是绝对路径"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.customize.PreferencesPlugin.description:1
msgid "The description used for tooltips and the like"
msgstr "用于工具提示等的描述"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:1
msgid ""
"Create and return the actual Qt widget used for setting this group of "
"preferences. The widget must implement the "
":class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr "创建并返回用于设置这组首选项的实际 Qt 小部件。 小部件必须实现 `calibre.gui2.preferences.ConfigWidgetInterface`。"

#: ../../__w/calibre/calibre/src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:5
msgid ""
"The default implementation uses :attr:`config_widget` to instantiate the "
"widget."
msgstr "默认实现使用“config_widget”来实例化小部件。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface:1
msgid ""
"This class defines the interface that all widgets displayed in the "
"Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base "
"class that implements this interface and defines various convenience methods"
" as well."
msgstr "此类定义“首选项”对话框中显示的所有小部件都必须实现的接口。 请参阅“ConfigWidgetBase”了解实现此接口并定义各种便捷方法的基类。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetBase.changed_signal:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
msgid ""
"This signal must be emitted whenever the user changes a value in this widget"
msgstr "每当用户更改此小部件中的值时，都必须发出此信号"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetBase.supports_restoring_to_defaults:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr "当且仅当执行了 `restore_to_defaults` 方法时设置为 True。"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
msgid "The tooltip for the \"Restore defaults\" button"
msgstr "“恢复默认值”按钮的工具提示"

#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetBase.restart_critical:1
#: ../../__w/calibre/calibre/manual/docstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
msgid ""
"If True the Preferences dialog will not allow the user to set any more "
"preferences. Only has effect if :meth:`commit` returns True."
msgstr "如果为 True，首选项对话框将不允许用户设置更多首选项。 仅当“commit”返回 True 时才有效。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
msgid ""
"Called once before the widget is displayed, should perform any necessary "
"setup."
msgstr "在显示小部件之前调用一次，应执行任何必要的设置。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
msgid "The main calibre graphical user interface"
msgstr "calibre主要图形用户界面"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.initialize:1
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
msgid ""
"Should set all config values to their initial values (the values stored in "
"the config files). A \"return\" statement is optional. Return False if the "
"dialog is not to be shown."
msgstr "应该将所有配置值设置为其初始值（存储在配置文件中的值）。 “返回”语句是可选的。 如果不显示对话框，则返回 False。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.restore_defaults:1
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
msgid "Should set all config values to their defaults."
msgstr "应该将所有配置值设置为默认值。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.commit:1
#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
msgid ""
"Save any changed settings. Return True if the changes require a restart, "
"False otherwise. Raise an :class:`AbortCommit` exception to indicate that an"
" error occurred. You are responsible for giving the user feedback about what"
" the error is and how to correct it."
msgstr "保存所有更改的设置。 如果更改需要重新启动，则返回 True，否则返回 False。 引发“AbortCommit”异常以指示发生错误。 您有责任向用户提供有关错误是什么以及如何纠正错误的反馈。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
msgid ""
"Called once after this widget is committed. Responsible for causing the gui "
"to reread any changed settings. Note that by default the GUI re-initializes "
"various elements anyway, so most widgets won't need to use this method."
msgstr "提交此小部件后调用一次。 负责使 GUI 重新读取任何更改的设置。 请注意，默认情况下 GUI 无论如何都会重新初始化各种元素，因此大多数小部件不需要使用此方法。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetInterface.initial_tab_changed:1
msgid ""
"Called if the initially displayed tab is changed before the widget is shown,"
" but after it is initialized."
msgstr "如果在小部件显示之前但初始化之后更改了最初显示的选项卡，则调用。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:1
msgid ""
"Base class that contains code to easily add standard config widgets like "
"checkboxes, combo boxes, text fields and so on. See the :meth:`register` "
"method."
msgstr "包含用于轻松添加标准配置小部件的代码的基类，如复选框、组合框、文本字段等。 请参阅“注册”方法。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:5
msgid ""
"This class automatically handles change notification, resetting to default, "
"translation between gui objects and config objects, etc. for registered "
"settings."
msgstr "此类自动处理注册设置的更改通知、重置为默认值、gui 对象和配置对象之间的转换等。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase:9
msgid ""
"If your config widget inherits from this class but includes setting that are"
" not registered, you should override the :class:`ConfigWidgetInterface` "
"methods and call the base class methods inside the overrides."
msgstr "如果您的配置小部件继承自此类，但包含未注册的设置，则应覆盖“ConfigWidgetInterface”方法并调用覆盖内的基类方法。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:1
msgid "Register a setting."
msgstr "注册设置。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:3
msgid "The setting name"
msgstr "设置名称"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:4
msgid "The config object that reads/writes the setting"
msgstr "读取/写入设置的配置对象"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:5
msgid ""
"The name of the GUI object that presents an interface to change the setting."
" By default it is assumed to be ``'opt_' + name``."
msgstr "提供更改设置界面的 GUI 对象的名称。 默认情况下，假定为``'opt_' + name``。"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:8
msgid ""
"If this setting is a multiple choice (combobox) based setting, the list of "
"choices. The list is a list of two element tuples of the form: ``[(gui name,"
" value), ...]``"
msgstr "如果此设置是基于多项选择（组合框）的设置，则为选项列表。 该列表是两个元素元组的列表，其形式为：``[(gui name, value), ...]``"

#: ../../__w/calibre/calibre/src/calibre/gui2/preferences/__init__.pydocstring
#: of calibre.gui2.preferences.ConfigWidgetBase.register:11
msgid ""
"The class responsible for managing this setting. The default class handles "
"almost all cases, so this param is rarely used."
msgstr "负责管理此设置的类。 默认类处理几乎所有情况，因此很少使用此参数。"
